//This Source Code Form is subject to the terms of the Mozilla
//Public License, v. 2.0. If a copy of the MPL was not distributed
//with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
#Использовать cmdline
#Использовать logos
#Использовать tempfiles
#Использовать asserts
#Использовать v8runner
#Использовать strings
//#Использовать gitsync
#Использовать json

Перем Лог;
Перем КодВозврата;
Перем мВозможныеКоманды;
Перем ЭтоWindows;
Перем РезультатыОбработкиВнешнихОбработок;
Перем КаталогЛогов;
Перем КорневойПутьПроекта;

Функция ВозможныеКоманды()
    
    Если мВозможныеКоманды = Неопределено Тогда
        //Работаем в 8.3.8, внешние обработки как исходники и только исходники. 
        мВозможныеКоманды = Новый Структура;
        мВозможныеКоманды.Вставить("ЮнитТест", "xunit");
        мВозможныеКоманды.Вставить("ТестироватьПоведение", "vanessa");
        мВозможныеКоманды.Вставить("Тестирование", "tests");
        //Работаем с исходниками конфигурации
        мВозможныеКоманды.Вставить("СобратьИзИсходников", "compile"); //1
        мВозможныеКоманды.Вставить("СобратьИзИсходниковТекущуюКонфигурацию", "compilecurrent"); //1
        мВозможныеКоманды.Вставить("РазобратьНаИсходникиТекущуюКонфигурацию", "decompilecurrent"); //1
        мВозможныеКоманды.Вставить("РазобратьНаИсходники", "decompile"); //1
        мВозможныеКоманды.Вставить("СобратьТолькоИзмененые", "compilediff"); //изменения определяем из различий в git
        //Работаем с расширениями.
        мВозможныеКоманды.Вставить("РазобратьРасширение", "decompileext");
        мВозможныеКоманды.Вставить("СобратьРасширение", "compileext");
        мВозможныеКоманды.Вставить("ЗагрузитьРасширение", "loadext");
        //Работаем с внешними обработками
        мВозможныеКоманды.Вставить("ДекомпилироватьEpf", "decompileepf");
        мВозможныеКоманды.Вставить("СобратьEpf", "compileepf");
        мВозможныеКоманды.Вставить("ОбновитьБазу", "updatedb");
        мВозможныеКоманды.Вставить("ЗапуститьВРежимеПредприятия", "run");
        
        мВозможныеКоманды.Вставить("ОбновитьИзХранилища", "loadrepo");
        мВозможныеКоманды.Вставить("Следить", "watch");
        мВозможныеКоманды.Вставить("Конфигуратор", "designer");
        
        мВозможныеКоманды.Вставить("Помощь", "--help");
    КонецЕсли;
    
    Возврат мВозможныеКоманды;
    
КонецФункции

Процедура ВывестиСправку()
    
    Сообщить("Утилита запуска различных тестов и задач");
    Сообщить(" ");
    Сообщить("Параметры командной строки:");
    Сообщить("  xunit inputPath outputPath [--ibname, --db-user, --db-pwd, --path]");
    Сообщить("		Запуск тестирования xUnitFor1c");
    Сообщить("		inputPath путь к каталогу или к файлу с тестами");
    Сообщить("		outputPath путь к каталогу с отчетами");
    
    Сообщить("		--path путь к внешней обработке, по умолчанию ищу в vendor/xunitfor1c/xddtestrunner.epf");
    
    Сообщить("  vanessa inputPath outputPath [--ibname, --db-user, --db-pwd, --path]");
    Сообщить("		Запуск тестирования vanessa-behavior");
    Сообщить("		inputPath путь к каталогу или к файлу с тестами");
    Сообщить("		outputPath путь к каталогу с отчетами");
    Сообщить("		--path путь к внешней обработке, по умолчанию ищу в vendor/vanessa-behavior/behavior.epf");
    Сообщить("		--pathsettings путь к файлу настроек");
    
    Сообщить("  compile inputPath outputPath [--v8version]");
    Сообщить("      собирает из исходников cf файл, указываем каталог откуда брать и каталог куда сохранить cf");
    
    Сообщить("  decompile inputPath outputPath [--v8version]");
    Сообщить("      разбриаем cf файл на исходники");
    
    Сообщить("  decompilecurrent outputPath [--ibname, --db-user, --db-pwd, --v8version]");
    Сообщить("      разбриаем из текущей базы cf на исходники");
    
    Сообщить("  compilecurrent inputPath [--ibname, --db-user, --db-pwd, --v8version]");
    Сообщить("       загружаем исходники в текущую базу");
    
    Сообщить("  run [--uccode, --command, --execute]");
    Сообщить("       запускаем предприятие в режиме тонкого клиента с передачей запускаемых обработок и параметров");
    Сообщить("       ");
    
    Сообщить("  dbupdate - [--uccode] обновление конфигурации базы данных");
    
    Сообщить("  loadrepo - [--storage-] обновление конфигурации базы данных");
    Сообщить("  watch    - следить за изменением файлов и автоматически компилировать/декомпилировать внешние обработки");
    Сообщить("  designer - запустить конфигуратор для основной базы разработки и для сервисной базы");
     
    Сообщить(" общие для всех параметры");
    Сообщить("       --v8version Маска версии платформы (8.3, 8.3.5, 8.3.6.2299 и т.п.)");
    Сообщить(" общие для xunit, vaness, tests, compilecurrent, decompilecurrent, run, dbupdate");
    Сообщить("       --ibname строка подключения к базе данных");
    Сообщить("       --db-user имя пользователя для подключения к базе");
    Сообщить("       --db-pwd пароль пользователя");
    
    Сообщить("	--help");
    Сообщить("		Показ этого экрана");
    
КонецПроцедуры

Функция ЗапуститьПроцесс(Знач СтрокаВыполнения)
	Перем ПаузаОжиданияЧтенияБуфера;
	
	ПаузаОжиданияЧтенияБуфера = 10;
	
    Лог.Отладка(СтрокаВыполнения);
	Процесс = СоздатьПроцесс(СтрокаВыполнения,,Истина);
    Процесс.Запустить();
	
	ТекстБазовый = "";
	Счетчик = 0; МаксСчетчикЦикла = 100000;
	
	Пока Истина Цикл 
		Текст = Процесс.ПотокВывода.Прочитать();
		Лог.Отладка("Цикл ПотокаВывода "+Текст);
		Если Текст = Неопределено ИЛИ ПустаяСтрока(СокрЛП(Текст))  Тогда 
			Прервать;
		КонецЕсли;
		Счетчик = Счетчик + 1;
		Если Счетчик > МаксСчетчикЦикла Тогда 
			Прервать;
		КонецЕсли;
		ТекстБазовый = ТекстБазовый + Текст;
		
		sleep(ПаузаОжиданияЧтенияБуфера); //Подождем, надеюсь буфер не переполниться. 
		
	КонецЦикла;
	
	Процесс.ОжидатьЗавершения();
    
    Если Процесс.КодВозврата = 0 Тогда
        Текст = Процесс.ПотокВывода.Прочитать();
        ТекстБазовый = ТекстБазовый + Текст;
        Лог.Отладка(ТекстБазовый);
        Возврат ТекстБазовый;
    Иначе
        ВызватьИсключение "Сообщение от процесса 
        |" + Процесс.ПотокОшибок.Прочитать();
    КонецЕсли;	

КонецФункции //ЗапуститьПроцесс

Функция ПрочитатьФайлИнформации(Знач ПутьКФайлу)

	Текст = "";
	Файл = Новый Файл(ПутьКФайлу);
	Если Файл.Существует() Тогда
		Чтение = Новый ЧтениеТекста(Файл.ПолноеИмя);
		Текст = Чтение.Прочитать();
		Чтение.Закрыть();
	Иначе
		Текст = "Информации об ошибке нет";
	КонецЕсли;

	Лог.Отладка("файл информации:
	|"+Текст);
	Возврат Текст;

КонецФункции //ПрочитатьФайлИнформации


Процедура УбедитьсяЧтоФайлИлиКаталогСуществует(Знач Путь)

    Файл = Новый Файл(Путь);
    Если Не Файл.Существует() Тогда
        ВызватьИсключение СтроковыеФункции.ПодставитьПараметрыВСтроку("Файл <%1> должен существовать", Путь);
    КонецЕсли;

КонецПроцедуры

Функция ДобавитьПереименование(Знач Переименования, Знач Источник, Знач Приемник)

    СтрокаПереименования = Переименования.Добавить();
    СтрокаПереименования.Источник = Источник;
    СтрокаПереименования.Приемник = Приемник;

    Возврат СтрокаПереименования;

КонецФункции

// Выполняет перенос файлов из каталога плоской выгрузки в каталог с иерархической структурой метаданных.
//
Процедура РазложитьМодули1СПоПапкамСогласноИерархииМетаданных(Знач КаталогПлоскойВыгрузки, Знач КаталогИерархическойВыгрузки, Знач Формат) Экспорт

    Лог.Отладка("Раскладываем модули по папкам согласно иерархии метаданных");

    КэшПереименований = Новый Соответствие;

    УбедитьсяЧтоФайлИлиКаталогСуществует(КаталогПлоскойВыгрузки);

    Если ПустаяСтрока(КаталогИерархическойВыгрузки) Тогда
        ВызватьИсключение "Не задан каталог выгрузки модулей по иерархии";
    КонецЕсли;

    ФайлВыгрузкиКаталог = Новый Файл(КаталогИерархическойВыгрузки);
    Если Не ФайлВыгрузкиКаталог.Существует() Тогда
        СоздатьКаталог(КаталогИерархическойВыгрузки);
        //ЗарегистрироватьВременныйФайл(КаталогИерархическойСтруктурыМодулей); TODO выяснить почему временный?
    КонецЕсли;

    Переименования = Новый ТаблицаЗначений;
    Переименования.Колонки.Добавить("Источник");
    Переименования.Колонки.Добавить("Приемник");

    ИскатьВПодкаталогах = Истина;
    СписокФайлов = НайтиФайлы(КаталогПлоскойВыгрузки, ПолучитьМаскуВсеФайлы(), ИскатьВПодкаталогах);
    Лог.Отладка("Найдено файлов выгрузки: "+СписокФайлов.Количество()+" шт.");
    Для Каждого Файл Из СписокФайлов Цикл
        ИмяФайлаДляПереименования = Файл.Имя;

            ИмяНовогоФайла = СтрЗаменить(Файл.ПолноеИмя, КаталогПлоскойВыгрузки, "");
            ИмяНовогоФайла = ?(Лев(ИмяНовогоФайла, 1) ="/", Сред(ИмяНовогоФайла, 2), ИмяНовогоФайла);
            ИмяНовогоФайла = ?(Лев(ИмяНовогоФайла, 1) ="\", Сред(ИмяНовогоФайла, 2), ИмяНовогоФайла);
            Если Файл.ЭтоКаталог() Тогда
                ИмяКаталога = ОбъединитьПути(КаталогИерархическойВыгрузки, ИмяНовогоФайла);
                ФайлКаталога = Новый Файл(ИмяКаталога);
                Если ФайлКаталога.Существует() = Ложь Тогда
                    СоздатьКаталог(ИмяКаталога);
                КонецЕсли;
                Продолжить;
            КонецЕсли;
            ИмяФайлаДляПереименования = ИмяНовогоФайла;

        НовыйФайл = Новый Файл(ОбъединитьПути(КаталогИерархическойВыгрузки, ИмяНовогоФайла));
        НовыйКаталог = Новый Файл(НовыйФайл.Путь);
        Если НЕ НовыйКаталог.Существует() Тогда
            СоздатьКаталог(НовыйКаталог.ПолноеИмя);
        КонецЕсли;

        ДобавитьПереименование(Переименования,ИмяФайлаДляПереименования,ИмяНовогоФайла);

        КопироватьФайл(Файл.ПолноеИмя, НовыйФайл.ПолноеИмя);

        Если Нрег(Прав(Файл.ПолноеИмя, 5)) = ".form" Или Нрег(Файл.Имя) = "form.bin" Тогда
            КаталогФормы = ОбъединитьПути(НовыйКаталог.ПолноеИмя, НовыйФайл.ИмяБезРасширения);
            ФайлКаталога = Новый Файл(КаталогФормы);
            Если ФайлКаталога.Существует() Тогда 
                УдалитьФайлы(ФайлКаталога.Путь, ПолучитьМаскуВсеФайлы());
            КонецЕсли; 
            СоздатьКаталог(КаталогФормы);
            РаспаковатьКонтейнерМетаданных(НовыйФайл.ПолноеИмя, КаталогФормы);
            //УдалитьФайлы(НовыйФайл.ПолноеИмя);
        КонецЕсли;

    КонецЦикла;

    ТекстовыйДокумент = Новый ЗаписьТекста(ОбъединитьПути(КаталогИерархическойВыгрузки, "renames.txt"));
    Для Каждого ЭлементСтроки Из Переименования Цикл
        ТекстовыйДокумент.ЗаписатьСтроку(ЭлементСтроки.Источник+"-->"+СтрЗаменить(ЭлементСтроки.Приемник, "/", "\"));
    КонецЦикла;
    ТекстовыйДокумент.Закрыть();

КонецПроцедуры

Процедура РаспаковатьКонтейнерМетаданных(Знач ФайлРаспаковки, Знач КаталогРаспаковки)
    ФайлДляРаспаковки = Новый файл(ФайлРаспаковки);
    Если КаталогРаспаковки = "" тогда
        КаталогРаспаковки = ВременныеФайлы.СоздатьКаталог();
    КонецЕсли;
    ФайлПрограммыРаспаковки = "v8unpack";
    СтрокаЗапуска = """"+ФайлПрограммыРаспаковки+""" -parse """+ФайлДляРаспаковки.ПолноеИмя+""" """+КаталогРаспаковки+"""";
    Если НЕ ЭтоWindows Тогда 
        СтрокаЗапуска = "sh -c '"+СтрокаЗапуска+"'";
    КонецЕсли;
    Лог.Отладка(СтрокаЗапуска);

    ЗапуститьПриложение(СтрокаЗапуска,,Истина);
    ФайлМодуля = Новый Файл(ОбъединитьПути(КаталогРаспаковки, "module"));
    Если ФайлМодуля.Существует() Тогда 
        ПереместитьФайл(ФайлМодуля.ПолноеИмя, ОбъединитьПути(ФайлМодуля.Путь, "Module.bsl"));
    КонецЕсли; 

КонецПроцедуры

Процедура УпаковатьКонтейнерМетаданных(Знач КаталогРаспаковки, Знач ФайлРаспаковки)
    ФайлДляРаспаковки = Новый файл(ФайлРаспаковки);
    Если КаталогРаспаковки = "" тогда
        КаталогРаспаковки = ВременныеФайлы.СоздатьКаталог();
    КонецЕсли;
    ФайлПрограммыРаспаковки = "v8unpack";
    ФайлМодуля = Новый Файл(ОбъединитьПути(КаталогРаспаковки, "Module.bsl"));
    Если ФайлМодуля.Существует() Тогда 
        КопироватьФайл(ФайлМодуля.ПолноеИмя, ОбъединитьПути(ФайлМодуля.Путь, "module") );
    КонецЕсли;
    СтрокаЗапуска = """"+ФайлПрограммыРаспаковки+""" -build """+КаталогРаспаковки+""" """+ФайлДляРаспаковки.ПолноеИмя+"""";
    Если НЕ ЭтоWindows Тогда 
        СтрокаЗапуска = "sh -c '"+СтрокаЗапуска+"'";
    КонецЕсли;
    Лог.Отладка(СтрокаЗапуска);

    ЗапуститьПриложение(СтрокаЗапуска,,Истина);

КонецПроцедуры


Процедура РазобратьНаИсходникиТекущуюКонфигурацию(Каталог, Знач СтрокаПодключения="", Знач Пользователь="", Знач Пароль="", Знач ВерсияПлатформы="")

    Конфигуратор = Новый УправлениеКонфигуратором();
        
    КаталогВременнойИБ = ВременныеФайлы.СоздатьКаталог();
    Конфигуратор.КаталогСборки(КаталогВременнойИБ);
    
    КаталогРаспаковки = ВременныеФайлы.СоздатьКаталог();
    
    Если НЕ ПустаяСтрока(СтрокаПодключения) Тогда
        Конфигуратор.УстановитьКонтекст(СтрокаПодключения, Пользователь, Пароль);
    КонецЕсли;
    
    Если Не ПустаяСтрока(ВерсияПлатформы) Тогда 
        Конфигуратор.ИспользоватьВерсиюПлатформы(ВерсияПлатформы);
    КонецЕсли;
    
    //Синхронизатор = Новый СинхронизаторХранилища();
    
    ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();
    ПараметрыЗапуска.Добавить("/Visible");
    ПараметрыЗапуска.Добавить("/DumpConfigToFiles """ + КаталогРаспаковки + """");
    Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);
    
    РазложитьМодули1СПоПапкамСогласноИерархииМетаданных(КаталогРаспаковки, Каталог, ""); 
    
КонецПроцедуры

Процедура РазобратьФайлКонфигурации(Знач ФайлКонфигурации, Знач ВыходнойКаталог, Знач ВерсияПлатформы="")

    ОбъектФайл = Новый Файл(ФайлКонфигурации);
    Если ОбъектФайл.Существует() = Ложь Тогда
        ВызватьИсключение СтроковыеФункции.ПодставитьПараметрыВСтроку("Файл конфигурации %1 не найден", ФайлКонфигурации.ПолноеИмя);
    КонецЕсли;

    КаталогПлоскойВыгрузки = ВременныеФайлы.СоздатьКаталог();
    
    КаталогВыгрузки = Новый Файл(ВыходнойКаталог); 
    Если КаталогВыгрузки.Существует() = Ложь Тогда
        СоздатьКаталог(ВыходнойКаталог);
    КонецЕсли;
    
    Конфигуратор = Новый УправлениеКонфигуратором();
    КаталогВременнойИБ = ВременныеФайлы.СоздатьКаталог();
    Конфигуратор.КаталогСборки(КаталогВременнойИБ);
    
    Если Не ПустаяСтрока(ВерсияПлатформы) Тогда 
        Конфигуратор.ИспользоватьВерсиюПлатформы(ВерсияПлатформы);
    КонецЕсли;
    
    Конфигуратор.ЗагрузитьКонфигурациюИзФайла(ФайлКонфигурации, Ложь);
            
    РазобратьНаИсходникиТекущуюКонфигурацию(ВыходнойКаталог, Конфигуратор.ПолучитьПараметрыЗапуска().Получить(1));
    
    ВременныеФайлы.УдалитьФайл(КаталогПлоскойВыгрузки);
    ВременныеФайлы.УдалитьФайл(КаталогВременнойИБ);

КонецПроцедуры

Функция ПодготовитьКаталогЗагрузкиПоФайлуПереименований(ВходнойКаталог, ФайлПереименований)
    КаталогВременнойСтруктуры = ВременныеФайлы.СоздатьКаталог();
    Текст = Новый ЧтениеТекста(ФайлПереименований);
    Стр = Текст.ПрочитатьСтроку();
    Пока Стр <> Неопределено Цикл // строки читаются до символа перевода строки        
        Если ЭтоWindows = Ложь Тогда 
            Стр = СтрЗаменить(Стр, "\", "/");
        КонецЕсли;
        
        Индекс = Найти(Стр, "-->");
        Если Индекс > 0 Тогда
            ИмяНовогоФайла = ОбъединитьПути(КаталогВременнойСтруктуры, Лев(Стр, Индекс-1));
            ФайлНовый = Новый Файл(ИмяНовогоФайла); 
            КаталогНовый = Новый Файл(ФайлНовый.Путь);
            Если НЕ КаталогНовый.Существует() Тогда 
                СоздатьКаталог(ФайлНовый.Путь);
            КонецЕсли;
            ПутьФайлСтарый = ОбъединитьПути(ВходнойКаталог, Сред(Стр, Индекс+3));
            КопироватьФайл(ПутьФайлСтарый, ИмяНовогоФайла);
            Если Нрег(Прав(ФайлНовый.ПолноеИмя, 5)) = ".form" Или Нрег(ФайлНовый.Имя) = "form.bin" Тогда
                ФайлСтарый = Новый Файл(ПутьФайлСтарый);
                КаталогФормыСтарый = ОбъединитьПути(ФайлСтарый.Путь, ФайлНовый.ИмяБезРасширения);
                КаталогФормыНовый = ОбъединитьПути(ФайлНовый.Путь, ФайлНовый.ИмяБезРасширения);
                СоздатьКаталог(КаталогФормыНовый);
                МассивФайлов = НайтиФайлы(КаталогФормыСтарый, ПолучитьМаскуВсеФайлы());
                Для Каждого Элемент из МассивФайлов Цикл 
                    КопироватьФайл(Элемент.ПолноеИмя, ОбъединитьПути(КаталогФормыНовый, Элемент.ИмяБезРасширения));
                КонецЦикла;
                    
                УпаковатьКонтейнерМетаданных(КаталогФормыНовый, ФайлНовый.ПолноеИмя);
                //РаспаковатьКонтейнерМетаданных(НовыйФайл.ПолноеИмя, КаталогФормы)
            КонецЕсли;
        КонецЕсли;
        
        Стр = Текст.ПрочитатьСтроку();
    КонецЦикла;	
    
    Возврат КаталогВременнойСтруктуры
    
КонецФункции

Процедура СобратьИзИсходниковТекущуюКонфигурацию(Знач ВходнойКаталог,  Знач СтрокаПодключения="", Знач Пользователь="", Знач Пароль="", Знач ВерсияПлатформы="", Знач СписокФайловДляЗагрузки = "", Знач СниматьСПоддержки = Истина) Экспорт 
    Перем НеобходимоОбновлять, ИмяВременногФайла;
    НеобходимоОбновлять = Ложь;
    КаталогВыгрузки = Новый Файл(ВходнойКаталог); 
    Если КаталогВыгрузки.Существует() = Ложь Тогда
        ВызватьИсключение СтроковыеФункции.ПодставитьПараметрыВСтроку("Каталог исходников %1 не найден", КаталогВыгрузки.ПолноеИмя);
    КонецЕсли;
    
    ФайлПереименований = Новый Файл(ОбъединитьПути(ВходнойКаталог, "renames.txt"));
    Если ФайлПереименований.Существует() Тогда 
        //КаталогЗагрузки = 
        КаталогЗагрузки = ПодготовитьКаталогЗагрузкиПоФайлуПереименований(ВходнойКаталог, ФайлПереименований.ПолноеИмя);
    Иначе
        КаталогЗагрузки = ВходнойКаталог;
    КонецЕсли;
    
    Конфигуратор = Новый УправлениеКонфигуратором();
    
    КаталогВременнойИБ = ВременныеФайлы.СоздатьКаталог();
    Конфигуратор.КаталогСборки(КаталогВременнойИБ);
        
    Если НЕ ПустаяСтрока(СтрокаПодключения) Тогда
        Конфигуратор.УстановитьКонтекст(СтрокаПодключения, Пользователь, Пароль);
        Если Лев(СтрокаПодключения,2)="/F" Тогда
            ПутьКБазе = УбратьКавычкиВокругПути(Сред(СтрокаПодключения,3, СтрДлина(СтрокаПодключения)-2));
            ФайлБазы = Новый Файл(ПутьКБазе);
            Если НЕ ФайлБазы.Существует() Тогда
                Конфигуратор.СоздатьФайловуюБазу(ФайлБазы.ПолноеИмя);
                НеобходимоОбновлять = Истина;
            КонецЕсли;
        КонецЕсли;
    КонецЕсли;
    
    Если Не ПустаяСтрока(ВерсияПлатформы) Тогда 
        Конфигуратор.ИспользоватьВерсиюПлатформы(ВерсияПлатформы);
    КонецЕсли;
    
    //Синхронизатор = Новый СинхронизаторХранилища();
    Если СниматьСПоддержки = Истина Тогда
        ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();
        ПараметрыЗапуска.Добавить("/ConfigurationRepositoryUnbindCfg -force");
        Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);

        ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();
        ПараметрыЗапуска.Добавить("/ManageCfgSupport -disableSupport -force");
        Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);

    КонецЕсли;
    
    ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();
    //ПараметрыЗапуска.Добавить("/Visible");
    ПараметрыЗапуска.Добавить("/LoadConfigFromFiles """ + ВходнойКаталог + """");
    Если НЕ ПустаяСтрока(СписокФайловДляЗагрузки) Тогда
        ИмяВременногФайла = ПолучитьИмяВременногоФайла("txt");
        Запись = Новый ЗаписьТекста(ИмяВременногФайла);
        Запись.Записать(СписокФайловДляЗагрузки);
        Запись.Закрыть();
        ПараметрыЗапуска.Добавить("-listfile """ + ИмяВременногФайла + """");
        
        Если Лог.Уровень() <= УровниЛога.Отладка  Тогда
            Лог.Отладка("Загружаем по списку файлов:");
            Чтение = Новый ЧтениеТекста(ИмяВременногФайла);
            Стр = Чтение.ПрочитатьСтроку();
            Пока Стр <> Неопределено Цикл // строки читаются до символа перевода строки
                Лог.Отладка(Стр);
                Стр = Чтение.ПрочитатьСтроку();
            КонецЦикла;
            Чтение.Закрыть();
        КонецЕсли;
    КонецЕсли;
    Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);
        
    Если НеобходимоОбновлять Тогда
        Конфигуратор.ОбновитьКонфигурациюБазыДанных(Ложь, Истина);
    КонецЕсли;
    
    ВременныеФайлы.УдалитьФайл(КаталогВременнойИБ);
    
КонецПроцедуры

Процедура СобратьФайлКонфигурации(Знач ВходнойКаталог, Знач ФайлКонфигурации, Знач ВерсияПлатформы="") 
    
    Конфигуратор = Новый УправлениеКонфигуратором();
        
    КаталогВременнойИБ = ВременныеФайлы.СоздатьКаталог();
    Конфигуратор.КаталогСборки(КаталогВременнойИБ);
    
    Если Не ПустаяСтрока(ВерсияПлатформы) Тогда 
        Конфигуратор.ИспользоватьВерсиюПлатформы(ВерсияПлатформы);
    КонецЕсли;
    
       КаталогВременнойБазы = ВременныеФайлы.СоздатьКаталог();
    Конфигуратор.СоздатьФайловуюБазу(КаталогВременнойБазы);
    Конфигуратор.УстановитьКонтекст("/F""" + КаталогВременнойБазы + """", "", "");
    
    СобратьИзИсходниковТекущуюКонфигурацию(ВходнойКаталог, Конфигуратор.ПолучитьПараметрыЗапуска().Получить(1));
    ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();
    ПараметрыЗапуска.Добавить("/Visible");
    ПараметрыЗапуска.Добавить("/DumpCfg """ + ФайлКонфигурации + """");
    Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);
    
КонецПроцедуры

Процедура РазобратьНаИсходникиРасшрение(ИмяРасширения, Каталог, Знач СтрокаПодключения="", Знач Пользователь="", Знач Пароль="", Знач ВерсияПлатформы="")

    Конфигуратор = Новый УправлениеКонфигуратором();
        
    КаталогВременнойИБ = ВременныеФайлы.СоздатьКаталог();
    Конфигуратор.КаталогСборки(КаталогВременнойИБ);
    
    КаталогРаспаковки = ВременныеФайлы.СоздатьКаталог();
    
    Если НЕ ПустаяСтрока(СтрокаПодключения) Тогда
        Конфигуратор.УстановитьКонтекст(СтрокаПодключения, Пользователь, Пароль);
    КонецЕсли;
    
    Если Не ПустаяСтрока(ВерсияПлатформы) Тогда 
        Конфигуратор.ИспользоватьВерсиюПлатформы(ВерсияПлатформы);
    КонецЕсли;
    
    //Синхронизатор = Новый СинхронизаторХранилища();
    
    ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();
    ПараметрыЗапуска.Добавить("/Visible");
    ПараметрыЗапуска.Добавить("/DumpConfigToFiles """ + Каталог + """");
    ПараметрыЗапуска.Добавить("-Extension """ + ИмяРасширения + """");
    Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);
    
    //РазложитьМодули1СПоПапкамСогласноИерархииМетаданных(КаталогРаспаковки, Каталог, ""); 
    
КонецПроцедуры

Процедура СобратьИзИсходниковРасшрение(Каталог, ИмяРасширения, Знач СтрокаПодключения="", Знач Пользователь="", Знач Пароль="", Знач ВерсияПлатформы="")

    Конфигуратор = Новый УправлениеКонфигуратором();
        
    КаталогВременнойИБ = ВременныеФайлы.СоздатьКаталог();
    Конфигуратор.КаталогСборки(КаталогВременнойИБ);
    
    КаталогРаспаковки = ВременныеФайлы.СоздатьКаталог();
    
    Если НЕ ПустаяСтрока(СтрокаПодключения) Тогда
        Конфигуратор.УстановитьКонтекст(СтрокаПодключения, Пользователь, Пароль);
    КонецЕсли;
    
    Если Не ПустаяСтрока(ВерсияПлатформы) Тогда 
        Конфигуратор.ИспользоватьВерсиюПлатформы(ВерсияПлатформы);
    КонецЕсли;
    
    //Синхронизатор = Новый СинхронизаторХранилища();
    
    ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();
    ПараметрыЗапуска.Добавить("/Visible");
    ПараметрыЗапуска.Добавить("/LoadConfigFromFiles """ + Каталог + """");
    ПараметрыЗапуска.Добавить("-Extension """ + ИмяРасширения + """");
    Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);
    
    //РазложитьМодули1СПоПапкамСогласноИерархииМетаданных(КаталогРаспаковки, Каталог, ""); 
    
КонецПроцедуры

// Выполняем запуск тестов для vannessa 
//
// Параметры:
//	РабочийКаталогПроекта - <Строка> - Путь к каталогу с проектом, по умолчанию каталог ./build/out
//  СтрокаПодключения - <Строка> - Строка подключения к БД
//  Пользователь - <Строка> - Пользователь
//  Пароль - <Строка> - Пароль для пользователя
//  ПутьКНастройкам - <Строка> - Путь к файлу настроек запуска тестов
//  ПутьКИнструментам - <Строка> - путь к инструментам, по умолчанию ./vendor/vaness-behavior
//  ТолстыйКлиент - <Булево> - признак запуска толстого клиента
//  ДопПараметры - <Строка> - дополнительные параметры для передачи в параметры запуска 1с, например /DebugURLtcp://localhost
//  ВерсияПлатформы - <Строка> - Версия платформы
//
Процедура ЗапуститьТестироватьПоведение(Знач РабочийКаталогПроекта = "./build/out", 
                                        Знач СтрокаПодключения, Знач Пользователь="", Знач Пароль="", 
                                        Знач ПутьКНастройкам = "", Знач ПутьКИнструментам="", Знач ТолстыйКлиент = Ложь, Знач ДопПараметры="", Знач ВерсияПлатформы="") 
                                        
    Конфигуратор = Новый УправлениеКонфигуратором();

    Если РабочийКаталогПроекта = Неопределено Тогда 
        РабочийКаталогПроекта = "./build/out";
    КонецЕсли;
    
    КаталогВременнойИБ = ВременныеФайлы.СоздатьКаталог();
    Конфигуратор.КаталогСборки(КаталогВременнойИБ);
    
    Конфигуратор.УстановитьКонтекст(СтрокаПодключения, Пользователь, Пароль);
    Если НЕ ПустаяСтрока(ВерсияПлатформы) Тогда
        Конфигуратор.ИспользоватьВерсиюПлатформы(ВерсияПлатформы);
    КонецЕсли;
    //Конфигуратор.ПутьКПлатформе1С(Конфигуратор.ПутьКТонкомуКлиенту1С());
    Если ПустаяСтрока(ПутьКИнструментам) Тогда
        ПутьКИнструментам = "./vanessa-behavior/vanessa-behavior.epf";
    КонецЕсли;

    ПутьКИнструментам = ПолныйПуть(ПутьКИнструментам);
    
    Если НЕ ПустаяСтрока(ПутьКНастройкам) Тогда
        ПутьКНастройкам = ПолныйПуть(ПутьКНастройкам);
    КонецЕсли;

    КлючЗапуска = """StartFeaturePlayer;VBParams=" + ПутьКНастройкам +";workspaceRoot="+ПолныйПуть(РабочийКаталогПроекта) + """";
    Лог.Отладка(КлючЗапуска);
    ДополнительныеКлючи = " /Execute""" + ПутьКИнструментам + """ /TESTMANAGER ";
    
    Попытка
        ПараметрыСвязиСБазой = Конфигуратор.ПолучитьПараметрыЗапуска();
        ПараметрыСвязиСБазой[0] = "ENTERPRISE";
        ПараметрыСвязиСБазой.Удалить(2);
        ПараметрыСвязиСБазой.Добавить("/C"+КлючЗапуска);

        путьДамп = ПолучитьИмяВременногоФайла("txt");
        ПараметрыСвязиСБазой.Добавить("/DumpResult"""+путьДамп+"""");

        Если ДополнительныеКлючи <> Неопределено Тогда
            ПараметрыСвязиСБазой.Добавить(ДополнительныеКлючи);
        КонецЕсли;

        СтрокаЗапуска = ""; СтрокаДляЛога = "";
        Для Каждого Параметр Из ПараметрыСвязиСБазой Цикл
            СтрокаЗапуска = СтрокаЗапуска + " " + Параметр;
            Если Лев(Параметр,2) <> "/P" и Лев(Параметр,25) <> "/ConfigurationRepositoryP" Тогда
                СтрокаДляЛога = СтрокаДляЛога + " " + Параметр;
            КонецЕсли;
        КонецЦикла;
        СтрокаЗапуска = СтрокаЗапуска + ДопПараметры;

        Приложение = "";
        Приложение = Конфигуратор.ПутьКТонкомуКлиенту1С();
        Если ТолстыйКлиент = Истина ИЛИ СокрЛП(Строка(ТолстыйКлиент)) = "1" Тогда
            Приложение = Конфигуратор.ПутьКПлатформе1С();
        КонецЕсли;

        Если Найти(Приложение, " ") > 0 Тогда 
            Приложение = ОбернутьПутьВКавычки(Приложение);
        КонецЕсли;
        Приложение = Приложение + " "+СтрокаЗапуска;
        Попытка
            ЗапуститьПроцесс(Приложение);    
        Исключение
            Сообщить(ОписаниеОшибки());
        КонецПопытки;
        РезультатСообщение = ПрочитатьФайлИнформации(Конфигуратор.ФайлИнформации());
        Результат = ПрочитатьФайлИнформации(путьДамп);
        Если Результат <> "0" Тогда
            ВызватьИсключение "Результат работы не равен 0 "+ Результат + РезультатСообщение; 
        КонецЕсли;

    Исключение
        Лог.Ошибка(Конфигуратор.ВыводКоманды());
        Лог.Ошибка("Ошибка:"+ОписаниеОшибки());
        ВызватьИсключение "ЗапуститьТестироватьПоведение";
    КонецПопытки;


КонецПроцедуры // ЗапуститьТестироватьПоведение()

// Выполняем запуск тестов для xunit 
//
// Параметры:
//	ПутьВходящихДанных - <Строка> - Может принимать путь к каталогу, так и к файлу для тестирования
//	ВыходнойКаталогОтчета - <Строка> - Путь к каталогу с отчетом, по умолчанию пустой 
//  СтрокаПодключения - <Строка> - Строка подключения к БД
//  Пользователь - <Строка> - Пользователь
//  Пароль - <Строка> - Пароль для пользователя
//  ПутьКИнструментам - <Строка> - путь к инструментам, по умолчанию ./tools/xUnitFor1C/xddTestRunner.epf
//  ВерсияПлатформы - <Строка> - Версия платформы
//
Процедура ЗапуститьТестироватьЮнит(Знач ПутьВходящихДанных, Знач ВыходнойКаталогОтчета="", 
                                        Знач СтрокаПодключения, Знач Пользователь="", Знач Пароль="", 
                                        Знач ПутьКИнструментам="", Знач ТолстыйКлиент = Ложь, Знач ВерсияПлатформы="") 
                                        
    Конфигуратор = Новый УправлениеКонфигуратором();
        
    КаталогВременнойИБ = ВременныеФайлы.СоздатьКаталог();
    Конфигуратор.КаталогСборки(КаталогВременнойИБ);
    
    Конфигуратор.УстановитьКонтекст(СтрокаПодключения, Пользователь, Пароль);
    Если НЕ ПустаяСтрока(ВерсияПлатформы) Тогда
        Конфигуратор.ИспользоватьВерсиюПлатформы(ВерсияПлатформы);
    КонецЕсли;
    
    Если ПустаяСтрока(ПутьКИнструментам) Тогда
        ПутьКИнструментам = "./tools/xUnitFor1C/xddTestRunner.epf";
    КонецЕсли;
    
    КлючЗапуска = """xddRun ЗагрузчикКаталога "+ПутьВходящихДанных+";";
    
    Если Не ПустаяСтрока(ВыходнойКаталогОтчета) Тогда 
        КлючЗапуска = КлючЗапуска + "xddReport ГенераторОтчетаJUnitXML "+ВыходнойКаталогОтчета+";xddShutdown;";
    КонецЕсли;
    КлючЗапуска = КлючЗапуска + """";
    Лог.Отладка(КлючЗапуска);
    
    ДополнительныеКлючи = " /Execute""" + ПутьКИнструментам + """ /TESTMANAGER ";
    Попытка
        Конфигуратор.ЗапуститьВРежимеПредприятия(КлючЗапуска, Истина, ДополнительныеКлючи);
        Текст = Конфигуратор.ВыводКоманды();
        Если Не ПустаяСтрока(Текст) Тогда
            Лог.Информация(Текст);
        КонецЕсли;
        //ВременныеФайлы.УдалитьФайлы(	);
    Исключение
        Лог.Ошибка(Конфигуратор.ВыводКоманды());
		Лог.Ошибка(ОписаниеОшибки());
        ВызватьИсключение "ЗапуститьТестироватьЮнит";
    КонецПопытки;
        
КонецПроцедуры // ЗапуститьТестироватьЮнит()

Процедура ЗапуститьВРежимеПредприятия(Знач СтрокаПодключения, Знач Пользователь="", Знач Пароль="",
                                        Знач КлючРазрешенияЗапуска = "", Знач ПараметрЗапуска="", Знач ОбработкаДляЗапуска="", Знач ВерсияПлатформы="", Знач ДополнительныеКлючиЗапуска = "") 
                                        
                    
    ТекущаяПроцедура = "ЗапуститьВРежимеПредприятия";
                    
    Ожидаем.Что(СтрокаПодключения, ТекущаяПроцедура+" не заданая строка подключения").Заполнено();	
    
    Конфигуратор = Новый УправлениеКонфигуратором();
        
    КаталогВременнойИБ = ВременныеФайлы.СоздатьКаталог();
    Конфигуратор.КаталогСборки(КаталогВременнойИБ);
    
    Конфигуратор.УстановитьКонтекст(СтрокаПодключения, Пользователь, Пароль);
    Если НЕ ПустаяСтрока(ВерсияПлатформы) Тогда
        Конфигуратор.ИспользоватьВерсиюПлатформы(ВерсияПлатформы);
    КонецЕсли;
    
    Если Не ПустаяСтрока(КлючРазрешенияЗапуска) Тогда
        Конфигуратор.УстановитьКлючРазрешенияЗапуска(КлючРазрешенияЗапуска);
    КонецЕсли;	
    
    ДополнительныеКлючи = ДополнительныеКлючиЗапуска;
    Если Не ПустаяСтрока(ОбработкаДляЗапуска) Тогда
        ДополнительныеКлючи = ДополнительныеКлючи + "/Execute"+ОбернутьПутьВКавычки(ОбработкаДляЗапуска);
    КонецЕсли;
    
    Лог.Отладка("ДополнительныеКлючи:"+ДополнительныеКлючи);
    Лог.Отладка("ПараметрЗапуска:"+ПараметрЗапуска);
    
    Попытка
        Конфигуратор.ЗапуститьВРежимеПредприятия(ПараметрЗапуска, Истина, ДополнительныеКлючи);
        Текст = Конфигуратор.ВыводКоманды();
        Если Не ПустаяСтрока(Текст) Тогда
            Лог.Информация(Текст);
        КонецЕсли;

    Исключение
        Лог.Ошибка(Конфигуратор.ВыводКоманды());
        ВызватьИсключение ТекущаяПроцедура;
    КонецПопытки;

КонецПроцедуры

Процедура ЗапуститьОбновлениеКонфигурации(Знач СтрокаПодключения, Знач Пользователь="", Знач Пароль="",
                                        Знач КлючРазрешенияЗапуска = "", Знач ВерсияПлатформы="", Знач ДополнительныеКлючиЗапуска = "") Экспорт
                                        
                    
    ТекущаяПроцедура = "ЗапуститьОбновлениеКонфигурации";
                    
    Ожидаем.Что(СтрокаПодключения, ТекущаяПроцедура+" не заданая строка подключения").Заполнено();	
    
    Конфигуратор = Новый УправлениеКонфигуратором();
    КаталогВременнойИБ = ВременныеФайлы.СоздатьКаталог();
    Конфигуратор.КаталогСборки(КаталогВременнойИБ);
        
    Конфигуратор.УстановитьКонтекст(СтрокаПодключения, Пользователь, Пароль);
    Если НЕ ПустаяСтрока(ВерсияПлатформы) Тогда
        Конфигуратор.ИспользоватьВерсиюПлатформы(ВерсияПлатформы);
    КонецЕсли;
    
    Если Не ПустаяСтрока(КлючРазрешенияЗапуска) Тогда
        Конфигуратор.УстановитьКлючРазрешенияЗапуска(КлючРазрешенияЗапуска);
    КонецЕсли;	
    
    Лог.Информация("Запускаю обновление конфигурации БД");
    Попытка
        Конфигуратор.ОбновитьКонфигурациюБазыДанных(Ложь);
        Текст = Конфигуратор.ВыводКоманды();
        Если Не ПустаяСтрока(Текст) Тогда
            Лог.Информация(Текст);
        КонецЕсли;
    Исключение
        Лог.Ошибка(Конфигуратор.ВыводКоманды());
        ВызватьИсключение ТекущаяПроцедура;
    КонецПопытки;

    Попытка
        Если КаталогВременнойИБ <> Неопределено Тогда
            ВременныеФайлы.УдалитьФайл(КаталогВременнойИБ);
        КонецЕсли;
    Исключение
    КонецПопытки;

КонецПроцедуры //ЗапуститьОбновлениеКонфигурации

Процедура ЗапуститьОбновлениеИзХранилища(Знач СтрокаПодключения, Знач Пользователь="", Знач Пароль="",
                                        Знач СтрокаПодключенияХранилище = "", Знач ПользовательХранилища="", Знач ПарольХранилища="",
                                        Знач ВерсияХранилища="", Знач ВерсияПлатформы="", Знач ДополнительныеКлючиЗапуска = "") Экспорт
                                        
                    
    ТекущаяПроцедура = "ЗапуститьОбновлениеИзХранилища";
                    
    Ожидаем.Что(СтрокаПодключения, ТекущаяПроцедура+" не заданая строка подключения").Заполнено();
    Ожидаем.Что(СтрокаПодключенияХранилище, ТекущаяПроцедура+" не заданая строка подключения к хранилищу").Заполнено();
    Ожидаем.Что(ПользовательХранилища, ТекущаяПроцедура+" не задан пользователь хранилища").Заполнено();
    
    Конфигуратор = Новый УправлениеКонфигуратором();
        
    Конфигуратор.УстановитьКонтекст(СтрокаПодключения, Пользователь, Пароль);
    Если НЕ ПустаяСтрока(ВерсияПлатформы) Тогда
        Конфигуратор.ИспользоватьВерсиюПлатформы(ВерсияПлатформы);
    КонецЕсли;
    
    Параметры = Конфигуратор.ПолучитьПараметрыЗапуска();

    Параметры.Добавить("/ConfigurationRepositoryF """+СтрокаПодключенияХранилище+"""");
    Параметры.Добавить("/ConfigurationRepositoryN """+ПользовательХранилища+"""");

    Если Не ПустаяСтрока(ПарольХранилища) Тогда
        Параметры.Добавить("/ConfigurationRepositoryP """+ПарольХранилища+"""");
    КонецЕсли;

    Параметры.Добавить("/ConfigurationRepositoryUpdateCfg"); 
    Параметры.Добавить("-force");
    Если Не ПустаяСтрока(ВерсияХранилища) Тогда
        Параметры.Добавить("-v" + ВерсияХранилища);
    КонецЕсли;
    
    Если Не ПустаяСтрока(ДополнительныеКлючиЗапуска) Тогда
        Параметры.Добавить(ДополнительныеКлючиЗапуска);
    КонецЕсли;

    Попытка
        Конфигуратор.ВыполнитьКоманду(Параметры);
        Текст = Конфигуратор.ВыводКоманды();
        Если Не ПустаяСтрока(Текст) Тогда
            Лог.Информация(Текст);
        КонецЕсли;

        Возврат;
    Исключение
        Лог.Ошибка(Конфигуратор.ВыводКоманды());
        ВызватьИсключение ТекущаяПроцедура;
    КонецПопытки;

КонецПроцедуры //ЗапуститьОбновлениеИзХранилища

Процедура Декомпилировать(Знач Путь, Знач КаталогВыгрузки, Знач КорневойПутьВыходной = "", Знач КорневойПутьВходной = "", Знач СтрокаПодключения = "", Знач Пользователь = "", Знач Пароль = "", Знач ВерсияПлатформы = "") Экспорт
    Перем КаталогВременнойИБ;

    Файл = Новый Файл(Путь);
    КорневойПутьВыходной = ?(Файл.ЭтоКаталог(), Файл.ПолноеИмя, Файл.Путь);
    РезультатыОбработкиВнешнихОбработок = Новый Соответствие;

    Если ПустаяСтрока(СтрокаПодключения) Тогда 
        Конфигуратор = Новый УправлениеКонфигуратором();
        КаталогВременнойИБ = ПолучитьИмяВременногоФайла("tmp");
        СоздатьКаталог(КаталогВременнойИБ);
    
        Конфигуратор.СоздатьФайловуюБазу(КаталогВременнойИБ);
        СтрокаПодключения = "/F""" + КаталогВременнойИБ + """";
    КонецЕсли;
    Если Файл.ЭтоКаталог() Тогда
        РазобратьКаталог(Файл, КаталогВыгрузки, КорневойПутьВыходной, СтрокаПодключения, Пользователь, Пароль, ВерсияПлатформы);
    Иначе
        РазобратьФайлВнешняяОбработка(Файл, КаталогВыгрузки, КорневойПутьВыходной, СтрокаПодключения, Пользователь, Пароль, ВерсияПлатформы);
    КонецЕсли;

    Если КаталогВременнойИБ <> Неопределено Тогда
        ВременныеФайлы.УдалитьФайл(КаталогВременнойИБ);
    КонецЕсли;

    Если РезультатыОбработкиВнешнихОбработок.Количество() > 0 Тогда 
        Для каждого КлючЗначение из РезультатыОбработкиВнешнихОбработок Цикл 
            Лог.Ошибка(КлючЗначение.Значение + " "+ КлючЗначение.Ключ);
        КонецЦикла;
        ВызватьИсключение "Не удалось разобрать "+Путь;
    КонецЕсли;

КонецПроцедуры //Декомпилировать

Процедура РазобратьКаталог(Знач ОбъектКаталога, Знач КаталогВыгрузки, Знач КаталогКорень, Знач СтрокаПодключения = "", Знач Пользователь = "", Знач Пароль = "", Знач ВерсияПлатформы="") Экспорт
    ПутьКаталога = ОбъектКаталога.ПолноеИмя;

    ОтносительныйПутьКаталога = ПолучитьОтносительныйПутьФайла(КаталогКорень, ПутьКаталога);
    ОтносительныйПутьКаталога = ?(ПустаяСтрока(ОтносительныйПутьКаталога), ПутьКаталога, ОтносительныйПутьКаталога);
    Лог.Отладка(СтрШаблон("Подготовка выгрузки каталога %1 в каталог %2, корень %3", ОтносительныйПутьКаталога, КаталогВыгрузки, КаталогКорень));
    
    ИмяКаталогаВыгрузки = Новый Файл(КаталогВыгрузки).Имя;
    
    Файлы = НайтиФайлы(ПутьКаталога, ПолучитьМаскуВсеФайлы());
    Для Каждого Файл из Файлы Цикл
        Если Лев(Файл.Имя,4) = ".git" Или Врег(Файл.Имя) = Врег("build") Или Врег(Файл.Имя) = Врег("cache.txt") Тогда
            Продолжить;
        КонецЕсли;
            
        Если Файл.ЭтоКаталог() Тогда
            Если Лев(Файл.Имя,4) = ".git" Тогда
                Продолжить;
            КонецЕсли;
            
            Если Файл.ЭтоКаталог() И ОбъединитьПути(Новый Файл(Файл.ПолноеИмя).ПолноеИмя, "./") = ОбъединитьПути(Новый Файл(КаталогВыгрузки).ПолноеИмя, "./") Тогда
                Продолжить;
            КонецЕсли;

            ФайлНовый = Новый Файл(Файл.ПолноеИмя);
            ФайлКаталогВВыгрузке = Новый Файл(ОбъединитьПути(КаталогВыгрузки, ОтносительныйПутьКаталога));
            Если НЕ ФайлКаталогВВыгрузке.Существует() Тогда 
                Лог.Отладка(СтрШаблон("Создаем новый каталог %1", ФайлКаталогВВыгрузке.ПолноеИмя));
                СоздатьКаталог(ФайлКаталогВВыгрузке.ПолноеИмя);
            КонецЕсли; 
            
            РазобратьКаталог(ФайлНовый, КаталогВыгрузки, КаталогКорень, СтрокаПодключения, Пользователь, Пароль, ВерсияПлатформы);

        ИначеЕсли ТипФайлаПоддерживается(Файл) Тогда
            Лог.Отладка(СтрШаблон("Подготовка выгрузки файла %1 в каталог %2", Файл.Имя, ИмяКаталогаВыгрузки));
            РазобратьФайлВнешняяОбработка(Файл, КаталогВыгрузки, КаталогКорень, СтрокаПодключения, Пользователь, Пароль, ВерсияПлатформы);
            Лог.Отладка(СтрШаблон("Завершена выгрузка файла %1 в каталог %2", Файл.Имя, ИмяКаталогаВыгрузки));
        Иначе
            
            ОтносительныйПутьКаталогаФайла = ПолучитьОтносительныйПутьФайла(КаталогКорень, Файл.ПолноеИмя);
            Лог.Отладка("ОтносительныйПутьКаталогаФайла <"+ОтносительныйПутьКаталогаФайла+">");
            ПутьФайлаИсходников = ОбъединитьПути(КаталогВыгрузки, ОтносительныйПутьКаталогаФайла);
            Лог.Отладка("ПутьФайлаИсходников <"+ПутьФайлаИсходников+">");
            
            ФайлНовый = Новый Файл(ПутьФайлаИсходников);
            КаталогНовый = Новый Файл(ФайлНовый.Путь);
            Если НЕ КаталогНовый.Существует() Тогда 
                СоздатьКаталог(КаталогНовый.ПолноеИмя);
            КонецЕсли;
       
            Если ФайлНовый.Существует() = Истина Тогда
                
                Лог.Отладка(СтрШаблон("Удаляем файл %1", ПутьФайлаИсходников));
                Попытка
                    УдалитьФайлы(ФайлНовый.Путь, ФайлНовый.Имя);    
                Исключение
                    Лог.Ошибка("Ошибка удаления файла "+ ПутьФайлаИсходников + ":"+ОписаниеОшибки());
                КонецПопытки;
                
            КонецЕсли;
            
            КопироватьФайл(Файл.ПолноеИмя, ФайлНовый.ПолноеИмя);
            
            Лог.Отладка(СтрШаблон("Завершенно копирование файла %1 в каталог %2", Файл.Имя, ФайлНовый.ПолноеИмя));
        КонецЕсли;
    КонецЦикла;
    
    Лог.Отладка(СтрШаблон("Завершена выгрузка каталога %1 в каталог %2, корень %3", ОтносительныйПутьКаталога, КаталогВыгрузки, КаталогКорень));
КонецПроцедуры

Функция РазобратьФайлВнешняяОбработка(Знач Файл, Знач КаталогВыгрузки, Знач КаталогКорень = "", Знач СтрокаПодключения = "", Знач Пользователь = "", Знач Пароль = "", Знач ВерсияПлатформы="") Экспорт
    ПутьФайла = Файл.ПолноеИмя;
    Лог.Отладка(СтрШаблон("Проверка необходимости выгрузки файла %1 в каталог %2, корень %3", ПутьФайла, КаталогВыгрузки, КаталогКорень));

    Попытка 
        КаталогИсходников = РазобратьФайлВнутрВнешняяОбработка(Файл, КаталогВыгрузки, КаталогКорень, СтрокаПодключения, Пользователь, Пароль, ВерсияПлатформы);
    Исключение
        РезультатыОбработкиВнешнихОбработок.Вставить(ПутьФайла, ОписаниеОшибки());
    КонецПопытки;
    
    Лог.Отладка(СтрШаблон("Завершена проверка необходимости выгрузки файла %1 в каталог %2, корень %3", ПутьФайла, КаталогВыгрузки, КаталогКорень));
    
    Возврат КаталогИсходников;
    
КонецФункции

Функция ТипФайлаПоддерживается(Файл)
    Если ПустаяСтрока(Файл.Расширение) Тогда
        Возврат Ложь;
    КонецЕсли;
    
    Поз = Найти(".epf,.erf,", Файл.Расширение+",");
    Возврат Поз > 0;
    
КонецФункции

Функция РазобратьФайлВнутрВнешняяОбработка(Знач Файл, Знач КаталогВыгрузки, Знач КаталогКорень, Знач СтрокаПодключения = "", Знач Пользователь = "", Знач Пароль = "", Знач ВерсияПлатформы="")
    
    ПутьФайла = Файл.ПолноеИмя;
    Если Не ТипФайлаПоддерживается(Файл) Тогда
        ВызватьИсключение "Тип файла """+Файл.Расширение+""" не поддерживается";
    КонецЕсли;
    
    Ожидаем.Что(Файл.Существует(), "Файл " + ПутьФайла + " должен существовать").ЭтоИстина();
    
    ОтносительныйПутьКаталогаФайла = ПолучитьОтносительныйПутьФайла(КаталогКорень, ОбъединитьПути(Файл.Путь, Файл.ИмяБезРасширения));
    Лог.Отладка("ОтносительныйПутьКаталогаФайла <"+ОтносительныйПутьКаталогаФайла+">");
    
    ПутьКаталогаИсходников = ОбъединитьПути(КаталогВыгрузки, ОтносительныйПутьКаталогаФайла);
    Лог.Отладка("ПутьКаталогаИсходников <"+ПутьКаталогаИсходников+">");
    ПапкаИсходников = Новый Файл(ПутьКаталогаИсходников);

    ОбеспечитьПустойКаталог(ПапкаИсходников);
    ЗапуститьРаспаковкуВнешнихОбработок(Файл, ПапкаИсходников, СтрокаПодключения, Пользователь, Пароль, ВерсияПлатформы);
    
    Возврат ПапкаИсходников.ПолноеИмя;
    
КонецФункции

Функция ПолучитьОтносительныйПутьФайла(КаталогКорень, ВнутреннийКаталог)
    Если ПустаяСтрока(КаталогКорень) Тогда	
        Возврат "";
    КонецЕсли;
    
    ФайлКорень = Новый Файл(КаталогКорень);
    ФайлВнутреннийКаталог = Новый Файл(ВнутреннийКаталог);
    Рез = СтрЗаменить(ФайлВнутреннийКаталог.ПолноеИмя, ФайлКорень.ПолноеИмя, "");
    Если Найти("\/", Лев(Рез, 1)) > 0 Тогда
        Рез = Сред(Рез, 2);
    КонецЕсли;
    Если Найти("\/", Прав(Рез, 1)) > 0 Тогда
        Рез = Лев(Рез, СтрДлина(Рез)-1);
    КонецЕсли;

    Возврат Рез;
КонецФункции

Процедура ЗапуститьРаспаковкуВнешнихОбработок(Знач Файл, Знач ПапкаИсходников, СтрокаПодключения, Пользователь, Пароль, ВерсияПлатформы)
    
    Лог.Отладка("Запускаем распаковку файла");
    
    Конфигуратор = Новый УправлениеКонфигуратором();
    КаталогВременнойИБ = ВременныеФайлы.СоздатьКаталог();
    Конфигуратор.КаталогСборки(КаталогВременнойИБ);
    
    Если НЕ ПустаяСтрока(СтрокаПодключения) Тогда
        Конфигуратор.УстановитьКонтекст(СтрокаПодключения, Пользователь, Пароль);
    КонецЕсли;
    
    Если НЕ ПустаяСтрока(ВерсияПлатформы) Тогда
        Лог.Отладка(ВерсияПлатформы);
        Конфигуратор.ИспользоватьВерсиюПлатформы(ВерсияПлатформы);
    КонецЕсли;
    
    ЛогКонфигуратора = Логирование.ПолучитьЛог("oscript.lib.v8runner");
    ЛогКонфигуратора.УстановитьУровень(Лог.Уровень());
    
    Параметры = Конфигуратор.ПолучитьПараметрыЗапуска();

    Параметры.Добавить("/DumpExternalDataProcessorOrReportToFiles");
    Параметры.Добавить(ОбернутьПутьВКавычки(ПапкаИсходников.ПолноеИмя)); 
    Параметры.Добавить(ОбернутьПутьВКавычки(Файл.ПолноеИмя));
    
    Конфигуратор.ВыполнитьКоманду(Параметры);
    Лог.Отладка("Вывод 1С:Предприятия - " + Конфигуратор.ВыводКоманды());
    Лог.Отладка("Очищаем каталог временной ИБ");
    ИскатьВПодкаталогах = Истина;
    СписокФайлов = НайтиФайлы(ПапкаИсходников.ПолноеИмя, "*.bin", ИскатьВПодкаталогах);
    Лог.Отладка("Найдено файлов выгрузки: "+СписокФайлов.Количество()+" шт.");
    Для Каждого Файл Из СписокФайлов Цикл
        Если Нрег(Прав(Файл.ПолноеИмя, 5)) = ".form" Или Нрег(Файл.Имя) = "form.bin" Тогда
            КаталогФормы = ОбъединитьПути(Файл.Путь, Файл.ИмяБезРасширения);
            ОбеспечитьПустойКаталог(Новый Файл(КаталогФормы));
            РаспаковатьКонтейнерМетаданных(Файл.ПолноеИмя, КаталогФормы);
        КонецЕсли;

    КонецЦикла;
    
КонецПроцедуры

Процедура ОбеспечитьПустойКаталог(Знач ФайлОбъектКаталога)
    
    Если Не ФайлОбъектКаталога.Существует() Тогда
        Лог.Отладка("Создаем новый каталог " + ФайлОбъектКаталога.ПолноеИмя);
        СоздатьКаталог(ФайлОбъектКаталога.ПолноеИмя);
    ИначеЕсли ФайлОбъектКаталога.ЭтоКаталог() Тогда
        Лог.Отладка("Очищаем каталог " + ФайлОбъектКаталога.ПолноеИмя);
        УдалитьФайлы(ФайлОбъектКаталога.ПолноеИмя, ПолучитьМаскуВсеФайлы());
    Иначе
        ВызватьИсключение "Путь " + ФайлОбъектКаталога.ПолноеИмя + " не является каталогом. Выгрузка невозможна";
    КонецЕсли;
    
КонецПроцедуры


Функция Компилировать(Знач Путь, Знач КаталогВыгрузки, Знач СтрокаПодключения = "", Знач Пользователь = "", Знач Пароль = "", Знач ВерсияПлатформы = "") Экспорт
    Перем КаталогВременнойИБ;
    
    Рекурсивно = Истина;
    ПутьКИсходникам = ОбъединитьПути(ТекущийКаталог(), Путь);
 
    ПапкаИсходников = Новый Файл(ПутьКИсходникам);
    
    Если ПустаяСтрока(СтрокаПодключения) Тогда 
        Конфигуратор = Новый УправлениеКонфигуратором();
        КаталогВременнойИБ = ПолучитьИмяВременногоФайла("tmp");
        СоздатьКаталог(КаталогВременнойИБ);
    
        Конфигуратор.СоздатьФайловуюБазу(КаталогВременнойИБ);
        СтрокаПодключения = "/F""" + КаталогВременнойИБ + """";
    КонецЕсли;

    Ожидаем.Что(ПапкаИсходников.Существует(), "Папка " + ПутьКИсходникам + " должна существовать").ЭтоИстина();
    Если ПапкаИсходников.ЭтоКаталог() = Ложь Тогда
        ПутьКИсходникам = Новый Файл(ПапкаИсходников.ПолноеИмя).ПолноеИмя;
        //Нам передали путь к измененому файлу, необходимо определить корневую папку. 
        Для Счетчик = 0 По 5 Цикл
            ПутьКИсходникам = Новый Файл(ПутьКИсходникам).Путь;
            Лог.Отладка(ПутьКИсходникам);
            Если ЭтоПутьКИсходнымКодамОбработок(ПутьКИсходникам) Тогда
                ПапкаИсходников = Новый Файл(ПутьКИсходникам);
                Рекурсивно = Ложь;
                Прервать;
            КонецЕсли;
            ПутьКИсходникам = Новый Файл(ПутьКИсходникам).Путь;
        КонецЦикла;
        Ожидаем.Что(Рекурсивно, "Корневой файл обработки должен существовать " + ПутьКИсходникам).ЭтоЛожь();
    КонецЕсли;
    
    Ожидаем.Что(ПапкаИсходников.ЭтоКаталог(), "Путь " + ПутьКИсходникам + "должен быть каталогом").ЭтоИстина();
    
    КорневойПутьВходной = ?(ПапкаИсходников.ЭтоКаталог(), ПапкаИсходников.ПолноеИмя, ПапкаИсходников.Путь);
    
    Если Рекурсивно Тогда
        СобратьКаталог(ПутьКИсходникам, КаталогВыгрузки, КорневойПутьВходной, СтрокаПодключения, Пользователь, Пароль, ВерсияПлатформы);
    Иначе
        СобратьФайлВнешнейОбработки(ПутьКИсходникам, КаталогВыгрузки, СтрокаПодключения, Пользователь, Пароль, ВерсияПлатформы);
    КонецЕсли;

    Если КаталогВременнойИБ <> Неопределено Тогда
        ВременныеФайлы.УдалитьФайл(КаталогВременнойИБ);
    КонецЕсли;

КонецФункции

Процедура СобратьКаталог(Знач ПутьКИсходникам, КаталогВыгрузки, Знач КаталогКорень, Знач СтрокаПодключения, Знач Пользователь, Знач Пароль, Знач ВерсияПлатформы)

    Файл = Новый Файл(ПутьКИсходникам);
    Если Файл.ЭтоКаталог() И ЭтоПутьКИсходнымКодамОбработок(Файл.ПолноеИмя) Тогда
        Если НЕ Новый Файл(КаталогВыгрузки).Существует() Тогда
            СоздатьКаталог(КаталогВыгрузки);
        КонецЕсли;
        СобратьФайлВнешнейОбработки(Файл.ПолноеИмя, КаталогВыгрузки, СтрокаПодключения, Пользователь, Пароль, ВерсияПлатформы);
        Возврат;
    КонецЕсли;
    
    СписокФайловВКаталоге = НайтиФайлы(ПутьКИсходникам, ПолучитьМаскуВсеФайлы());
    ПутиКИсходникам = Новый Соответствие;
    ФайлКаталогКорень = Новый Файл(КаталогКорень);
   
    Для Каждого Файл Из СписокФайловВКаталоге Цикл
        
        Если Лев(Файл.Имя,4) = ".git" Или Врег(Файл.Имя) = Врег("build") Тогда
            Продолжить;
        КонецЕсли;
        
        
        Если Файл.ЭтоКаталог() И ОбъединитьПути(Новый Файл(Файл.ПолноеИмя).ПолноеИмя, "./") = ОбъединитьПути(Новый Файл(КаталогВыгрузки).ПолноеИмя, "./") Тогда
            Продолжить;
        КонецЕсли;
        
        Если Файл.ЭтоКаталог() И ЭтоПутьКИсходнымКодамОбработок(Файл.ПолноеИмя) Тогда
            Если НЕ Новый Файл(КаталогВыгрузки).Существует() Тогда
                СоздатьКаталог(КаталогВыгрузки);
            КонецЕсли;
            
            СобратьФайлВнешнейОбработки(Файл.ПолноеИмя, КаталогВыгрузки, СтрокаПодключения, Пользователь, Пароль, ВерсияПлатформы);
        ИначеЕсли Файл.ЭтоКаталог() Тогда
            
            НовыйПутьВыгрузки = ОбъединитьПути(КаталогВыгрузки, Файл.Имя);
            Если НЕ Новый Файл(НовыйПутьВыгрузки).Существует() Тогда
                СоздатьКаталог(НовыйПутьВыгрузки);
            Иначе
                ОбеспечитьПустойКаталог(Новый Файл(НовыйПутьВыгрузки));
            КонецЕсли;
        
            СобратьКаталог(Файл.ПолноеИмя, НовыйПутьВыгрузки, КаталогКорень, СтрокаПодключения, Пользователь, Пароль, ВерсияПлатформы);
        Иначе
            
            НовыйПутьВыгрузки = ОбъединитьПути(КаталогВыгрузки, Файл.Имя);
            КопироватьФайл(Файл.ПолноеИмя, НовыйПутьВыгрузки);
        КонецЕсли;

    КонецЦикла;

КонецПроцедуры

Функция СобратьФайлВнешнейОбработки(Знач ПутьКИсходникам, Знач КаталогВыгрузки, Знач СтрокаПодключения, Знач Пользователь, Знач Пароль, Знач ВерсияПлатформы)
    
    Лог.Отладка("Собираю исходники <"+ПутьКИсходникам+">");

    ПапкаИсходников = Новый Файл(ПутьКИсходникам);
    ИмяПапки = ПапкаИсходников.Имя;
    ИмяФайлаОбъекта = ОбъединитьПути(ТекущийКаталог(), КаталогВыгрузки, ИмяПапки);
    НайденныйФайл = НайтиФайлы(ПутьКИсходникам, "*.xml");
    Ожидаем.Что(НайденныйФайл.Количество(), "Базовый файл xml <" + ПутьКИсходникам +  ">*.xml должен существовать").Больше(0);
        
    СобратьФайлВнешнейОбработкиИзИсходников(НайденныйФайл[0], ИмяФайлаОбъекта, СтрокаПодключения, Пользователь, Пароль, ВерсияПлатформы);
    Лог.Отладка("Успешно собран файл "+ИмяФайлаОбъекта);
    
    Возврат ИмяФайлаОбъекта;

КонецФункции

Процедура СобратьФайлВнешнейОбработкиИзИсходников(ПапкаИсходников, ИмяФайлаОбъекта, Знач СтрокаПодключения, Пользователь, Пароль, ВерсияПлатформы)
    Лог.Отладка("Собираю файл из исходников <"+ПапкаИсходников+"> в файл "+ИмяФайлаОбъекта);

    Конфигуратор = Новый УправлениеКонфигуратором();
    КаталогВременнойИБ = ВременныеФайлы.СоздатьКаталог();
    Конфигуратор.КаталогСборки(КаталогВременнойИБ);
    
    Если НЕ ПустаяСтрока(СтрокаПодключения) Тогда
        Конфигуратор.УстановитьКонтекст(СтрокаПодключения, Пользователь, Пароль);
    КонецЕсли;
    
    Если НЕ ПустаяСтрока(ВерсияПлатформы) Тогда
        Лог.Отладка(ВерсияПлатформы);
        Конфигуратор.ИспользоватьВерсиюПлатформы(ВерсияПлатформы);
    КонецЕсли;
    
    ЛогКонфигуратора = Логирование.ПолучитьЛог("oscript.lib.v8runner");
    ЛогКонфигуратора.УстановитьУровень(Лог.Уровень());
    
    Параметры = Конфигуратор.ПолучитьПараметрыЗапуска();

    Параметры.Добавить("/LoadExternalDataProcessorOrReportFromFiles");
    Параметры.Добавить(ПапкаИсходников.ПолноеИмя);
    Параметры.Добавить(ИмяФайлаОбъекта);
    
    Конфигуратор.ВыполнитьКоманду(Параметры);
    Лог.Отладка("Вывод 1С:Предприятия - " + Конфигуратор.ВыводКоманды());
    Лог.Отладка("Очищаем каталог временной ИБ");

КонецПроцедуры

Функция ЭтоПутьКИсходнымКодамОбработок(ПутьКПапке)
    
    Результат = Ложь;
    //Возврат Результат;
    
    МассивИмен = НайтиФайлы(ПутьКПапке, "*.xml", Ложь);
    Для Каждого Элемент из МассивИмен Цикл
        ЧтениеТекста = Новый ЧтениеТекста(Элемент.ПолноеИмя);
        Содержание = ЧтениеТекста.Прочитать();
        ЧтениеТекста.Закрыть();
        Если Найти(Врег(Содержание), Врег("<ExternalDataProcessor uuid=")) > 0 ИЛИ Найти(Врег(Содержание), Врег("<ExternalReport uuid=")) > 0 Тогда
            Результат = Истина;
            Прервать;
        КонецЕсли;
    КонецЦикла;

    Возврат Результат;

КонецФункции

Функция ПолучитьТипФайлаПоКаталогуИсходников(Знач КаталогИсходников)

    ПутьКФайлуРут = ОбъединитьПути(КаталогИсходников, "root");
    ФайлРут = Новый Файл(ПутьКФайлуРут);
    
    Ожидаем.Что(ФайлРут.Существует(), "Файл <" + ПутьКФайлуРут +  "> должен существовать").ЭтоИстина();
    Ожидаем.Что(ФайлРут.ЭтоКаталог(), "<" + ПутьКФайлуРут +  "> должен быть файлом").ЭтоЛожь();
    
    ЧтениеТекста = Новый ЧтениеТекста(ПутьКФайлуРут);
    СодержаниеРут = ЧтениеТекста.Прочитать();
    ЧтениеТекста.Закрыть();
    МассивСтрокРут = СтрРазделить(СодержаниеРут, ",");
    Ожидаем.Что(МассивСтрокРут.Количество(), "Некорректный формат файла root").Больше(1);
    
    ПутьКФайлуКорневойКонтейнер = ОбъединитьПути(КаталогИсходников, МассивСтрокРут[1]);
    ФайлКорневойКонтейнер = Новый Файл(ПутьКФайлуКорневойКонтейнер);
        
    Ожидаем.Что(ФайлКорневойКонтейнер.Существует(), "Файл <" + ПутьКФайлуКорневойКонтейнер +  "> должен существовать").ЭтоИстина();
    Ожидаем.Что(ФайлКорневойКонтейнер.ЭтоКаталог(), "<" + ПутьКФайлуКорневойКонтейнер +  "> должен быть файлом").ЭтоЛожь();

    ЧтениеТекста = Новый ЧтениеТекста(ПутьКФайлуКорневойКонтейнер);
    СодержаниеКорневойКонтейнер = "";
    Для сч = 1 По 7 Цикл
        ПрочитаннаяСтрока = ЧтениеТекста.ПрочитатьСтроку();
        Если ПрочитаннаяСтрока = Неопределено Тогда
            Прервать;
        КонецЕсли;
        
        СодержаниеКорневойКонтейнер = СодержаниеКорневойКонтейнер + ПрочитаннаяСтрока;
    КонецЦикла;
    ЧтениеТекста.Закрыть();
    
    МассивСтрокКорневойКонтейнер = СтрРазделить(СодержаниеКорневойКонтейнер, ",");
    Ожидаем.Что(МассивСтрокКорневойКонтейнер.Количество(), "Некорректный формат файла корневого контейнера <" + ПутьКФайлуКорневойКонтейнер + ">").Больше(3);
    
    ИдентификаторТипаОбъекта = СокрЛП(МассивСтрокКорневойКонтейнер[3]);
    Если Лев(ИдентификаторТипаОбъекта, 1) = "{" Тогда
        ИдентификаторТипаОбъекта = Прав(ИдентификаторТипаОбъекта, СтрДлина(ИдентификаторТипаОбъекта) - 1);
    КонецЕсли;
    Если Прав(ИдентификаторТипаОбъекта, 1) = "}" Тогда
        ИдентификаторТипаОбъекта = Лев(ИдентификаторТипаОбъекта, СтрДлина(ИдентификаторТипаОбъекта) - 1);
    КонецЕсли;
    
    ИдентификаторТипаОбъекта = НРег(СокрЛП(ИдентификаторТипаОбъекта));

    Если ИдентификаторТипаОбъекта = "c3831ec8-d8d5-4f93-8a22-f9bfae07327f" Тогда
        ТипФайла = "epf";
    ИначеЕсли ИдентификаторТипаОбъекта = "e41aff26-25cf-4bb6-b6c1-3f478a75f374" Тогда
        ТипФайла = "erf";
    Иначе
        ВызватьИсключение("Некорректный идентификатор типа собираемого объекта <" + ИдентификаторТипаОбъекта + ">");
    КонецЕсли;

    Возврат ТипФайла;

КонецФункции

Функция ПрочитатьФайлJSON(ИмяФайла)
    Чтение = Новый ЧтениеТекста(ИмяФайла);
    JsonСтрока  = Чтение.Прочитать();
    Чтение.Закрыть();
	ПарсерJSON  = Новый ПарсерJSON();
	Результат   = ПарсерJSON.ПрочитатьJSON(JsonСтрока);
    Возврат Результат;
КонецФункции

Процедура ОбновитьЗависимыйКэш(АвтоОбновление, КэшПутей, КэшОбновляемый)

    Если КэшОбновляемый.Количество() = 0 Тогда
        Возврат;
    КонецЕсли;
    МассивКешейДляАвтообновления = Новый Массив;
    Если АвтоОбновление <> Неопределено Тогда
        Если ТипЗнч(АвтоОбновление) = Тип("Строка") И ЗначениеЗаполнено(АвтоОбновление) Тогда
            СоответствиеПутей = Новый Соответствие;
            СоответствиеПутей.Вставить("autoupdate", АвтоОбновление);
            МассивКешейДляАвтообновления.Добавить(СоответствиеПутей);
        ИначеЕсли ТипЗнч(АвтоОбновление) = Тип("Массив") Тогда 
            МассивКешейДляАвтообновления = АвтоОбновление;
        КонецЕсли;

    КонецЕсли;
    
    Для каждого ЭлементМассива Из МассивКешейДляАвтообновления Цикл
        
        Попытка
            Кэш = КэшПутей.Получить(ЭлементМассива.Получить("autoupdate"));
            Для каждого Элемент Из КэшОбновляемый Цикл
                Кэш.Вставить(Элемент.Ключ, Элемент.Значение);
            КонецЦикла;    
        Исключение
            Лог.Ошибка("Ошибка обновления других кэшей "+ Элемент + ":"+ ОписаниеОшибки());
        КонецПопытки;
    КонецЦикла;

КонецПроцедуры

Процедура СледитьЗаИзменениямиEPFToSrc(Значение, КэшПутей, Фильтр = "")
    Ключ = Строка(Значение.Получить("inDir")) + ""+Строка(Значение.Получить("outDir"));
    КаталогВходящий = ПолныйПуть(Значение.Получить("inDir"));
    КаталогИсходящий = ПолныйПуть(Значение.Получить("outDir"));
    СтрокаПодключения = ПереопределитьПолныйПутьВСтрокеПодключения(Значение.Получить("connectionstring"));
    Пользователь = Значение.Получить("user");
    Пароль = Значение.Получить("password");
    ВерсияПлатформы = Значение.Получить("version");
    ИмяПравила = Значение.Получить("name");
    АвтоОбновление = Значение.Получить("autoupdate");
    Если ИмяПравила <> Неопределено И Не ПустаяСтрока(ИмяПравила) Тогда 
        Ключ = ИмяПравила;
    КонецЕсли;

    Если Не ПустаяСтрока(Фильтр) И Фильтр <> Ключ Тогда 
        Возврат;
    КонецЕсли;

    ФайлВходящий = Новый Файл(КаталогВходящий);
    Если НЕ ФайлВходящий.Существует() Тогда 
        Возврат;
    КонецЕсли;
    
    Кэш = КэшПутей.Получить(Ключ);
    Если Кэш = Неопределено Тогда
        Лог.Информация("Начало epf to src "+Ключ);
        Кэш = Новый Соответствие;
        Если ФайлВходящий.ЭтоКаталог() Тогда 
            СписокФайлов = НайтиФайлы(КаталогВходящий, ПолучитьМаскуВсеФайлы(), Истина);
        Иначе 
            СписокФайлов = Новый Массив;
            СписокФайлов.Добавить(ФайлВходящий);
        КонецЕсли;
        
        //СписокФайлов = НайтиФайлы(КаталогВходящий, ПолучитьМаскуВсеФайлы(), Истина);
        Для каждого Файл из СписокФайлов Цикл
            Кэш.Вставить(Файл.ПолноеИмя, Файл.ПолучитьВремяИзменения());
        КонецЦикла;
        КэшПутей.Вставить(Ключ, Кэш);
    КонецЕсли;

    Лог.Отладка("Проверяем изменения epf "+Строка(КаталогВходящий) + "->"+Строка(КаталогИсходящий));

    КэшОбновляемый = Новый Соответствие();
    
    Если ФайлВходящий.ЭтоКаталог() Тогда 
        СписокФайлов = НайтиФайлы(КаталогВходящий, ПолучитьМаскуВсеФайлы(), Истина);
    Иначе 
        СписокФайлов = Новый Массив;
        СписокФайлов.Добавить(ФайлВходящий);
    КонецЕсли;
    
    СписокОбработаных = Новый Соответствие();
    Для каждого Файл из СписокФайлов Цикл
        Если Файл.ЭтоКаталог() Тогда Продолжить;  КонецЕсли;

        Время = Кэш.Получить(Файл.ПолноеИмя); Изменен = Ложь; ВремяТекущее = Файл.ПолучитьВремяИзменения();
        Если Время = Неопределено ИЛИ Время <> ВремяТекущее Тогда 
            Изменен = Истина;
            Лог.Отладка("Изменен:"+Файл.ПолноеИмя + " время старое:"+Строка(Время) + " новое:"+ВремяТекущее);
        КонецЕсли;

        Если Изменен = Истина Тогда
            КаталогВходящийДляРазбора = ?(ФайлВходящий.ЭтоКаталог(), КаталогВходящий, ФайлВходящий.Путь);
            Если ТипФайлаПоддерживается(Файл) Тогда

                Лог.Отладка("Разбираем внешнюю обработку "+Файл.Путь);
                НовыйПутьВыгрузки = ОбъединитьПути(ПолныйПуть(КаталогИсходящий), ПолучитьОтносительныйПутьФайла(ПолныйПуть(КаталогВходящийДляРазбора), Файл.Путь));
                Лог.Отладка("   относительный путь:"+ПолучитьОтносительныйПутьФайла(ПолныйПуть(КаталогВходящийДляРазбора), Файл.Путь));
                Лог.Отладка("   исходящий         :"+ПолныйПуть(КаталогИсходящий));
                Лог.Отладка("   входящий          :"+ПолныйПуть(КаталогВходящийДляРазбора));
                Лог.Отладка("   новый путь        :"+НовыйПутьВыгрузки);

                СоздатьКаталог(НовыйПутьВыгрузки);
                КаталогРазобранный = РазобратьФайлВнешняяОбработка(Файл, ПолныйПуть(КаталогИсходящий), ПолныйПуть(КаталогВходящийДляРазбора), СтрокаПодключения, Пользователь, Пароль, ВерсияПлатформы);
                СписокФайловНовый = НайтиФайлы(Новый Файл(КаталогРазобранный).ПолноеИмя, ПолучитьМаскуВсеФайлы(), Истина);
                Для каждого ФайлНовыйКэша Из СписокФайловНовый Цикл
                    Если ФайлНовыйКэша.ЭтоКаталог() = Ложь Тогда
                        Кэш.Вставить(ФайлНовыйКэша.ПолноеИмя, ФайлНовыйКэша.ПолучитьВремяИзменения());
                        КэшОбновляемый.Вставить(ФайлНовыйКэша.ПолноеИмя, ФайлНовыйКэша.ПолучитьВремяИзменения());
                    КонецЕсли;
                КонецЦикла;

            Иначе
                ОтносительныйПутьКаталогаФайла = ПолучитьОтносительныйПутьФайла(ПолныйПуть(КаталогВходящийДляРазбора), Файл.ПолноеИмя);
                Лог.Отладка("ОтносительныйПутьКаталогаФайла <"+ОтносительныйПутьКаталогаФайла+">");
                ПутьФайлаИсходников = ОбъединитьПути(ПолныйПуть(КаталогИсходящий), ОтносительныйПутьКаталогаФайла);
                Лог.Отладка("ПутьФайлаИсходников <"+ПутьФайлаИсходников+">");
                
                ФайлНовый = Новый Файл(ПутьФайлаИсходников);
                КаталогНовый = Новый Файл(ФайлНовый.Путь);
                Если НЕ КаталогНовый.Существует() Тогда 
                    СоздатьКаталог(КаталогНовый.ПолноеИмя);
                КонецЕсли;
        
                Если ФайлНовый.Существует() = Истина Тогда
                    
                    Лог.Отладка(СтрШаблон("Удаляем файл %1", ПутьФайлаИсходников));
                    Попытка
                        УдалитьФайлы(ФайлНовый.Путь, ФайлНовый.Имя);    
                    Исключение
                        Лог.Ошибка("Ошибка удаления файла "+ ПутьФайлаИсходников + ":"+ОписаниеОшибки());
                    КонецПопытки;
                    
                КонецЕсли;
                
                КопироватьФайл(Файл.ПолноеИмя, ФайлНовый.ПолноеИмя);
                Кэш.Вставить(ФайлНовый.ПолноеИмя, ФайлНовый.ПолучитьВремяИзменения());
                КэшОбновляемый.Вставить(ФайлНовый.ПолноеИмя, ФайлНовый.ПолучитьВремяИзменения());
                Лог.Отладка(СтрШаблон("Завершенно копирование файла %1 в каталог %2", Файл.Имя, ФайлНовый.ПолноеИмя));
            КонецЕсли;
            
            Кэш.Вставить(Файл.ПолноеИмя, Файл.ПолучитьВремяИзменения());
            СписокОбработаных.Вставить(Файл.ПолноеИмя, Истина);
        КонецЕсли;
    КонецЦикла;

    Для каждого Элемент ИЗ СписокОбработаных Цикл 
        Файл = Новый Файл(Элемент.Ключ);
        Кэш.Вставить(Файл.ПолноеИмя, Файл.ПолучитьВремяИзменения());
    КонецЦикла;

    КэшПутей.Вставить(Ключ, Кэш);
    Кэш = Неопределено;
    Если СписокОбработаных.Количество() > 0 Тогда
        Лог.Информация("Изменено "+Строка(СписокОбработаных.Количество()));
        КолМаксИзмененийВывода = 5;
        Для каждого Элемент Из СписокОбработаных Цикл
            Если КолМаксИзмененийВывода < 0 Тогда
                Лог.Информация("Обработно ...");
                Прервать;
            КонецЕсли;
            Лог.Информация("Обработан "+Элемент.Ключ);
            КолМаксИзмененийВывода = КолМаксИзмененийВывода - 1;
        КонецЦикла;
    КонецЕсли;

    ОбновитьЗависимыйКэш(АвтоОбновление, КэшПутей, КэшОбновляемый);
    
КонецПроцедуры	

Процедура СледитьЗаИзменениямиSrcToEPF(Значение, КэшПутей, Фильтр = "")
    Ключ = Строка(Значение.Получить("inDir")) + ""+Строка(Значение.Получить("outDir"));
    КаталогВходящий = ПолныйПуть(Значение.Получить("inDir"));
    КаталогИсходящий = ПолныйПуть(Значение.Получить("outDir"));
    СтрокаПодключения = ПереопределитьПолныйПутьВСтрокеПодключения(Значение.Получить("connectionstring"));
    Пользователь = Значение.Получить("user");
    Пароль = Значение.Получить("password");
    ВерсияПлатформы = Значение.Получить("version");
    ИмяПравила = Значение.Получить("name");
    АвтоОбновление = Значение.Получить("autoupdate");
    Если ИмяПравила <> Неопределено И Не ПустаяСтрока(ИмяПравила) Тогда 
        Ключ = ИмяПравила;
    КонецЕсли;

    Если Не ПустаяСтрока(Фильтр) И Фильтр <> Ключ Тогда 
        Возврат;
    КонецЕсли;
    
    Кэш = КэшПутей.Получить(Ключ);
    Если Кэш = Неопределено Тогда
        Лог.Информация("Начало src to epf:"+Ключ);
        Кэш = Новый Соответствие;
        СписокФайлов = НайтиФайлы(КаталогВходящий, ПолучитьМаскуВсеФайлы(), Истина);
        Для каждого Файл из СписокФайлов Цикл
            Кэш.Вставить(Файл.ПолноеИмя, Файл.ПолучитьВремяИзменения());
        КонецЦикла;
        КэшПутей.Вставить(Ключ, Кэш);
    КонецЕсли;

    Лог.Отладка("Проверяем изменения src "+Строка(КаталогВходящий) + "->"+Строка(КаталогИсходящий));

    СписокФайлов = НайтиФайлы(КаталогВходящий, ПолучитьМаскуВсеФайлы(), Истина);
    //Лог.Отладка("Нашли "+СписокФайлов.Количество());
    СписокОбработаных = Новый Соответствие();
    КэшОбновляемый = Новый Соответствие();
    Для каждого Файл из СписокФайлов Цикл
        Если Файл.ЭтоКаталог() Тогда Продолжить; КонецЕсли;

        Время = Кэш.Получить(Файл.ПолноеИмя); Изменен = Ложь; ВремяТекущее = Файл.ПолучитьВремяИзменения();
        Если Время = Неопределено ИЛИ Время <> ВремяТекущее Тогда 
            Изменен = Истина;
            Лог.Отладка("Изменен:"+Файл.ПолноеИмя + " время старое:"+Строка(Время) + " новое:"+Файл.ПолучитьВремяИзменения());
        КонецЕсли;

        Если Изменен = Истина Тогда
            ОбработкуНашли = Ложь; ПапкаИсходников = ""; ПутьКИсходникамОбработки = Файл.ПолноеИмя;
            //Нам передали путь к измененому файлу, необходимо определить корневую папку.
            МаксСчетчикЦикла = 5;
            Если Файл.Расширение = ".png" Тогда
                МаксСчетчикЦикла = 7;  //\vanessa\Forms\УправляемаяФорма\Ext\Form\Items\ИмяКартинки\Picture.png
            КонецЕсли;
            
            Для Счетчик = 0 По МаксСчетчикЦикла Цикл
                ФайлПутьКИсходникамОбработки = Новый Файл(ПутьКИсходникамОбработки);
                Если ФайлПутьКИсходникамОбработки.ЭтоКаталог() Тогда 
                    ФайлПутьКИсходникамОбработки = Новый Файл(ФайлПутьКИсходникамОбработки.ПолноеИмя+"../");
                КонецЕсли;

                ПутьКИсходникамОбработки = ФайлПутьКИсходникамОбработки.Путь;
                //Лог.Отладка(ФайлПутьКИсходникамОбработки.ПолноеИмя+" путь к исходникам "+ ПутьКИсходникамОбработки );
                Если ЭтоПутьКИсходнымКодамОбработок(ПутьКИсходникамОбработки) Тогда
                    Лог.Отладка("Это путь к исходникам "+ПутьКИсходникамОбработки);
                    ПапкаИсходников = Новый Файл(ПутьКИсходникамОбработки).ПолноеИмя;
                    ОбработкуНашли = Истина;
                    Прервать;
                КонецЕсли;
                ПутьКИсходникамОбработки = Новый Файл(ПутьКИсходникамОбработки).ПолноеИмя;
                //Лог.Отладка("Прошли цикл "+Счетчик+" новый путь:"+ПутьКИсходникамОбработки)
            КонецЦикла;
            

            Если ОбработкуНашли = Истина И СписокОбработаных.Получить(ПапкаИсходников) <> Неопределено Тогда
                Кэш.Вставить(Файл.ПолноеИмя, Файл.ПолучитьВремяИзменения());
                СписокОбработаных.Вставить(Файл.ПолноеИмя, Истина);
            ИначеЕсли ОбработкуНашли = Истина Тогда
                ПутьОтносительно = ?(ПолныйПуть(КаталогВходящий) = ПапкаИсходников, "./", "../"); 
                КаталогВыгрузкиОбработки = Новый Файл(ОбъединитьПути(ПолныйПуть(КаталогИсходящий), ПолучитьОтносительныйПутьФайла(ПолныйПуть(КаталогВходящий), ПапкаИсходников), ПутьОтносительно)).ПолноеИмя;
                ИмяФайлаОбъекта = СобратьФайлВнешнейОбработки(ПапкаИсходников, КаталогВыгрузкиОбработки, СтрокаПодключения, Пользователь, Пароль, ВерсияПлатформы);
                
                КаталогФайл = Новый Файл(ИмяФайлаОбъекта);
                СписокСобранныхОбработок = НайтиФайлы(КаталогВыгрузкиОбработки, ""+КаталогФайл.Имя + "*");
                
                Для каждого ЭлементОбработки из СписокСобранныхОбработок Цикл
                    Кэш.Вставить(ЭлементОбработки.ПолноеИмя, ЭлементОбработки.ПолучитьВремяИзменения());
                    КэшОбновляемый.Вставить(ЭлементОбработки.ПолноеИмя, ЭлементОбработки.ПолучитьВремяИзменения());
                КонецЦикла;
                СписокОбработаных.Вставить(ПапкаИсходников, Истина);
            Иначе
                НовыйПутьВыгрузки = ОбъединитьПути(ПолныйПуть(КаталогИсходящий), ПолучитьОтносительныйПутьФайла(ПолныйПуть(КаталогВходящий), Файл.ПолноеИмя));
                Лог.Отладка("Копируем "+Файл.ПолноеИмя + "->"+НовыйПутьВыгрузки);
                НовыйКаталог = Новый Файл(Новый Файл(НовыйПутьВыгрузки).Путь);
                Если НовыйКаталог.Существует() = Ложь Тогда 
                    СоздатьКаталог(НовыйКаталог.ПолноеИмя);
                КонецЕсли;
                КопироватьФайл(Файл.ПолноеИмя, НовыйПутьВыгрузки);

                ФайлСобранный = Новый Файл(НовыйПутьВыгрузки);
                Кэш.Вставить(ФайлСобранный.ПолноеИмя, ФайлСобранный.ПолучитьВремяИзменения());
                КэшОбновляемый.Вставить(ФайлСобранный.ПолноеИмя, ФайлСобранный.ПолучитьВремяИзменения());
                //СписокОбработаных.Вставить(ФайлСобранный.ПолноеИмя, Истина);
            КонецЕсли;
            Кэш.Вставить(Файл.ПолноеИмя, Файл.ПолучитьВремяИзменения());
            СписокОбработаных.Вставить(Файл.ПолноеИмя, Истина);
        КонецЕсли;
    КонецЦикла;

    Для каждого Элемент ИЗ СписокОбработаных Цикл 
        Файл = Новый Файл(Элемент.Ключ);
        Кэш.Вставить(Файл.ПолноеИмя, Файл.ПолучитьВремяИзменения());
    КонецЦикла;

    КэшПутей.Вставить(Ключ, Кэш);
    Кэш = Неопределено;
    Если СписокОбработаных.Количество() > 0 Тогда
        Лог.Информация("Изменено "+Строка(СписокОбработаных.Количество()));
        КолМаксИзмененийВывода = 5;
        Для каждого Элемент Из СписокОбработаных Цикл
            Если КолМаксИзмененийВывода < 0 Тогда
                Лог.Информация("Обработно ...");
                Прервать;
            КонецЕсли;
            Лог.Информация("Обработан "+Элемент.Ключ);
            КолМаксИзмененийВывода = КолМаксИзмененийВывода - 1;
        КонецЦикла;
    КонецЕсли;

    ОбновитьЗависимыйКэш(АвтоОбновление, КэшПутей, КэшОбновляемый);
    
КонецПроцедуры	

Процедура СледитьЗаИзменениямиИсходниковCF(Значение, КэшПутей, Фильтр = "")
    Если Значение <> Неопределено Тогда
        Ключ = Строка(Значение.Получить("inDir"));
        КаталогВходящий = ПолныйПуть(Значение.Получить("inDir"));
        СтрокаПодключения = ПереопределитьПолныйПутьВСтрокеПодключения(Значение.Получить("connectionstring"));
        Пользователь = Значение.Получить("user");
        Пароль = Значение.Получить("password");
        ВерсияПлатформы = Значение.Получить("version");
        АвтоОбновление = Значение.Получить("autoupdate");
        ИмяПравила = Значение.Получить("name");
        Если ИмяПравила <> Неопределено И Не ПустаяСтрока(ИмяПравила) Тогда 
            Ключ = ИмяПравила;
        КонецЕсли;

        
        Если Не ПустаяСтрока(Фильтр) И Фильтр <> Ключ Тогда 
            Возврат;
        КонецЕсли;

        Если АвтоОбновление = Истина Или АвтоОбновление = "true" Тогда 
            АвтоОбновление = Истина;
        КонецЕсли;

        Кэш = КэшПутей.Получить(Ключ);
        Если Кэш = Неопределено Тогда
            Лог.Информация("Начало src to cf "+Ключ);
            Кэш = Новый Соответствие;
            СписокФайлов = НайтиФайлы(КаталогВходящий, ПолучитьМаскуВсеФайлы(), Истина);
            Для каждого Файл из СписокФайлов Цикл
                Кэш.Вставить(Файл.ПолноеИмя, Файл.ПолучитьВремяИзменения());
            КонецЦикла;
            КэшПутей.Вставить(Ключ, Кэш);
        КонецЕсли;

        Лог.Отладка("Проверяем изменения cf "+Строка(КаталогВходящий));

        СписокФайлов = НайтиФайлы(КаталогВходящий, ПолучитьМаскуВсеФайлы(), Истина);
        //Лог.Отладка("Нашли "+СписокФайлов.Количество());
        СписокОбработаных = Новый Соответствие();
        
        Для каждого Файл из СписокФайлов Цикл
            Если Файл.ЭтоКаталог() Тогда 
                Продолжить;
            КонецЕсли;

            Изменен = Ложь;
            Время = Кэш.Получить(Файл.ПолноеИмя); ВремяТекущее = Файл.ПолучитьВремяИзменения();
            Если Время = Неопределено ИЛИ Время <> ВремяТекущее Тогда 
                Изменен = Истина;
                Лог.Отладка("Изменен:"+Файл.ПолноеИмя + " время старое:"+Строка(Время) + " новое:"+Файл.ПолучитьВремяИзменения());
            КонецЕсли;

            Если Изменен = Истина Тогда
                СписокОбработаных.Вставить(Файл.ПолноеИмя, Файл);
            КонецЕсли;
        КонецЦикла;

        Если СписокОбработаных.Количество() > 0 Тогда
            СписокДляЗагрузки = "";
            ПервыйРаз = Истина;
            Для каждого ИмяФайла Из СписокОбработаных Цикл
                Если ПервыйРаз Тогда
                    СписокДляЗагрузки = ""+ИмяФайла.Ключ;                            
                    ПервыйРаз = Ложь;
                КонецЕсли;
                СписокДляЗагрузки = СписокДляЗагрузки + Символы.ПС + ИмяФайла.Ключ;    
            КонецЦикла;
            КонфигурацияЗагруженна = Ложь;
            Попытка
                СобратьИзИсходниковТекущуюКонфигурацию(КаталогВходящий, СтрокаПодключения, Пользователь, Пароль, ВерсияПлатформы, СписокДляЗагрузки);
                Для каждого ИмяФайла Из СписокОбработаных Цикл
                    Кэш.Вставить(ИмяФайла.Значение.ПолноеИмя, ИмяФайла.Значение.ПолучитьВремяИзменения());
                КонецЦикла;
                КонфигурацияЗагруженна = Истина;
            Исключение
                Лог.Ошибка("Ошибка загрузки файлов конфигурации:"+ОписаниеОшибки());
            КонецПопытки;

            Если КонфигурацияЗагруженна = Истина И АвтоОбновление = Истина Тогда
                Попытка
                    ЗапуститьОбновлениеКонфигурации(СтрокаПодключения, Пользователь, Пароль, ,ВерсияПлатформы);
                Исключение
                    Лог.Ошибка("Ошибка обновления конфигурации:"+ОписаниеОшибки());
                КонецПопытки;
                
            КонецЕсли;

            Лог.Информация("Загрузка изменений завершена:"+КаталогВходящий);
        КонецЕсли;

    КонецЕсли;
КонецПроцедуры

Процедура Следить(Знач ФайлНастроек = "", Знач Фильтр = "")
    Перем КэшПутей;
    КэшПутей = Новый Соответствие;
    ФайлНастроек = ПолныйПуть(ФайлНастроек);
    Настройки = ПрочитатьФайлJSON(ФайлНастроек);
    Счетчик = -1;
    Пока Истина Цикл 
        Для каждого Элемент ИЗ Настройки Цикл
            Значение = Элемент.Получить("srctoepf");
            Если Значение <> Неопределено Тогда
                СледитьЗаИзменениямиSrcToEPF(Значение, КэшПутей, Фильтр)
            КонецЕсли;

            Значение = Элемент.Получить("epftosrc");
            Если Значение <> Неопределено Тогда
                СледитьЗаИзменениямиEPFToSrc(Значение, КэшПутей, Фильтр)
            КонецЕсли;

            Значение = Элемент.Получить("srccftoib");
            СледитьЗаИзменениямиИсходниковCF(Значение, КэшПутей);
        КонецЦикла;
        sleep(8000);
    КонецЦикла;


КонецПроцедуры

Процедура Конфигуратор(Знач СтрокаПодключения, Знач Пользователь="", Знач Пароль="",
						Знач СтрокаПодключенияХранилище = "", Знач ПользовательХранилища="", Знач ПарольХранилища="",
						Знач ВерсияХранилища="", Знач ВерсияПлатформы="", Знач СервиснаяБаза = Ложь, Знач ДополнительныеКлючиЗапуска = "") Экспорт

    Конфигуратор = Новый УправлениеКонфигуратором();
    Логирование.ПолучитьЛог("oscript.lib.v8runner").УстановитьУровень(Лог.Уровень());

    Если НЕ ПустаяСтрока(ВерсияПлатформы) Тогда
        Лог.Отладка("ВерсияПлатформы:"+ВерсияПлатформы);
        Конфигуратор.ИспользоватьВерсиюПлатформы(ВерсияПлатформы);
    КонецЕсли;

    Конфигуратор.УстановитьИмяФайлаСообщенийПлатформы(ПолучитьИмяВременногоФайла("log"));
    Если СервиснаяБаза = Истина Тогда
        КаталогБазы = ОбъединитьПути(КорневойПутьПроекта, "./build/ibservice");
        СтрокаПодключения = "/F""" + КаталогБазы + """";
    КонецЕсли;

    Если ПустаяСтрока(СтрокаПодключения) Тогда
        КаталогБазы = ОбъединитьПути(КорневойПутьПроекта, ?(СервиснаяБаза = Истина, "./build/ibservice", "./build/ib"));
        СтрокаПодключения = "/F""" + КаталогБазы + """";
    КонецЕсли;

    Конфигуратор.УстановитьКонтекст(СтрокаПодключения, Пользователь, Пароль);

    ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();

    Если НЕ ПустаяСтрока(СтрокаПодключенияХранилище) Тогда
        ПараметрыЗапуска.Добавить("/ConfigurationRepositoryF """+СтрокаПодключенияХранилище+"""");
        ПараметрыЗапуска.Добавить("/ConfigurationRepositoryN """+ПользовательХранилища+"""");

        Если Не ПустаяСтрока(ПарольХранилища) Тогда
            ПараметрыЗапуска.Добавить("/ConfigurationRepositoryP """+ПарольХранилища+"""");
        КонецЕсли;
    КонецЕсли;

    СтрокаЗапуска = "";
	СтрокаДляЛога = "";
	Для Каждого Параметр Из ПараметрыЗапуска Цикл
		СтрокаЗапуска = СтрокаЗапуска + " " + Параметр;
		Если Лев(Параметр,2) <> "/P" и Лев(Параметр,25) <> "/ConfigurationRepositoryP" Тогда
			СтрокаДляЛога = СтрокаДляЛога + " " + Параметр;
		КонецЕсли;
	КонецЦикла;

    Приложение = "";
    Приложение = Конфигуратор.ПутьКПлатформе1С();
    Если Найти(Приложение, " ") > 0 Тогда 
        Приложение = ОбернутьПутьВКавычки(Приложение);
    КонецЕсли;
    Приложение = Приложение + " "+СтрокаЗапуска;
	Лог.Информация(Приложение);
	Процесс = СоздатьПроцесс(Приложение,,Истина);
    Процесс.Запустить();

КонецПроцедуры

Процедура ДополнитьАргументыИзПеременныхОкружения(ЗначенияПараметров = Неопределено, СоответствиеПеременных)
    
    СИ = Новый СистемнаяИнформация;
    Для каждого Элемент Из СоответствиеПеременных Цикл
        ЗначениеПеременной = СИ.ПолучитьПеременнуюСреды(ВРег(Элемент.Ключ));
        ПараметрКомманднойСтроки = ЗначенияПараметров.Получить(Элемент.Значение);
        Если ПараметрКомманднойСтроки = Неопределено ИЛИ ПустаяСтрока(ПараметрКомманднойСтроки) Тогда 
            Если ЗначениеЗаполнено(ЗначениеПеременной) И НЕ ПустаяСтрока(ЗначениеПеременной) Тогда
                ЗначенияПараметров.Вставить(Элемент.Значение, ЗначениеПеременной);
            КонецЕсли;
        КонецЕсли;
    КонецЦикла;
    
КонецПроцедуры

Процедура УстановитьКаталогТекущегоПроекта(Знач Путь = "")
    КорневойПутьПроекта = "";
    Если ПустаяСтрока(Путь) Тогда
        Попытка
            КорневойПутьПроекта = СокрЛП(ЗапуститьПроцесс("git rev-parse --show-toplevel"));
        Исключение
        КонецПопытки;
    Иначе
        КорневойПутьПроекта = Путь;
    КонецЕсли;

    Лог.Отладка("Текущий корень проекта:"+КорневойПутьПроекта);

КонецПроцедуры // УстановитьКаталогТекущегоПроекта()

Функция ЗапускВКоманднойСтроке()
    Лог_cmdline = Логирование.ПолучитьЛог("oscript.lib.cmdline");
    Лог_v8runner = Логирование.ПолучитьЛог("oscript.lib.v8runner");
    
    // Лог.УстановитьУровень(УровниЛога.Отладка);
    ВыводПоУмолчанию = Новый ВыводЛогаВКонсоль();
    Лог_cmdline.ДобавитьСпособВывода(ВыводПоУмолчанию);
    Лог_v8runner.ДобавитьСпособВывода(ВыводПоУмолчанию);
    
    СИ = Новый СистемнаяИнформация;
    УровеньЛога = УровниЛога.Отладка;
    РежимРаботы = СИ.ПолучитьПеременнуюСреды("RUNNER_ENV");
    Если ЗначениеЗаполнено(РежимРаботы) И РежимРаботы = "production" Тогда
        УровеньЛога = УровниЛога.Информация;
    Иначе
        Аппендер = Новый ВыводЛогаВФайл();
        Аппендер.ОткрытьФайл(ОбъединитьПути(КаталогЛогов, ИмяСкрипта()+".cmdline.log"));
        Лог_cmdline.ДобавитьСпособВывода(Аппендер);	
    КонецЕсли;
    
    Если УровеньЛога > УровниЛога.Отладка Тогда
        УровеньЛога = УровниЛога.Ошибка;
    КонецЕсли;
    Лог_cmdline.УстановитьУровень(УровеньЛога);
    Лог_v8runner.УстановитьУровень(УровеньЛога);

    Лог_v8runner.УстановитьРаскладку(ЭтотОбъект);
    Лог_cmdline.УстановитьРаскладку(ЭтотОбъект);
    
    
    КодВозврата = 0;
    Если ТекущийСценарий().Источник <> СтартовыйСценарий().Источник Тогда
        Возврат Ложь;
    КонецЕсли;
    
    Попытка
    
        Парсер = Новый ПарсерАргументовКоманднойСтроки();
        
        Парсер.ДобавитьИменованныйПараметр("--ibname", "Строка подключения к БД", Истина);
        Парсер.ДобавитьИменованныйПараметр("--db-user", "Пользователь БД", Истина);
        Парсер.ДобавитьИменованныйПараметр("--db-pwd", "Пароль БД", Истина);
        Парсер.ДобавитьИменованныйПараметр("--v8version", "Версия платформы", Истина);
        Парсер.ДобавитьИменованныйПараметр("--root", "Полный путь к проекту", Истина);
        Парсер.ДобавитьИменованныйПараметр("--ordinaryapp", "Запуск толстого клиента", Истина);
        
        ДобавитьОписаниеКомандыЮнитТест(Парсер);
        ДобавитьОписаниеКомандыТестироватьПоведение(Парсер);
        ДобавитьОписаниеКомандыПомощь(Парсер);
        // Работа с cf 
        ДобавитьОписаниеКомандыРазобратьНаИсходники(Парсер);
        ДобавитьОписаниеКомандыРазобратьНаИсходникиТекущуюКонфигурацию(Парсер);
        ДобавитьОписаниеКомандыСобратьИзИсходников(Парсер);
        ДобавитьОписаниеКомандыСобратьИзИсходниковТекущуюКонфигурацию(Парсер);
        // Работа с cfe
        ДобавитьОписаниеКомандыРазобратьРасширение(Парсер);
        ДобавитьОписаниеКомандыСобратьРасширение(Парсер);
        // Работа с epf
        ДобавитьОписаниеКомандыСобратьEpf(Парсер);
        ДобавитьОписаниеКомандыДекомпилироватьEpf(Парсер);
        
        ДобавитьОписаниеКомандыОбновитьБазу(Парсер);
        ДобавитьОписаниеКомандыЗапуститьВРежимеПредприятия(Парсер);
        
        ДобавитьОписаниеКомандыОбновитьИзХранилища(Парсер);
        ДобавитьОписаниеКомандыСледить(Парсер);
        ДобавитьОписаниеКомандыКонфигуратор(Парсер);
        
        Аргументы = Парсер.РазобратьКоманду(АргументыКоманднойСтроки);
        Лог.Отладка("ТипЗнч(Аргументы)= "+ТипЗнч(Аргументы));
        Если Аргументы = Неопределено Тогда
            ВывестиСправку();
            Возврат Истина;
        КонецЕсли;

        Команда = Аргументы.Команда;
        Лог.Отладка("Передана команда: "+Команда);

        СоответствиеПеременных = Новый Соответствие();
        СоответствиеПеременных.Вставить("RUNNER_IBNAME", "--ibname");
        СоответствиеПеременных.Вставить("RUNNER_DBUSER", "--db-user");
        СоответствиеПеременных.Вставить("RUNNER_DBPWD", "--db-pwd");
        СоответствиеПеременных.Вставить("RUNNER_v8version", "--v8version");
        СоответствиеПеременных.Вставить("RUNNER_uccode", "--uccode");
        СоответствиеПеременных.Вставить("RUNNER_command", "--command");
        СоответствиеПеременных.Вставить("RUNNER_execute", "--execute");
        СоответствиеПеременных.Вставить("RUNNER_storage-user", "--storage-user");
        СоответствиеПеременных.Вставить("RUNNER_storage-pwd", "--storage-pwd");
        СоответствиеПеременных.Вставить("RUNNER_storage-ver", "--storage-ver");
        СоответствиеПеременных.Вставить("RUNNER_storage-name", "--storage-name");
        СоответствиеПеременных.Вставить("RUNNER_ROOT", "--root");
        СоответствиеПеременных.Вставить("RUNNER_WORKSPACE", "--workspace");
        СоответствиеПеременных.Вставить("RUNNER_PATHVANESSA", "--pathvanessa");
        СоответствиеПеременных.Вставить("RUNNER_PATHXUNIT", "--pathxunit");
        СоответствиеПеременных.Вставить("RUNNER_VANESSASETTINGS", "--vanessasettings");
                
        ДополнитьАргументыИзПеременныхОкружения(Аргументы.ЗначенияПараметров, СоответствиеПеременных);

        Для Каждого Параметр Из Аргументы.ЗначенияПараметров Цикл
            Лог.Отладка(Параметр.Ключ + " = " + Параметр.Значение);
        КонецЦикла;

        УстановитьКаталогТекущегоПроекта(Аргументы.ЗначенияПараметров["--root"]);
        Если ЗначениеЗаполнено(Аргументы.ЗначенияПараметров["--ibname"]) Тогда
            Аргументы.ЗначенияПараметров.Вставить("--ibname", ПереопределитьПолныйПутьВСтрокеПодключения(Аргументы.ЗначенияПараметров["--ibname"]));
        КонецЕсли;
        
        Если Команда = ВозможныеКоманды().ДекомпилироватьEpf Тогда
            Декомпилировать(ПолныйПуть(Аргументы.ЗначенияПараметров["ПутьВходящихДанных"]), ПолныйПуть(Аргументы.ЗначенияПараметров["ВыходнойКаталог"]), ПолныйПуть(Аргументы.ЗначенияПараметров["--outDir"]), 
                            ПолныйПуть(Аргументы.ЗначенияПараметров["--inDir"]) ,
                            Аргументы.ЗначенияПараметров["--ibname"], Аргументы.ЗначенияПараметров["--db-user"], Аргументы.ЗначенияПараметров["--db-pwd"], 
                            Аргументы.ЗначенияПараметров["--v8version"]);
        ИначеЕсли Команда = ВозможныеКоманды().СобратьEpf Тогда 
            Компилировать(ПолныйПуть(Аргументы.ЗначенияПараметров["ПутьВходящихДанных"]), ПолныйПуть(Аргументы.ЗначенияПараметров["ВыходнойКаталог"]),
                            Аргументы.ЗначенияПараметров["--ibname"], Аргументы.ЗначенияПараметров["--db-user"], Аргументы.ЗначенияПараметров["--db-pwd"], 
                            Аргументы.ЗначенияПараметров["--v8version"]);
        ИначеЕсли Команда = ВозможныеКоманды().РазобратьНаИсходникиТекущуюКонфигурацию Тогда
            РазобратьНаИсходникиТекущуюКонфигурацию(ПолныйПуть(Аргументы.ЗначенияПараметров["ПутьКИсходникам"]), 
                            Аргументы.ЗначенияПараметров["--ibname"], Аргументы.ЗначенияПараметров["--db-user"], Аргументы.ЗначенияПараметров["--db-pwd"],
                            Аргументы.ЗначенияПараметров["--v8version"]);
        ИначеЕсли Команда = ВозможныеКоманды().РазобратьНаИсходники Тогда
            РазобратьФайлКонфигурации(ПолныйПуть(Аргументы.ЗначенияПараметров["ПутьКCF"]), ПолныйПуть(Аргументы.ЗначенияПараметров["ПутьКИсходникам"]), Аргументы.ЗначенияПараметров["--v8version"]);
        ИначеЕсли Команда = ВозможныеКоманды().Помощь Тогда
            ВывестиСправку();
        ИначеЕсли Команда = ВозможныеКоманды().СобратьИзИсходников Тогда
            СобратьФайлКонфигурации(ПолныйПуть(Аргументы.ЗначенияПараметров["ПутьКИсходникам"]), ПолныйПуть(Аргументы.ЗначенияПараметров["ПутьКCF"]), Аргументы.ЗначенияПараметров["--v8version"]);
        ИначеЕсли Команда = ВозможныеКоманды().СобратьИзИсходниковТекущуюКонфигурацию Тогда
            СобратьИзИсходниковТекущуюКонфигурацию(ПолныйПуть(Аргументы.ЗначенияПараметров["ПутьКИсходникам"]), 
                            Аргументы.ЗначенияПараметров["--ibname"], Аргументы.ЗначенияПараметров["--db-user"], Аргументы.ЗначенияПараметров["--db-pwd"], Аргументы.ЗначенияПараметров["--v8version"]);
                            
        ИначеЕсли Команда = ВозможныеКоманды().РазобратьРасширение Тогда 
            РазобратьНаИсходникиРасшрение(ПолныйПуть(Аргументы.ЗначенияПараметров["НаименованиеРасширения"]), ПолныйПуть(Аргументы.ЗначенияПараметров["ПутьКИсходникам"]), 
                            Аргументы.ЗначенияПараметров["--ibname"], Аргументы.ЗначенияПараметров["--db-user"], Аргументы.ЗначенияПараметров["--db-pwd"],
                            Аргументы.ЗначенияПараметров["--v8version"]);
                            
        ИначеЕсли Команда = ВозможныеКоманды().СобратьРасширение Тогда 
            СобратьИзИсходниковРасшрение(ПолныйПуть(Аргументы.ЗначенияПараметров["ПутьКИсходникам"]), ПолныйПуть(Аргументы.ЗначенияПараметров["НаименованиеРасширения"]),
                            Аргументы.ЗначенияПараметров["--ibname"], Аргументы.ЗначенияПараметров["--db-user"], Аргументы.ЗначенияПараметров["--db-pwd"],
                            Аргументы.ЗначенияПараметров["--v8version"]);
        ИначеЕсли Команда = ВозможныеКоманды().ТестироватьПоведение Тогда 
            ЗапуститьТестироватьПоведение(ПолныйПуть(Аргументы.ЗначенияПараметров["--workspace"]),
                            Аргументы.ЗначенияПараметров["--ibname"], Аргументы.ЗначенияПараметров["--db-user"], Аргументы.ЗначенияПараметров["--db-pwd"],
                            ПолныйПуть(Аргументы.ЗначенияПараметров["--vanessasettings"]), ПолныйПуть(Аргументы.ЗначенияПараметров["--pathvanessa"]),
                            Аргументы.ЗначенияПараметров["--ordinaryapp"], Аргументы.ЗначенияПараметров["--additional"],
							Аргументы.ЗначенияПараметров["--v8version"]
                            );
        ИначеЕсли Команда = ВозможныеКоманды().ЮнитТест Тогда
            ЗапуститьТестироватьЮнит(ПолныйПуть(Аргументы.ЗначенияПараметров["ПутьВходящихДанных"]), ПолныйПуть(Аргументы.ЗначенияПараметров["--reportxunit"]),
                            Аргументы.ЗначенияПараметров["--ibname"], Аргументы.ЗначенияПараметров["--db-user"], Аргументы.ЗначенияПараметров["--db-pwd"],
                            ПолныйПуть(Аргументы.ЗначенияПараметров["--pathxunit"]), Аргументы.ЗначенияПараметров["--ordinaryapp"], Аргументы.ЗначенияПараметров["--v8version"]);
        ИначеЕсли Команда = ВозможныеКоманды().ОбновитьБазу Тогда
            ЗапуститьОбновлениеКонфигурации(Аргументы.ЗначенияПараметров["--ibname"], Аргументы.ЗначенияПараметров["--db-user"], Аргументы.ЗначенияПараметров["--db-pwd"],
                            Аргументы.ЗначенияПараметров["--uccode"], Аргументы.ЗначенияПараметров["--v8version"]);
        ИначеЕсли Команда = ВозможныеКоманды().ЗапуститьВРежимеПредприятия Тогда 
            ЗапуститьВРежимеПредприятия(Аргументы.ЗначенияПараметров["--ibname"], Аргументы.ЗначенияПараметров["--db-user"], Аргументы.ЗначенияПараметров["--db-pwd"],
                            Аргументы.ЗначенияПараметров["--uccode"], Аргументы.ЗначенияПараметров["--command"], ПолныйПуть(Аргументы.ЗначенияПараметров["--execute"]),
                            Аргументы.ЗначенияПараметров["--v8version"]); 
        ИначеЕсли Команда = ВозможныеКоманды().ОбновитьИзХранилища Тогда 
            ЗапуститьОбновлениеИзХранилища(Аргументы.ЗначенияПараметров["--ibname"], Аргументы.ЗначенияПараметров["--db-user"], Аргументы.ЗначенияПараметров["--db-pwd"],
                            Аргументы.ЗначенияПараметров["--storage-name"], Аргументы.ЗначенияПараметров["--storage-user"], Аргументы.ЗначенияПараметров["--storage-pwd"], Аргументы.ЗначенияПараметров["--storage-ver"],
                            Аргументы.ЗначенияПараметров["--v8version"]);
        ИначеЕсли Команда = ВозможныеКоманды().Следить Тогда 
            Следить(Аргументы.ЗначенияПараметров["ПутьКФайлуНастроек"], Аргументы.ЗначенияПараметров["--filter"]);
        ИначеЕсли Команда = ВозможныеКоманды().Конфигуратор Тогда 
            Конфигуратор(Аргументы.ЗначенияПараметров["--ibname"], Аргументы.ЗначенияПараметров["--db-user"], Аргументы.ЗначенияПараметров["--db-pwd"],
                        Аргументы.ЗначенияПараметров["--storage-name"], Аргументы.ЗначенияПараметров["--storage-user"], Аргументы.ЗначенияПараметров["--storage-pwd"], Аргументы.ЗначенияПараметров["--storage-ver"],
                        Аргументы.ЗначенияПараметров["--v8version"], Аргументы.ЗначенияПараметров["--dev"]);
        КонецЕсли;
        
    Исключение
        Лог.Ошибка(ОписаниеОшибки());
        КодВозврата = 1;
    КонецПопытки;
    
    ВременныеФайлы.Удалить();

    Возврат Истина;
    
КонецФункции

Процедура ДобавитьОписаниеКомандыСобратьИзИсходников(Знач Парсер)
    ОписаниеКоманды = Парсер.ОписаниеКоманды(ВозможныеКоманды().СобратьИзИсходников);
    Парсер.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "ПутьКИсходникам");
    Парсер.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "ПутьКCF");
    Парсер.ДобавитьКоманду(ОписаниеКоманды);
КонецПроцедуры

Процедура ДобавитьОписаниеКомандыСобратьИзИсходниковТекущуюКонфигурацию(Знач Парсер)
    ОписаниеКоманды = Парсер.ОписаниеКоманды(ВозможныеКоманды().СобратьИзИсходниковТекущуюКонфигурацию);
    Парсер.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "ПутьКИсходникам");
    
    Парсер.ДобавитьКоманду(ОписаниеКоманды);
КонецПроцедуры


Процедура ДобавитьОписаниеКомандыРазобратьНаИсходники(Знач Парсер)
    ОписаниеКоманды = Парсер.ОписаниеКоманды(ВозможныеКоманды().РазобратьНаИсходники);
    Парсер.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "ПутьКCF");
    Парсер.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "ПутьКИсходникам");
    
    Парсер.ДобавитьКоманду(ОписаниеКоманды);
КонецПроцедуры

Процедура ДобавитьОписаниеКомандыРазобратьНаИсходникиТекущуюКонфигурацию(Знач Парсер)
    ОписаниеКоманды = Парсер.ОписаниеКоманды(ВозможныеКоманды().РазобратьНаИсходникиТекущуюКонфигурацию);
    Парсер.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "ПутьКИсходникам");
    Парсер.ДобавитьКоманду(ОписаниеКоманды);
КонецПроцедуры

Процедура ДобавитьОписаниеКомандыРазобратьРасширение(Знач Парсер)
    ОписаниеКоманды = Парсер.ОписаниеКоманды(ВозможныеКоманды().РазобратьРасширение);
    Парсер.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "НаименованиеРасширения");
    Парсер.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "ПутьКИсходникам");
    Парсер.ДобавитьКоманду(ОписаниеКоманды);
КонецПроцедуры

Процедура ДобавитьОписаниеКомандыСобратьРасширение(Знач Парсер)
    ОписаниеКоманды = Парсер.ОписаниеКоманды(ВозможныеКоманды().СобратьРасширение);
    Парсер.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "ПутьКИсходникам");
    Парсер.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "НаименованиеРасширения");
    Парсер.ДобавитьКоманду(ОписаниеКоманды);
КонецПроцедуры


Процедура ДобавитьОписаниеКомандыЮнитТест(Знач Парсер)
    ОписаниеКоманды = Парсер.ОписаниеКоманды(ВозможныеКоманды().ЮнитТест);
    Парсер.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "ПутьВходящихДанных");
    Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--pathxunit", "Путь к инструментам");
    Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--reportxunit", "Путь к каталогу с отчетом");
    Парсер.ДобавитьКоманду(ОписаниеКоманды);
КонецПроцедуры

Процедура ДобавитьОписаниеКомандыТестироватьПоведение(Знач Парсер)
    ОписаниеКоманды = Парсер.ОписаниеКоманды(ВозможныеКоманды().ТестироватьПоведение);
    Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--pathvanessa", "Путь к инструментам");
    Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--vanessasettings", "Путь к файлам настроек");
    Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--workspace", "Путь каталогу проекта, по умолчанию текущий.");
    Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--additional", "Дополнительные параметры для запуска предприятия.");
    Парсер.ДобавитьКоманду(ОписаниеКоманды);
КонецПроцедуры

Процедура ДобавитьОписаниеКомандыПомощь(Знач Парсер)
    ОписаниеКоманды = Парсер.ОписаниеКоманды(ВозможныеКоманды().Помощь);
    Парсер.ДобавитьКоманду(ОписаниеКоманды);
КонецПроцедуры

Процедура ДобавитьОписаниеКомандыДекомпилироватьEpf(Знач Парсер)
    ОписаниеКоманды = Парсер.ОписаниеКоманды(ВозможныеКоманды().ДекомпилироватьEpf);
    Парсер.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "ПутьВходящихДанных");
    Парсер.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "ВыходнойКаталог");
    //Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, "--recursive");
    Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--outDir", "базовый путь распаковки");
    Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--inDir", "базовый путь к бинарным данным");
    Парсер.ДобавитьКоманду(ОписаниеКоманды);
КонецПроцедуры

Процедура ДобавитьОписаниеКомандыСобратьEpf(Знач Парсер)
    ОписаниеКоманды = Парсер.ОписаниеКоманды(ВозможныеКоманды().СобратьEpf);
    Парсер.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "ПутьВходящихДанных");
    Парсер.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "ВыходнойКаталог");
    //Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, "--recursive");
    Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--outDir", "базовый путь распаковки");
    Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--inDir", "базовый путь к бинарным данным");
    Парсер.ДобавитьКоманду(ОписаниеКоманды);
КонецПроцедуры

Процедура ДобавитьОписаниеКомандыОбновитьБазу(Знач Парсер)
    ОписаниеКоманды = Парсер.ОписаниеКоманды(ВозможныеКоманды().ОбновитьБазу);
    Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--uccode", "Ключ разрешения запуска");
    Парсер.ДобавитьКоманду(ОписаниеКоманды);
КонецПроцедуры

Процедура ДобавитьОписаниеКомандыЗапуститьВРежимеПредприятия(Знач Парсер)
    ОписаниеКоманды = Парсер.ОписаниеКоманды(ВозможныеКоманды().ЗапуститьВРежимеПредприятия);
    Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--uccode", "Ключ разрешения запуска");
    Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--command", "Строка передаваемя в ПараметрыЗапуска, /C''");
    Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--execute", "Путь обработки для запуска");
    Парсер.ДобавитьКоманду(ОписаниеКоманды);
КонецПроцедуры

Процедура ДобавитьОписаниеКомандыОбновитьИзХранилища(Знач Парсер)
    ОписаниеКоманды = Парсер.ОписаниеКоманды(ВозможныеКоманды().ОбновитьИзХранилища);
    Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--storage-name", "Строка подключения к хранилище");
    Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--storage-user", "Пользователь хранилища");
    Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--storage-pwd", "Пароль");
    Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--storage-ver",	"Номер версии, по умолчанию берем последнюю");
    Парсер.ДобавитьКоманду(ОписаниеКоманды);
КонецПроцедуры

Процедура ДобавитьОписаниеКомандыСледить(Знач Парсер) 
    ОписаниеКоманды = Парсер.ОписаниеКоманды(ВозможныеКоманды().Следить);
    Парсер.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "ПутьКФайлуНастроек");
    Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--filter", "Фильтр настроек для слежения");
    Парсер.ДобавитьКоманду(ОписаниеКоманды);
КонецПроцедуры //ДобавитьОписаниеКомандыСледить

Процедура ДобавитьОписаниеКомандыКонфигуратор(Знач Парсер) 
    ОписаниеКоманды = Парсер.ОписаниеКоманды(ВозможныеКоманды().Конфигуратор);
    Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--storage-name", "Строка подключения к хранилище");
    Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--storage-user", "Пользователь хранилища");
    Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--storage-pwd", "Пароль");
    Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, "--dev", "Признак dev режима, автоматом используем сервисную базу");

    Парсер.ДобавитьКоманду(ОписаниеКоманды);
КонецПроцедуры //ДобавитьОписаниеКомандыКонфигуратор

    
Процедура Инициализация()
    СистемнаяИнформация = Новый СистемнаяИнформация;
    ЭтоWindows = Найти(ВРег(СистемнаяИнформация.ВерсияОС), "WINDOWS") > 0;

    Попытка 
         КаталогЛогов = СокрЛП(ЗапуститьПроцесс("git rev-parse --show-toplevel"));
    Исключение
        КаталогЛогов = ОбъединитьПути(КаталогВременныхФайлов(), ИмяСкрипта());
        СоздатьКаталог(КаталогЛогов);
    КонецПопытки;  

    Лог = Логирование.ПолучитьЛог("oscript.app.vanessa-runner");
    УровеньЛога = УровниЛога.Отладка;
    РежимРаботы = СистемнаяИнформация.ПолучитьПеременнуюСреды("RUNNER_ENV");
    Если ЗначениеЗаполнено(РежимРаботы) И РежимРаботы = "production" Тогда
        УровеньЛога = УровниЛога.Информация;
    Иначе
        Аппендер = Новый ВыводЛогаВФайл();
        Аппендер.ОткрытьФайл(ОбъединитьПути(КаталогЛогов, ИмяСкрипта()+".log"));
        Лог.ДобавитьСпособВывода(Аппендер);
    КонецЕсли;
    
    Лог.УстановитьУровень(УровеньЛога);
    Лог.УстановитьРаскладку(ЭтотОбъект);
    
    ВыводПоУмолчанию = Новый ВыводЛогаВКонсоль();
    Лог.ДобавитьСпособВывода(ВыводПоУмолчанию);
    
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////
// РЕАЛИЗАЦИЯ КОМАНД

Функция ОбернутьПутьВКавычки(Знач Путь)

    Результат = Путь;
    Если Прав(Результат, 1) = "\" Тогда
        Результат = Лев(Результат, СтрДлина(Результат) - 1);
    КонецЕсли;

    Результат = """" + Результат + """";

    Возврат Результат;

КонецФункции

Функция УбратьКавычкиВокругПути(Путь)
    //NOTICE: https://github.com/xDrivenDevelopment/precommit1c 
    //Apache 2.0 
    ОбработанныйПуть = Путь;

    Если Лев(ОбработанныйПуть, 1) = """" Тогда
        ОбработанныйПуть = Прав(ОбработанныйПуть, СтрДлина(ОбработанныйПуть) - 1);
    КонецЕсли;
    Если Прав(ОбработанныйПуть, 1) = """" Тогда
        ОбработанныйПуть = Лев(ОбработанныйПуть, СтрДлина(ОбработанныйПуть) - 1);
    КонецЕсли;
    
    Возврат ОбработанныйПуть;
    
КонецФункции

Функция ПолныйПуть(Знач Путь, Знач КаталогПроекта ="")
    Перем ФайлПуть;
    
    Если ПустаяСтрока(Путь) Тогда 
        Возврат Путь;
    КонецЕсли;

    Если ПустаяСтрока(КаталогПроекта) Тогда
        КаталогПроекта = КорневойПутьПроекта;
    КонецЕсли;

    Если Лев(Путь, 1) = "." Тогда 
        Путь = ОбъединитьПути(КаталогПроекта, Путь);
    КонецЕсли;
    
    ФайлПуть = Новый Файл(Путь);

    Возврат ФайлПуть.ПолноеИмя
    
КонецФункции //ПолныйПуть()

Функция ПереопределитьПолныйПутьВСтрокеПодключения(Знач СтрокаПодключения) 
    Лог.Отладка(СтрокаПодключения);
    Если Лев(СтрокаПодключения,2)="/F" Тогда
        ПутьКБазе = УбратьКавычкиВокругПути(Сред(СтрокаПодключения, 3));
        ПутьКБазе = ПолныйПуть(ПутьКБазе);
        СтрокаПодключения = "/F""" + ПутьКБазе + """"
    КонецЕсли;
    Возврат СтрокаПодключения;
КонецФункции // ПереопределитьПолныйПутьВСтрокеПодключения()

Функция КаталогПроекта()
    ФайлИсточника = Новый Файл(ТекущийСценарий().Источник);
    Возврат ФайлИсточника.Путь;
КонецФункции

Функция ИмяСкрипта()
    ФайлИсточника = Новый Файл(ТекущийСценарий().Источник);
    Возврат ФайлИсточника.ИмяБезРасширения;
КонецФункции

Функция Форматировать(Знач Уровень, Знач Сообщение) Экспорт

    Возврат СтрШаблон("%1: %2 - %3", ТекущаяДата(), УровниЛога.НаименованиеУровня(Уровень), Сообщение);

КонецФункции

Инициализация();

Если ЗапускВКоманднойСтроке() Тогда
    ЗавершитьРаботу(КодВозврата);
КонецЕсли;

РезультатыОбработкиВнешнихОбработок = Новый Соответствие;