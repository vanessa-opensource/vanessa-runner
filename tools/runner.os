//This Source Code Form is subject to the terms of the Mozilla
//Public License, v. 2.0. If a copy of the MPL was not distributed
//with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
#Использовать cmdline
#Использовать logos
#Использовать tempfiles
#Использовать asserts
#Использовать v8runner
#Использовать strings
#Использовать json
#Использовать 1commands
#Использовать fs

#Использовать "../src"

Перем Лог;
Перем КодВозврата;
Перем мВозможныеКоманды;
Перем ЭтоWindows;
Перем КаталогЛогов;
Перем КорневойПутьПроекта;
Перем ЭтоЗапускВКоманднойСтроке;
Перем ОтключитьОтладочныеЛоги;
Перем УпаковщикВнешнихОбработок;

Функция Версия() Экспорт
	Возврат ПараметрыСистемы.ВерсияПродукта();
КонецФункции // Версия()

Функция ВозможныеКоманды()
	
	Если мВозможныеКоманды = Неопределено Тогда
		//Работаем в 8.3.8, внешние обработки как исходники и только исходники. 
		мВозможныеКоманды = Новый Структура;
		// мВозможныеКоманды.Вставить("ЮнитТест", "xunit");
		// мВозможныеКоманды.Вставить("ТестироватьПоведение", "vanessa");
		// мВозможныеКоманды.Вставить("Тестирование", "tests");
		//Работаем с исходниками конфигурации
		мВозможныеКоманды.Вставить("СобратьИзИсходников", "compile"); //1
		мВозможныеКоманды.Вставить("СобратьИзИсходниковТекущуюКонфигурацию", "compilecurrent"); //1
		мВозможныеКоманды.Вставить("РазобратьНаИсходникиТекущуюКонфигурацию", "decompilecurrent"); //1
		мВозможныеКоманды.Вставить("РазобратьНаИсходники", "decompile"); //1
		// мВозможныеКоманды.Вставить("СобратьТолькоИзмененные", "compilediff"); //изменения определяем из различий в git
		//Работаем с расширениями.
		// мВозможныеКоманды.Вставить("РазобратьРасширение", "decompileext");
		// мВозможныеКоманды.Вставить("СобратьРасширение", "compileext");
		// мВозможныеКоманды.Вставить("ЗагрузитьРасширение", "loadext");
		//Работаем с внешними обработками
		// мВозможныеКоманды.Вставить("ДекомпилироватьEpf", "decompileepf");
		мВозможныеКоманды.Вставить("СобратьEpf", "compileepf");
		// мВозможныеКоманды.Вставить("ОбновитьБазу", "updatedb");
		// мВозможныеКоманды.Вставить("ЗапуститьВРежимеПредприятия", "run");
		
		// мВозможныеКоманды.Вставить("ОбновитьИзХранилища", "loadrepo");
		мВозможныеКоманды.Вставить("Следить", "watch");
		мВозможныеКоманды.Вставить("Конфигуратор", "designer");

		мВозможныеКоманды.Вставить("КонвертироватьФайлы", "convertfiles");
		
		мВозможныеКоманды.Вставить("ПоказатьВерсию", "version");
		мВозможныеКоманды.Вставить("Помощь", "--help");
	КонецЕсли;
	
	Возврат мВозможныеКоманды;

КонецФункции

Процедура ВывестиСправку()
	ПоказатьВерсию();
	
	Сообщить("Утилита запуска различных тестов и задач");
	Сообщить(" ");
	Сообщить("Параметры командной строки:");

	Сообщить("  compile inputPath outputPath");
	Сообщить("      собирает из исходников cf файл, указываем каталог откуда брать и каталог куда сохранить cf");
	
	Сообщить("  decompile inputPath outputPath");
	Сообщить("      разбираем cf файл на исходники");
	
	Сообщить("  decompilecurrent outputPath");
	Сообщить("      разбираем из текущей базы cf на исходники");
	
	Сообщить("  compilecurrent inputPath");
	Сообщить("       загружаем исходники в текущую базу");
	
	Сообщить("  compileepf srcPath epfPath");
	Сообщить("       собираем внешние обработки из каталога");
	
	Сообщить("  loadrepo - [--storage] обновление конфигурации из хранилища 1С");
	Сообщить("  watch    - следить за изменением файлов и автоматически компилировать/декомпилировать внешние обработки");
	Сообщить("  designer - запустить конфигуратор для основной базы разработки и для сервисной базы");
	Сообщить("  convertfiles inputPath");
	Сообщить("       конвертировать файлы в новую или старую версию");
	 
	Сообщить(" общие для всех параметры");
	Сообщить("       --v8version Маска версии платформы (8.3, 8.3.5, 8.3.6.2299 и т.п.)");
	Сообщить("       --ibname  [env RUNNER_IBNAME] строка подключения к базе данных");
	Сообщить("       --db-user [env RUNNER_DBUSER] имя пользователя для подключения к базе");
	Сообщить("       --db-pwd  [env RUNNER_DBPWD] пароль пользователя");
	
	Сообщить("  version");
	Сообщить("    Показ только версии продукта");

	Сообщить("  --help");
	Сообщить("    Показ этого экрана");
	
КонецПроцедуры

Функция ЗапуститьПроцесс(Знач СтрокаВыполнения)
	Перем ПаузаОжиданияЧтенияБуфера;
	
	ПаузаОжиданияЧтенияБуфера = 10;
	
	Лог.Отладка(СтрокаВыполнения);
	Процесс = СоздатьПроцесс(СтрокаВыполнения,,Истина);
	Процесс.Запустить();
	
	ТекстБазовый = "";
	Счетчик = 0; МаксСчетчикЦикла = 100000;
	
	Пока Истина Цикл 
		Текст = Процесс.ПотокВывода.Прочитать();
		Лог.Отладка("Цикл ПотокаВывода "+Текст);
		Если Текст = Неопределено ИЛИ ПустаяСтрока(СокрЛП(Текст))  Тогда 
			Прервать;
		КонецЕсли;
		Счетчик = Счетчик + 1;
		Если Счетчик > МаксСчетчикЦикла Тогда 
			Прервать;
		КонецЕсли;
		ТекстБазовый = ТекстБазовый + Текст;
		
		sleep(ПаузаОжиданияЧтенияБуфера); //Подождем, надеюсь буфер не переполниться. 
		
	КонецЦикла;
	
	Процесс.ОжидатьЗавершения();
	
	Если Процесс.КодВозврата = 0 Тогда
		Текст = Процесс.ПотокВывода.Прочитать();
		ТекстБазовый = ТекстБазовый + Текст;
		Лог.Отладка(ТекстБазовый);
		Возврат ТекстБазовый;
	Иначе
		ВызватьИсключение "Сообщение от процесса 
		|" + Процесс.ПотокОшибок.Прочитать();
	КонецЕсли;	

КонецФункции //ЗапуститьПроцесс

Процедура УбедитьсяЧтоФайлИлиКаталогСуществует(Знач Путь)

	Файл = Новый Файл(Путь);
	Если Не Файл.Существует() Тогда
		ВызватьИсключение СтроковыеФункции.ПодставитьПараметрыВСтроку("Файл <%1> должен существовать", Путь);
	КонецЕсли;

КонецПроцедуры

Функция ДобавитьПереименование(Знач Переименования, Знач Источник, Знач Приемник)

	СтрокаПереименования = Переименования.Добавить();
	СтрокаПереименования.Источник = Источник;
	СтрокаПереименования.Приемник = Приемник;

	Возврат СтрокаПереименования;

КонецФункции

// Выполняет перенос файлов из каталога плоской выгрузки в каталог с иерархической структурой метаданных.
//
Процедура РазложитьМодули1СПоПапкамСогласноИерархииМетаданных(Знач КаталогПлоскойВыгрузки, Знач КаталогИерархическойВыгрузки, Знач Формат) Экспорт

	Лог.Отладка("Раскладываем модули по папкам согласно иерархии метаданных");

	КэшПереименований = Новый Соответствие;

	УбедитьсяЧтоФайлИлиКаталогСуществует(КаталогПлоскойВыгрузки);

	Если ПустаяСтрока(КаталогИерархическойВыгрузки) Тогда
		ВызватьИсключение "Не задан каталог выгрузки модулей по иерархии";
	КонецЕсли;

	ФайлВыгрузкиКаталог = Новый Файл(КаталогИерархическойВыгрузки);
	Если Не ФайлВыгрузкиКаталог.Существует() Тогда
		СоздатьКаталог(КаталогИерархическойВыгрузки);
		//ЗарегистрироватьВременныйФайл(КаталогИерархическойСтруктурыМодулей); TODO выяснить почему временный?
	КонецЕсли;

	Переименования = Новый ТаблицаЗначений;
	Переименования.Колонки.Добавить("Источник");
	Переименования.Колонки.Добавить("Приемник");

	ИскатьВПодкаталогах = Истина;
	СписокФайлов = НайтиФайлы(КаталогПлоскойВыгрузки, ПолучитьМаскуВсеФайлы(), ИскатьВПодкаталогах);
	Лог.Отладка("Найдено файлов выгрузки: "+СписокФайлов.Количество()+" шт.");
	Для Каждого Файл Из СписокФайлов Цикл
		ИмяФайлаДляПереименования = Файл.Имя;

			ИмяНовогоФайла = СтрЗаменить(Файл.ПолноеИмя, КаталогПлоскойВыгрузки, "");
			ИмяНовогоФайла = ?(Лев(ИмяНовогоФайла, 1) ="/", Сред(ИмяНовогоФайла, 2), ИмяНовогоФайла);
			ИмяНовогоФайла = ?(Лев(ИмяНовогоФайла, 1) ="\", Сред(ИмяНовогоФайла, 2), ИмяНовогоФайла);
			Если Файл.ЭтоКаталог() Тогда
				ИмяКаталога = ОбъединитьПути(КаталогИерархическойВыгрузки, ИмяНовогоФайла);
				ФайлКаталога = Новый Файл(ИмяКаталога);
				Если ФайлКаталога.Существует() = Ложь Тогда
					СоздатьКаталог(ИмяКаталога);
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			ИмяФайлаДляПереименования = ИмяНовогоФайла;

		НовыйФайл = Новый Файл(ОбъединитьПути(КаталогИерархическойВыгрузки, ИмяНовогоФайла));
		НовыйКаталог = Новый Файл(НовыйФайл.Путь);
		Если НЕ НовыйКаталог.Существует() Тогда
			СоздатьКаталог(НовыйКаталог.ПолноеИмя);
		КонецЕсли;

		ДобавитьПереименование(Переименования,ИмяФайлаДляПереименования,ИмяНовогоФайла);

		КопироватьФайл(Файл.ПолноеИмя, НовыйФайл.ПолноеИмя);

		Если Нрег(Прав(Файл.ПолноеИмя, 5)) = ".form" Или Нрег(Файл.Имя) = "form.bin" Тогда
			КаталогФормы = ОбъединитьПути(НовыйКаталог.ПолноеИмя, НовыйФайл.ИмяБезРасширения);
			ФайлКаталога = Новый Файл(КаталогФормы);
			Если ФайлКаталога.Существует() Тогда
				УдалитьФайлы(ФайлКаталога.ПолноеИмя, ПолучитьМаскуВсеФайлы());
			КонецЕсли; 
			СоздатьКаталог(КаталогФормы);
			УпаковщикМетаданных.РаспаковатьКонтейнерМетаданных(НовыйФайл.ПолноеИмя, КаталогФормы);
		КонецЕсли;

	КонецЦикла;

	ТекстовыйДокумент = Новый ЗаписьТекста(ОбъединитьПути(КаталогИерархическойВыгрузки, "renames.txt"));
	Для Каждого ЭлементСтроки Из Переименования Цикл
		ТекстовыйДокумент.ЗаписатьСтроку(ЭлементСтроки.Источник+"-->"+СтрЗаменить(ЭлементСтроки.Приемник, "/", "\"));
	КонецЦикла;
	ТекстовыйДокумент.Закрыть();

КонецПроцедуры

Процедура РазобратьНаИсходникиТекущуюКонфигурацию(Каталог, Знач СтрокаПодключения="", Знач Пользователь="", Знач Пароль="", Знач ВерсияПлатформы="")

	Конфигуратор = Новый УправлениеКонфигуратором();
		
	КаталогВременнойИБ = ВременныеФайлы.СоздатьКаталог();
	Конфигуратор.КаталогСборки(КаталогВременнойИБ);
	
	КаталогРаспаковки = ВременныеФайлы.СоздатьКаталог();
	
	Если НЕ ПустаяСтрока(СтрокаПодключения) Тогда
		Конфигуратор.УстановитьКонтекст(СтрокаПодключения, Пользователь, Пароль);
	КонецЕсли;
	
	Если Не ПустаяСтрока(ВерсияПлатформы) Тогда 
		Конфигуратор.ИспользоватьВерсиюПлатформы(ВерсияПлатформы);
	КонецЕсли;
	
	ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();
	ПараметрыЗапуска.Добавить("/Visible");
	ПараметрыЗапуска.Добавить("/DumpConfigToFiles """ + КаталогРаспаковки + """");
	Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);
	
	РазложитьМодули1СПоПапкамСогласноИерархииМетаданных(КаталогРаспаковки, Каталог, ""); 
	
КонецПроцедуры

Процедура РазобратьФайлКонфигурации(Знач ФайлКонфигурации, Знач ВыходнойКаталог, Знач ВерсияПлатформы="")

	ОбъектФайл = Новый Файл(ФайлКонфигурации);
	Если ОбъектФайл.Существует() = Ложь Тогда
		ВызватьИсключение СтроковыеФункции.ПодставитьПараметрыВСтроку("Файл конфигурации %1 не найден", ФайлКонфигурации.ПолноеИмя);
	КонецЕсли;

	КаталогПлоскойВыгрузки = ВременныеФайлы.СоздатьКаталог();
	
	КаталогВыгрузки = Новый Файл(ВыходнойКаталог); 
	Если КаталогВыгрузки.Существует() = Ложь Тогда
		СоздатьКаталог(ВыходнойКаталог);
	КонецЕсли;
	
	Конфигуратор = Новый УправлениеКонфигуратором();
	КаталогВременнойИБ = ВременныеФайлы.СоздатьКаталог();
	Конфигуратор.КаталогСборки(КаталогВременнойИБ);
	
	Если Не ПустаяСтрока(ВерсияПлатформы) Тогда 
		Конфигуратор.ИспользоватьВерсиюПлатформы(ВерсияПлатформы);
	КонецЕсли;
	
	Конфигуратор.ЗагрузитьКонфигурациюИзФайла(ФайлКонфигурации, Ложь);
			
	РазобратьНаИсходникиТекущуюКонфигурацию(ВыходнойКаталог, Конфигуратор.ПолучитьПараметрыЗапуска().Получить(1));
	
	ВременныеФайлы.УдалитьФайл(КаталогПлоскойВыгрузки);
	ВременныеФайлы.УдалитьФайл(КаталогВременнойИБ);

КонецПроцедуры

Функция ПодготовитьКаталогЗагрузкиПоФайлуПереименований(ВходнойКаталог, ФайлПереименований)
	Перем БылаОшибка;
	КаталогВременнойСтруктуры = ВременныеФайлы.СоздатьКаталог();
	Текст = Новый ЧтениеТекста(ФайлПереименований);
	СоответствиеФайлов = Новый Соответствие();
	БылаОшибка = Ложь;
	Стр = Текст.ПрочитатьСтроку();
	Пока Стр <> Неопределено Цикл // строки читаются до символа перевода строки
		Если ЭтоWindows = Ложь Тогда 
			Стр = СтрЗаменить(Стр, "\", "/");
		КонецЕсли;
		
		Индекс = Найти(Стр, "-->");
		Если Индекс > 0 Тогда
			ИмяНовогоФайла = ОбъединитьПути(КаталогВременнойСтруктуры, Лев(Стр, Индекс-1));
			ФайлНовый = Новый Файл(ИмяНовогоФайла); 
			КаталогНовый = Новый Файл(ФайлНовый.Путь);
			Если НЕ КаталогНовый.Существует() Тогда 
				СоздатьКаталог(ФайлНовый.Путь);
			КонецЕсли;
			ПутьФайлСтарый = ОбъединитьПути(ВходнойКаталог, Сред(Стр, Индекс+3));
			ФайлСтарый = Новый Файл(ПутьФайлСтарый);
			Если ФайлСтарый.Существует() Тогда
				СоответствиеФайлов.Вставить(ФайлСтарый.ПолноеИмя, Истина);
				КопироватьФайл(ПутьФайлСтарый, ИмяНовогоФайла);
				Если Нрег(Прав(ФайлНовый.ПолноеИмя, 5)) = ".form" Или Нрег(ФайлНовый.Имя) = "form.bin" Тогда
					КаталогФормыСтарый = ОбъединитьПути(ФайлСтарый.Путь, ФайлНовый.ИмяБезРасширения);
					КаталогФормыНовый = ОбъединитьПути(ФайлНовый.Путь, ФайлНовый.ИмяБезРасширения);
					СоздатьКаталог(КаталогФормыНовый);
					МассивФайлов = НайтиФайлы(КаталогФормыСтарый, ПолучитьМаскуВсеФайлы());
					Для Каждого Элемент из МассивФайлов Цикл
						Лог.Отладка("Копируем "+Элемент.ПолноеИмя + "--> "+ОбъединитьПути(КаталогФормыНовый, Элемент.Имя)); 
						КопироватьФайл(Элемент.ПолноеИмя, ОбъединитьПути(КаталогФормыНовый, Элемент.Имя));
					КонецЦикла;
						
					УпаковщикМетаданных.УпаковатьКонтейнерМетаданных(КаталогФормыНовый, ФайлНовый.ПолноеИмя);
					//УпаковщикМетаданных.РаспаковатьКонтейнерМетаданных(НовыйФайл.ПолноеИмя, КаталогФормы)
				КонецЕсли;
			Иначе
				БылаОшибка = Истина;	
			КонецЕсли;
		КонецЕсли;
		
		Стр = Текст.ПрочитатьСтроку();
		
	КонецЦикла;

	Если БылаОшибка = Истина Тогда
		МассивФайлов = НайтиФайлы(ВходнойКаталог, ПолучитьМаскуВсеФайлы(), Истина);
		Для Каждого Элемент из МассивФайлов Цикл 
			Если СоответствиеФайлов.Получить(Элемент.ПолноеИмя) = Неопределено Тогда 
				ИмяНовогоФайла = ОбъединитьПути(КаталогВременнойСтруктуры, Сред(Элемент.ПолноеИмя, СтрДлина(ВходнойКаталог)));
				ФайлНовый = Новый Файл(ИмяНовогоФайла);
				КаталогНовый = Новый Файл(ФайлНовый.Путь);
				Если НЕ КаталогНовый.Существует() Тогда 
					СоздатьКаталог(ФайлНовый.Путь);
				КонецЕсли;
				КопироватьФайл(Элемент.ПолноеИмя, ИмяНовогоФайла);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат КаталогВременнойСтруктуры
	
КонецФункции

Процедура СобратьИзИсходниковТекущуюКонфигурацию(Знач ВходнойКаталог,  Знач СтрокаПодключения="", Знач Пользователь="", Знач Пароль="", Знач ВерсияПлатформы="", Знач СписокФайловДляЗагрузки = "", Знач СниматьСПоддержки = Истина) Экспорт 
	Перем НеобходимоОбновлять, ИмяВременногоФайла;
	НеобходимоОбновлять = Ложь;
	КаталогВыгрузки = Новый Файл(ВходнойКаталог); 
	Если КаталогВыгрузки.Существует() = Ложь Тогда
		ВызватьИсключение СтроковыеФункции.ПодставитьПараметрыВСтроку("Каталог исходников %1 не найден", КаталогВыгрузки.ПолноеИмя);
	КонецЕсли;
	
	ФайлПереименований = Новый Файл(ОбъединитьПути(ВходнойКаталог, "renames.txt"));
	Если ФайлПереименованийВалиден(ФайлПереименований) Тогда 
		КаталогЗагрузки = ПодготовитьКаталогЗагрузкиПоФайлуПереименований(ВходнойКаталог, ФайлПереименований.ПолноеИмя);
	Иначе
		КаталогЗагрузки = ВходнойКаталог;
	КонецЕсли;
	
	Конфигуратор = Новый УправлениеКонфигуратором();
	
	КаталогВременнойИБ = ВременныеФайлы.СоздатьКаталог();
	Конфигуратор.КаталогСборки(КаталогВременнойИБ);
		
	Если НЕ ПустаяСтрока(СтрокаПодключения) Тогда
		Конфигуратор.УстановитьКонтекст(СтрокаПодключения, Пользователь, Пароль);
		Если Лев(СтрокаПодключения,2)="/F" Тогда
			ПутьКБазе = ОбщиеМетоды.УбратьКавычкиВокругПути(Сред(СтрокаПодключения,3, СтрДлина(СтрокаПодключения)-2));
			ФайлБазы = Новый Файл(ПутьКБазе);
			Если НЕ ФайлБазы.Существует() Тогда
				Конфигуратор.СоздатьФайловуюБазу(ФайлБазы.ПолноеИмя);
				НеобходимоОбновлять = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ВерсияПлатформы) Тогда 
		Конфигуратор.ИспользоватьВерсиюПлатформы(ВерсияПлатформы);
	КонецЕсли;
	
	Если СниматьСПоддержки = Истина Тогда
		ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();
		ПараметрыЗапуска.Добавить("/ConfigurationRepositoryUnbindCfg -force");
		Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);

		ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();
		ПараметрыЗапуска.Добавить("/ManageCfgSupport -disableSupport -force");
		Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);

	КонецЕсли;
	
	ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();
	ПараметрыЗапуска.Добавить("/LoadConfigFromFiles """ + КаталогЗагрузки + """");
	Если НЕ ПустаяСтрока(СписокФайловДляЗагрузки) Тогда
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
		Запись = Новый ЗаписьТекста(ИмяВременногоФайла);
		Запись.Записать(СписокФайловДляЗагрузки);
		Запись.Закрыть();
		ПараметрыЗапуска.Добавить("-listfile """ + ИмяВременногоФайла + """");
		
		Если Лог.Уровень() <= УровниЛога.Отладка  Тогда
			Лог.Отладка("Загружаем по списку файлов:");
			Чтение = Новый ЧтениеТекста(ИмяВременногоФайла);
			Стр = Чтение.ПрочитатьСтроку();
			Пока Стр <> Неопределено Цикл // строки читаются до символа перевода строки
				Лог.Отладка(Стр);
				Стр = Чтение.ПрочитатьСтроку();
			КонецЦикла;
			Чтение.Закрыть();
		КонецЕсли;
	КонецЕсли;
	Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);
		
	Если НеобходимоОбновлять Тогда
		Конфигуратор.ОбновитьКонфигурациюБазыДанных(Ложь, Истина);
	КонецЕсли;
	
	ВременныеФайлы.УдалитьФайл(КаталогВременнойИБ);
	
КонецПроцедуры

Функция ФайлПереименованийВалиден(Знач ФайлПереименований)
	Рез = Ложь;
	Если ФайлПереименований.Существует() Тогда
		ПутьВыгрузки = ФайлПереименований.Путь;
		ФайлКонфигурации = Новый Файл(ОбъединитьПути(ПутьВыгрузки, "Configuration.xml"));
		Если ФайлКонфигурации.ПолучитьВремяИзменения() <= ФайлПереименований.ПолучитьВремяИзменения() Тогда
			Рез = Истина;

			Лог.Отладка("Файл конфигурации %1 создан не позже файла переименований %2", 
				ФайлКонфигурации.Имя, ФайлПереименований.Имя);
			Лог.Отладка("Данные о переименованиях использовать можно.");
		Иначе
			Лог.Отладка("Файл конфигурации %1 создан позже файла переименований %2", 
				ФайлКонфигурации.Имя, ФайлПереименований.Имя);
			Лог.Отладка("	Дата/время файла конфигурации %1 - %2", 
				ФайлКонфигурации.Имя, ФайлКонфигурации.ПолучитьВремяИзменения());
			Лог.Отладка("	Дата/время файла переименований %1 - %2", 
				ФайлПереименований.Имя, ФайлПереименований.ПолучитьВремяИзменения());
			Лог.Отладка("Файл переименований использовать нельзя, использую только штатную загрузку через Конфигуратор.");
		КонецЕсли;
	Иначе
		Лог.Отладка("Файл переименований %1 не существует, использую только штатную загрузку через Конфигуратор.",
			ФайлПереименований.Имя);
	КонецЕсли;
	Возврат Рез;
КонецФункции

Процедура СобратьФайлКонфигурации(Знач ВходнойКаталог, Знач ФайлКонфигурации, Знач ВерсияПлатформы="") 
	
	Конфигуратор = Новый УправлениеКонфигуратором();
		
	КаталогВременнойИБ = ВременныеФайлы.СоздатьКаталог();
	Конфигуратор.КаталогСборки(КаталогВременнойИБ);
	
	Если Не ПустаяСтрока(ВерсияПлатформы) Тогда 
		Конфигуратор.ИспользоватьВерсиюПлатформы(ВерсияПлатформы);
	КонецЕсли;
	
	КаталогВременнойБазы = ВременныеФайлы.СоздатьКаталог();
	Конфигуратор.СоздатьФайловуюБазу(КаталогВременнойБазы);
	Конфигуратор.УстановитьКонтекст("/F""" + КаталогВременнойБазы + """", "", "");
	
	СобратьИзИсходниковТекущуюКонфигурацию(ВходнойКаталог, Конфигуратор.ПолучитьПараметрыЗапуска().Получить(1));
	ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();
	ПараметрыЗапуска.Добавить("/Visible");
	ПараметрыЗапуска.Добавить("/DumpCfg """ + ФайлКонфигурации + """");
	Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);
	
КонецПроцедуры

Процедура Компилировать(Знач Путь, Знач КаталогВыгрузки, Знач СтрокаПодключения = "", Знач Пользователь = "", Знач Пароль = "", Знач ВерсияПлатформы = "") Экспорт
	Перем КаталогВременнойИБ;
	
	Лог.Информация("Собираю внешние обработки из исходников в %1, назначение %2",
		ФС.ОтносительныйПуть(ТекущийКаталог(), Путь), ФС.ОтносительныйПуть(ТекущийКаталог(), КаталогВыгрузки));

	Рекурсивно = Истина;
	ПутьКИсходникам = ОбъединитьПути(ТекущийКаталог(), Путь);
 
	ПапкаИсходников = Новый Файл(ПутьКИсходникам);
	Лог.Отладка("Путь к исходникам %1", ПапкаИсходников.ПолноеИмя);
	
	Если ПустаяСтрока(СтрокаПодключения) Тогда 
		Конфигуратор = Новый УправлениеКонфигуратором();
		КаталогВременнойИБ = ПолучитьИмяВременногоФайла("tmp");
		СоздатьКаталог(КаталогВременнойИБ);
	
		Конфигуратор.СоздатьФайловуюБазу(КаталогВременнойИБ);
		СтрокаПодключения = "/F""" + КаталогВременнойИБ + """";
	КонецЕсли;

	Ожидаем.Что(ПапкаИсходников.Существует(), "Папка " + ПутьКИсходникам + " должна существовать").ЭтоИстина();
	Если ПапкаИсходников.ЭтоКаталог() = Ложь Тогда
		ПутьКИсходникам = Новый Файл(ПапкаИсходников.ПолноеИмя).ПолноеИмя;
		//Нам передали путь к измененому файлу, необходимо определить корневую папку. 
		Для Счетчик = 0 По 5 Цикл
			ПутьКИсходникам = Новый Файл(ПутьКИсходникам).Путь;
			Лог.Отладка(ПутьКИсходникам);
			Если ЭтоПутьКИсходнымКодамОбработок(ПутьКИсходникам) Тогда
				ПапкаИсходников = Новый Файл(ПутьКИсходникам);
				Рекурсивно = Ложь;
				Прервать;
			КонецЕсли;
			ПутьКИсходникам = Новый Файл(ПутьКИсходникам).Путь;
		КонецЦикла;
		Ожидаем.Что(Рекурсивно, "Корневой файл обработки должен существовать " + ПутьКИсходникам).ЭтоЛожь();
		Лог.Отладка("Нашли новый путь к исходникам %1", ПутьКИсходникам);
	КонецЕсли;
	
	Ожидаем.Что(ПапкаИсходников.ЭтоКаталог(), "Путь " + ПутьКИсходникам + "должен быть каталогом").ЭтоИстина();
	
	КорневойПутьВходной = ?(ПапкаИсходников.ЭтоКаталог(), ПапкаИсходников.ПолноеИмя, ПапкаИсходников.Путь);
	Лог.Отладка("Нашли финальный путь к исходникам %1", ПутьКИсходникам);
	
	Если Рекурсивно Тогда
		СобратьКаталог(ПутьКИсходникам, КаталогВыгрузки, КорневойПутьВходной, СтрокаПодключения, Пользователь, Пароль, ВерсияПлатформы);
	Иначе
		СобратьФайлВнешнейОбработки(ПутьКИсходникам, КаталогВыгрузки, СтрокаПодключения, Пользователь, Пароль, ВерсияПлатформы);
	КонецЕсли;

	Если КаталогВременнойИБ <> Неопределено Тогда
		ВременныеФайлы.УдалитьФайл(КаталогВременнойИБ);
	КонецЕсли;
	
	Лог.Информация("Сборка завершена");

КонецПроцедуры

Процедура СобратьКаталог(Знач ПутьКИсходникам, КаталогВыгрузки, Знач КаталогКорень, Знач СтрокаПодключения, Знач Пользователь, Знач Пароль, Знач ВерсияПлатформы)

	Файл = Новый Файл(ПутьКИсходникам);
	Если Файл.ЭтоКаталог() И ЭтоПутьКИсходнымКодамОбработок(Файл.ПолноеИмя) Тогда
		Если НЕ Новый Файл(КаталогВыгрузки).Существует() Тогда
			СоздатьКаталог(КаталогВыгрузки);
		КонецЕсли;
		СобратьФайлВнешнейОбработки(Файл.ПолноеИмя, КаталогВыгрузки, СтрокаПодключения, Пользователь, Пароль, ВерсияПлатформы);
		Возврат;
	КонецЕсли;
	
	СписокФайловВКаталоге = НайтиФайлы(ПутьКИсходникам, ПолучитьМаскуВсеФайлы());
	ПутиКИсходникам = Новый Соответствие;
	ФайлКаталогКорень = Новый Файл(КаталогКорень);
   
	Для Каждого Файл Из СписокФайловВКаталоге Цикл
		
		Если Лев(Файл.Имя,4) = ".git" Или Врег(Файл.Имя) = Врег("build") Тогда
			Продолжить;
		КонецЕсли;
		
		
		Если Файл.ЭтоКаталог() И ОбъединитьПути(Новый Файл(Файл.ПолноеИмя).ПолноеИмя, "./") = ОбъединитьПути(Новый Файл(КаталогВыгрузки).ПолноеИмя, "./") Тогда
			Продолжить;
		КонецЕсли;
		
		Если Файл.ЭтоКаталог() И ЭтоПутьКИсходнымКодамОбработок(Файл.ПолноеИмя) Тогда
			Если НЕ Новый Файл(КаталогВыгрузки).Существует() Тогда
				СоздатьКаталог(КаталогВыгрузки);
			КонецЕсли;
			
			СобратьФайлВнешнейОбработки(Файл.ПолноеИмя, КаталогВыгрузки, 
				СтрокаПодключения, Пользователь, Пароль, ВерсияПлатформы);
		ИначеЕсли Файл.ЭтоКаталог() Тогда
			
			НовыйПутьВыгрузки = ОбъединитьПути(КаталогВыгрузки, Файл.Имя);
			Если НЕ Новый Файл(НовыйПутьВыгрузки).Существует() Тогда
				СоздатьКаталог(НовыйПутьВыгрузки);
			Иначе
				ОбщиеМетоды.ОбеспечитьПустойКаталог(Новый Файл(НовыйПутьВыгрузки));
			КонецЕсли;
		
			СобратьКаталог(Файл.ПолноеИмя, НовыйПутьВыгрузки, КаталогКорень, 
				СтрокаПодключения, Пользователь, Пароль, ВерсияПлатформы);
		// Иначе
			
		// 	НовыйПутьВыгрузки = ОбъединитьПути(КаталогВыгрузки, Файл.Имя);
		// 	Лог.Отладка("Копирую файл %1 в %2", Файл.ПолноеИмя, НовыйПутьВыгрузки);
		// 	КопироватьФайл(Файл.ПолноеИмя, НовыйПутьВыгрузки);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Функция СобратьФайлВнешнейОбработки(Знач ПутьКИсходникам, Знач КаталогВыгрузки, 
		Знач СтрокаПодключения, Знач Пользователь, Знач Пароль, Знач ВерсияПлатформы)
	
	Лог.Отладка("Собираю исходники <"+ПутьКИсходникам+">");

	ПапкаИсходников = Новый Файл(ПутьКИсходникам);
	ИмяПапки = ПапкаИсходников.Имя;
	ИмяФайлаОбъекта = ОбъединитьПути(ТекущийКаталог(), КаталогВыгрузки, ИмяПапки + ".epf");
	НайденныйФайл = НайтиФайлы(ПутьКИсходникам, "*.xml");
	Ожидаем.Что(НайденныйФайл.Количество(), "Базовый файл xml <" + ПутьКИсходникам +  ">*.xml должен существовать")
		.Больше(0);
		
	СобратьФайлВнешнейОбработкиИзИсходников(НайденныйФайл[0], ИмяФайлаОбъекта, 
		СтрокаПодключения, Пользователь, Пароль, ВерсияПлатформы);

	Лог.Отладка("Успешно собран файл "+ИмяФайлаОбъекта);
	
	Возврат ИмяФайлаОбъекта;

КонецФункции

Процедура СобратьФайлВнешнейОбработкиИзИсходников(Знач ПапкаИсходников, Знач ИмяФайлаОбъекта, 
		Знач СтрокаПодключения, Знач Пользователь, Знач Пароль, Знач ВерсияПлатформы)

	Лог.Отладка("Собираю файл из исходников <%1> в файл %2", ПапкаИсходников.ПолноеИмя, ИмяФайлаОбъекта);
	Лог.Отладка("");

	Конфигуратор = Новый УправлениеКонфигуратором();
	КаталогВременнойИБ = ВременныеФайлы.СоздатьКаталог();
	Конфигуратор.КаталогСборки(КаталогВременнойИБ);
	
	Если НЕ ПустаяСтрока(СтрокаПодключения) Тогда
		Конфигуратор.УстановитьКонтекст(СтрокаПодключения, Пользователь, Пароль);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ВерсияПлатформы) Тогда
		Лог.Отладка(ВерсияПлатформы);
		Конфигуратор.ИспользоватьВерсиюПлатформы(ВерсияПлатформы);
	КонецЕсли;
	
	ЛогКонфигуратора = Логирование.ПолучитьЛог("oscript.lib.v8runner");
	ЛогКонфигуратора.УстановитьУровень(Лог.Уровень());
	
	Параметры = Конфигуратор.ПолучитьПараметрыЗапуска();

	Параметры.Добавить("/LoadExternalDataProcessorOrReportFromFiles");
	Параметры.Добавить(ОбщиеМетоды.ОбернутьПутьВКавычки(ПапкаИсходников.ПолноеИмя));
	Параметры.Добавить(ОбщиеМетоды.ОбернутьПутьВКавычки(ИмяФайлаОбъекта));
	
	Конфигуратор.ВыполнитьКоманду(Параметры);
	Лог.Отладка("Вывод 1С:Предприятия - " + Конфигуратор.ВыводКоманды());
	Лог.Отладка("Очищаем каталог временной ИБ");
	Лог.Отладка("");

КонецПроцедуры

Функция ЭтоПутьКИсходнымКодамОбработок(ПутьКПапке)
	
	Результат = Ложь;
	
	МассивИмен = НайтиФайлы(ПутьКПапке, "*.xml", Ложь);
	Для Каждого Элемент из МассивИмен Цикл
		ЧтениеТекста = Новый ЧтениеТекста(Элемент.ПолноеИмя);
		Содержание = ЧтениеТекста.Прочитать();
		ЧтениеТекста.Закрыть();
		Если Найти(Врег(Содержание), Врег("<ExternalDataProcessor uuid=")) > 0 ИЛИ Найти(Врег(Содержание), Врег("<ExternalReport uuid=")) > 0 Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция ПолучитьТипФайлаПоКаталогуИсходников(Знач КаталогИсходников)

	ПутьКФайлуРут = ОбъединитьПути(КаталогИсходников, "root");
	ФайлРут = Новый Файл(ПутьКФайлуРут);
	
	Ожидаем.Что(ФайлРут.Существует(), "Файл <" + ПутьКФайлуРут +  "> должен существовать").ЭтоИстина();
	Ожидаем.Что(ФайлРут.ЭтоКаталог(), "<" + ПутьКФайлуРут +  "> должен быть файлом").ЭтоЛожь();
	
	ЧтениеТекста = Новый ЧтениеТекста(ПутьКФайлуРут);
	СодержаниеРут = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	МассивСтрокРут = СтрРазделить(СодержаниеРут, ",");
	Ожидаем.Что(МассивСтрокРут.Количество(), "Некорректный формат файла root").Больше(1);
	
	ПутьКФайлуКорневойКонтейнер = ОбъединитьПути(КаталогИсходников, МассивСтрокРут[1]);
	ФайлКорневойКонтейнер = Новый Файл(ПутьКФайлуКорневойКонтейнер);
		
	Ожидаем.Что(ФайлКорневойКонтейнер.Существует(), "Файл <" + ПутьКФайлуКорневойКонтейнер +  "> должен существовать").ЭтоИстина();
	Ожидаем.Что(ФайлКорневойКонтейнер.ЭтоКаталог(), "<" + ПутьКФайлуКорневойКонтейнер +  "> должен быть файлом").ЭтоЛожь();

	ЧтениеТекста = Новый ЧтениеТекста(ПутьКФайлуКорневойКонтейнер);
	СодержаниеКорневойКонтейнер = "";
	Для сч = 1 По 7 Цикл
		ПрочитаннаяСтрока = ЧтениеТекста.ПрочитатьСтроку();
		Если ПрочитаннаяСтрока = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		СодержаниеКорневойКонтейнер = СодержаниеКорневойКонтейнер + ПрочитаннаяСтрока;
	КонецЦикла;
	ЧтениеТекста.Закрыть();
	
	МассивСтрокКорневойКонтейнер = СтрРазделить(СодержаниеКорневойКонтейнер, ",");
	Ожидаем.Что(МассивСтрокКорневойКонтейнер.Количество(), "Некорректный формат файла корневого контейнера <" + ПутьКФайлуКорневойКонтейнер + ">").Больше(3);
	
	ИдентификаторТипаОбъекта = СокрЛП(МассивСтрокКорневойКонтейнер[3]);
	Если Лев(ИдентификаторТипаОбъекта, 1) = "{" Тогда
		ИдентификаторТипаОбъекта = Прав(ИдентификаторТипаОбъекта, СтрДлина(ИдентификаторТипаОбъекта) - 1);
	КонецЕсли;
	Если Прав(ИдентификаторТипаОбъекта, 1) = "}" Тогда
		ИдентификаторТипаОбъекта = Лев(ИдентификаторТипаОбъекта, СтрДлина(ИдентификаторТипаОбъекта) - 1);
	КонецЕсли;
	
	ИдентификаторТипаОбъекта = НРег(СокрЛП(ИдентификаторТипаОбъекта));

	Если ИдентификаторТипаОбъекта = "c3831ec8-d8d5-4f93-8a22-f9bfae07327f" Тогда
		ТипФайла = "epf";
	ИначеЕсли ИдентификаторТипаОбъекта = "e41aff26-25cf-4bb6-b6c1-3f478a75f374" Тогда
		ТипФайла = "erf";
	Иначе
		ВызватьИсключение("Некорректный идентификатор типа собираемого объекта <" + ИдентификаторТипаОбъекта + ">");
	КонецЕсли;

	Возврат ТипФайла;

КонецФункции

Процедура КонвертироватьФайлы(Знач Каталог, Знач СтрокаПодключения="", Знач Пользователь="", Знач Пароль="", Знач ВерсияПлатформы="") Экспорт
	Конфигуратор = Новый УправлениеКонфигуратором();
		
	КаталогВременнойИБ = ВременныеФайлы.СоздатьКаталог();
	Конфигуратор.КаталогСборки(КаталогВременнойИБ);
	
	КаталогРаспаковки = ВременныеФайлы.СоздатьКаталог();
	
	Если НЕ ПустаяСтрока(СтрокаПодключения) Тогда
		Конфигуратор.УстановитьКонтекст(СтрокаПодключения, Пользователь, Пароль);
	КонецЕсли;
	
	Если Не ПустаяСтрока(ВерсияПлатформы) Тогда 
		Конфигуратор.ИспользоватьВерсиюПлатформы(ВерсияПлатформы);
	КонецЕсли;
	
	ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();
	ПараметрыЗапуска.Добавить("/ConvertFiles """ + Каталог + """");
	Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);

КонецПроцедуры //КонвертироватьФайлы

Процедура ОбновитьЗависимыйКэш(АвтоОбновление, КэшПутей, КэшОбновляемый)

	Если КэшОбновляемый.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	МассивКешейДляАвтообновления = Новый Массив;
	Если АвтоОбновление <> Неопределено Тогда
		Если ТипЗнч(АвтоОбновление) = Тип("Строка") И ЗначениеЗаполнено(АвтоОбновление) Тогда
			СоответствиеПутей = Новый Соответствие;
			СоответствиеПутей.Вставить("autoupdate", АвтоОбновление);
			МассивКешейДляАвтообновления.Добавить(СоответствиеПутей);
		ИначеЕсли ТипЗнч(АвтоОбновление) = Тип("Массив") Тогда 
			МассивКешейДляАвтообновления = АвтоОбновление;
		КонецЕсли;

	КонецЕсли;
	
	Для каждого ЭлементМассива Из МассивКешейДляАвтообновления Цикл
		
		Попытка
			Кэш = КэшПутей.Получить(ЭлементМассива.Получить("autoupdate"));
			Для каждого Элемент Из КэшОбновляемый Цикл
				Кэш.Вставить(Элемент.Ключ, Элемент.Значение);
			КонецЦикла;    
		Исключение
			Лог.Ошибка("Ошибка обновления других кэшей "+ Элемент + ":"+ ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры

Процедура СледитьЗаИзменениямиФайловВРабочемКаталоге(Значение, КэшПутей, Фильтр = "")
	Ключ = Строка(Значение.Получить("inDir")) + ""+Строка(Значение.Получить("outDir"));
	КаталогВходящий = ПолныйПуть(Значение.Получить("inDir"));
	КаталогИсходящий = ПолныйПуть(Значение.Получить("outDir"));
	СтрокаПодключения = ОбщиеМетоды.ПереопределитьПолныйПутьВСтрокеПодключения(Значение.Получить("connectionstring"));
	Пользователь = Значение.Получить("user");
	Пароль = Значение.Получить("password");
	ВерсияПлатформы = Значение.Получить("version");
	ИмяПравила = Значение.Получить("name");
	АвтоОбновление = Значение.Получить("autoupdate");
	Если ИмяПравила <> Неопределено И Не ПустаяСтрока(ИмяПравила) Тогда 
		Ключ = ИмяПравила;
	КонецЕсли;

	Если Не ПустаяСтрока(Фильтр) И Фильтр <> Ключ Тогда 
		Возврат;
	КонецЕсли;

	ФайлВходящий = Новый Файл(КаталогВходящий);
	Если НЕ ФайлВходящий.Существует() Тогда 
		Возврат;
	КонецЕсли;
	
	Если ФайлВходящий.ЭтоКаталог() Тогда 
		СписокФайлов = НайтиФайлы(КаталогВходящий, ПолучитьМаскуВсеФайлы(), Истина);
	Иначе 
		СписокФайлов = Новый Массив;
		СписокФайлов.Добавить(ФайлВходящий);
	КонецЕсли;
	
	Кэш = КэшПутей.Получить(Ключ);
	Если Кэш = Неопределено Тогда
		Лог.Информация("Начало epf to src "+Ключ);
		Кэш = Новый Соответствие;

		Для каждого Файл из СписокФайлов Цикл
			Кэш.Вставить(Файл.ПолноеИмя, Файл.ПолучитьВремяИзменения());
		КонецЦикла;
		КэшПутей.Вставить(Ключ, Кэш);
	КонецЕсли;

	Лог.Отладка("Проверяем изменения epf "+Строка(КаталогВходящий) + "->"+Строка(КаталогИсходящий));

	КэшОбновляемый = Новый Соответствие();
		
	СписокОбработанных = Новый Соответствие();
	Для каждого Файл из СписокФайлов Цикл
		Лог.Отладка("Проверяю на изменение файл <%1>", Файл.ПолноеИмя);
		Если Файл.ЭтоКаталог() Тогда Продолжить;  КонецЕсли;

		Изменен = Ложь;
		Время = Кэш.Получить(Файл.ПолноеИмя); ВремяТекущее = Файл.ПолучитьВремяИзменения();
		Если Время = Неопределено ИЛИ Время <> ВремяТекущее Тогда 
			Изменен = Истина;
			Лог.Отладка("Изменен:"+Файл.ПолноеИмя + " время старое:"+Строка(Время) + " новое:"+ВремяТекущее);
		КонецЕсли;

		КаталогВходящийДляРазбора = ?(ФайлВходящий.ЭтоКаталог(), КаталогВходящий, ФайлВходящий.Путь);
		КаталогВходящийДляРазбора = ПолныйПуть(КаталогВходящийДляРазбора);

		ЭтоБинарныйОбъект1С = ОбщиеМетоды.ТипФайлаПоддерживается(Файл);
		ИмяФайлаНазначения = ?(ЭтоБинарныйОбъект1С, Файл.ИмяБезРасширения, Файл.Имя);
		ИмяФайлаНазначения = ОбъединитьПути(Файл.Путь, ИмяФайлаНазначения);

		ОтносительныйПутьФайла = ФС.ОтносительныйПуть(КаталогВходящийДляРазбора, ИмяФайлаНазначения);
		ПутьФайлаНазначения = ОбъединитьПути(КаталогИсходящий, ОтносительныйПутьФайла);

		Если ЭтоБинарныйОбъект1С Тогда
			Лог.Отладка("Анализируем внешнюю обработку/отчет %1", Файл.ПолноеИмя);
		Иначе
			Лог.Отладка("Анализ копирования простого файла %1", Файл.ПолноеИмя);
		КонецЕсли;
		Лог.Отладка("   относительный путь :%1", ОтносительныйПутьФайла);
		Лог.Отладка("   источник           :%1", КаталогВходящийДляРазбора);
		Лог.Отладка("   назначение         :%1", КаталогИсходящий);
		Лог.Отладка("   новый путь         :%1", ПутьФайлаНазначения);

		Если ЭтоБинарныйОбъект1С Тогда

			НовыйПутьВыгрузки = ПутьФайлаНазначения;
			ФайлНовойВыгрузки = Новый Файл(НовыйПутьВыгрузки);
			Если Не ФайлНовойВыгрузки.Существует() Тогда
				Изменен = Истина;
			КонецЕсли;

			Если Изменен Тогда
				Лог.Отладка("Разбираем внешнюю обработку/отчет %1", Файл.ПолноеИмя);

				СоздатьКаталог(НовыйПутьВыгрузки);
				КаталогРазобранный = УпаковщикВнешнихОбработок().РазобратьФайлВнешняяОбработка(
					Файл, КаталогИсходящий, КаталогВходящийДляРазбора, Ложь, 
					СтрокаПодключения, Пользователь, Пароль, ВерсияПлатформы);

				СписокФайловНовый = НайтиФайлы(Новый Файл(КаталогРазобранный).ПолноеИмя, ПолучитьМаскуВсеФайлы(), Истина);
				Для каждого ФайлНовыйКэша Из СписокФайловНовый Цикл
					Если ФайлНовыйКэша.ЭтоКаталог() = Ложь Тогда
						Кэш.Вставить(ФайлНовыйКэша.ПолноеИмя, ФайлНовыйКэша.ПолучитьВремяИзменения());
						КэшОбновляемый.Вставить(ФайлНовыйКэша.ПолноеИмя, ФайлНовыйКэша.ПолучитьВремяИзменения());
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;

		Иначе

			ФайлНовый = Новый Файл(ПутьФайлаНазначения);
			Если Не ФайлНовый.Существует() Тогда
				Изменен = Истина;
			КонецЕсли;
			
			Если Изменен Тогда
				ФайлНовый = Новый Файл(ПутьФайлаНазначения);

				Лог.Отладка("Копирую файл <%1> в <%2>", Файл.ПолноеИмя, ФайлНовый.ПолноеИмя);

				КаталогНовый = Новый Файл(ФайлНовый.Путь);
				Если НЕ КаталогНовый.Существует() Тогда 
					СоздатьКаталог(КаталогНовый.ПолноеИмя);
				КонецЕсли;
		
				Если ФайлНовый.Существует() = Истина Тогда
					
					Лог.Отладка(СтрШаблон("Удаляем файл %1", ПутьФайлаНазначения));
					Попытка
						УдалитьФайлы(ФайлНовый.Путь, ФайлНовый.Имя);    
					Исключение
						Лог.Ошибка("Ошибка удаления файла "+ ПутьФайлаНазначения + ":"+ОписаниеОшибки());
					КонецПопытки;
					
				КонецЕсли;
				
				КопироватьФайл(Файл.ПолноеИмя, ФайлНовый.ПолноеИмя);
				Кэш.Вставить(ФайлНовый.ПолноеИмя, ФайлНовый.ПолучитьВремяИзменения());
				КэшОбновляемый.Вставить(ФайлНовый.ПолноеИмя, ФайлНовый.ПолучитьВремяИзменения());
				Лог.Отладка(СтрШаблон("Завершено копирование файла %1 в каталог %2", Файл.Имя, ФайлНовый.ПолноеИмя));
			КонецЕсли;
		КонецЕсли;
		
		Кэш.Вставить(Файл.ПолноеИмя, Файл.ПолучитьВремяИзменения());
		СписокОбработанных.Вставить(Файл.ПолноеИмя, Истина);
	КонецЦикла;

	Для каждого Элемент ИЗ СписокОбработанных Цикл 
		Файл = Новый Файл(Элемент.Ключ);
		Кэш.Вставить(Файл.ПолноеИмя, Файл.ПолучитьВремяИзменения());
	КонецЦикла;

	КэшПутей.Вставить(Ключ, Кэш);
	Кэш = Неопределено;
	Если СписокОбработанных.Количество() > 0 Тогда
		Лог.Информация("Изменено "+Строка(СписокОбработанных.Количество()));
		КолМаксИзмененийВывода = 5;
		Для каждого Элемент Из СписокОбработанных Цикл
			Если КолМаксИзмененийВывода < 0 Тогда
				Лог.Информация("Обработано ...");
				Прервать;
			КонецЕсли;
			Лог.Информация("Обработан "+Элемент.Ключ);
			КолМаксИзмененийВывода = КолМаксИзмененийВывода - 1;
		КонецЦикла;
	КонецЕсли;

	ОбновитьЗависимыйКэш(АвтоОбновление, КэшПутей, КэшОбновляемый);
	
КонецПроцедуры	

Процедура СледитьЗаИзменениямиФайловВРепозиторииИсходников(Значение, КэшПутей, Фильтр = "")
	Ключ = Строка(Значение.Получить("inDir")) + ""+Строка(Значение.Получить("outDir"));
	КаталогВходящий = ПолныйПуть(Значение.Получить("inDir"));
	КаталогИсходящий = ПолныйПуть(Значение.Получить("outDir"));
	СтрокаПодключения = ОбщиеМетоды.ПереопределитьПолныйПутьВСтрокеПодключения(Значение.Получить("connectionstring"));
	Пользователь = Значение.Получить("user");
	Пароль = Значение.Получить("password");
	ВерсияПлатформы = Значение.Получить("version");
	ИмяПравила = Значение.Получить("name");
	АвтоОбновление = Значение.Получить("autoupdate");
	Если ИмяПравила <> Неопределено И Не ПустаяСтрока(ИмяПравила) Тогда 
		Ключ = ИмяПравила;
	КонецЕсли;

	Если Не ПустаяСтрока(Фильтр) И Фильтр <> Ключ Тогда 
		Возврат;
	КонецЕсли;
	
	Кэш = КэшПутей.Получить(Ключ);
	Если Кэш = Неопределено Тогда
		Лог.Информация("Начало src to epf:"+Ключ);
		Кэш = Новый Соответствие;
		СписокФайлов = НайтиФайлы(КаталогВходящий, ПолучитьМаскуВсеФайлы(), Истина);
		Для каждого Файл из СписокФайлов Цикл
			Кэш.Вставить(Файл.ПолноеИмя, Файл.ПолучитьВремяИзменения());
		КонецЦикла;
		КэшПутей.Вставить(Ключ, Кэш);
	КонецЕсли;

	Лог.Отладка("Проверяем изменения src "+Строка(КаталогВходящий) + "->"+Строка(КаталогИсходящий));

	СписокФайлов = НайтиФайлы(КаталогВходящий, ПолучитьМаскуВсеФайлы(), Истина);
	СписокОбработанных = Новый Соответствие();
	КэшОбновляемый = Новый Соответствие();
	Для каждого Файл из СписокФайлов Цикл
		Если Файл.ЭтоКаталог() Тогда Продолжить; КонецЕсли;

		Время = Кэш.Получить(Файл.ПолноеИмя); Изменен = Ложь; ВремяТекущее = Файл.ПолучитьВремяИзменения();
		Если Время = Неопределено ИЛИ Время <> ВремяТекущее Тогда 
			Изменен = Истина;
			Лог.Отладка("Изменен:"+Файл.ПолноеИмя + " время старое:"+Строка(Время) + " новое:"+Файл.ПолучитьВремяИзменения());
		КонецЕсли;

		Если Изменен = Истина Тогда
			ОбработкуНашли = Ложь; ПапкаИсходников = ""; ПутьКИсходникамОбработки = Файл.ПолноеИмя;
			//Нам передали путь к измененному файлу, необходимо определить корневую папку.
			МаксСчетчикЦикла = 5;
			Если Файл.Расширение = ".png" Тогда
				МаксСчетчикЦикла = 7;  //\vanessa\Forms\УправляемаяФорма\Ext\Form\Items\ИмяКартинки\Picture.png
			КонецЕсли;
			
			Для Счетчик = 0 По МаксСчетчикЦикла Цикл
				ФайлПутьКИсходникамОбработки = Новый Файл(ПутьКИсходникамОбработки);
				Если ФайлПутьКИсходникамОбработки.ЭтоКаталог() Тогда 
					ФайлПутьКИсходникамОбработки = Новый Файл(ФайлПутьКИсходникамОбработки.ПолноеИмя+"../");
				КонецЕсли;

				ПутьКИсходникамОбработки = ФайлПутьКИсходникамОбработки.Путь;
				Если ЭтоПутьКИсходнымКодамОбработок(ПутьКИсходникамОбработки) Тогда
					Лог.Отладка("Это путь к исходникам "+ПутьКИсходникамОбработки);
					ПапкаИсходников = Новый Файл(ПутьКИсходникамОбработки).ПолноеИмя;
					ОбработкуНашли = Истина;
					Прервать;
				КонецЕсли;
				ПутьКИсходникамОбработки = Новый Файл(ПутьКИсходникамОбработки).ПолноеИмя;
			КонецЦикла;
			

			Если ОбработкуНашли = Истина И СписокОбработанных.Получить(ПапкаИсходников) <> Неопределено Тогда
				Кэш.Вставить(Файл.ПолноеИмя, Файл.ПолучитьВремяИзменения());
				СписокОбработанных.Вставить(Файл.ПолноеИмя, Истина);
			ИначеЕсли ОбработкуНашли = Истина Тогда
				ПутьОтносительно = ?(ПолныйПуть(КаталогВходящий) = ПапкаИсходников, "./", "../"); 
				КаталогВыгрузкиОбработки = Новый Файл(ОбъединитьПути(КаталогИсходящий, ФС.ОтносительныйПуть(ПолныйПуть(КаталогВходящий), ПапкаИсходников), ПутьОтносительно)).ПолноеИмя;
				ИмяФайлаОбъекта = СобратьФайлВнешнейОбработки(ПапкаИсходников, КаталогВыгрузкиОбработки, СтрокаПодключения, Пользователь, Пароль, ВерсияПлатформы);
				
				КаталогФайл = Новый Файл(ИмяФайлаОбъекта);
				СписокСобранныхОбработок = НайтиФайлы(КаталогВыгрузкиОбработки, ""+КаталогФайл.Имя + "*");
				
				Для каждого ЭлементОбработки из СписокСобранныхОбработок Цикл
					Кэш.Вставить(ЭлементОбработки.ПолноеИмя, ЭлементОбработки.ПолучитьВремяИзменения());
					КэшОбновляемый.Вставить(ЭлементОбработки.ПолноеИмя, ЭлементОбработки.ПолучитьВремяИзменения());
				КонецЦикла;
				СписокОбработанных.Вставить(ПапкаИсходников, Истина);
			Иначе
				НовыйПутьВыгрузки = ОбъединитьПути(КаталогИсходящий, ФС.ОтносительныйПуть(ПолныйПуть(КаталогВходящий), Файл.ПолноеИмя));
				Лог.Отладка("Копируем "+Файл.ПолноеИмя + "->"+НовыйПутьВыгрузки);
				НовыйКаталог = Новый Файл(Новый Файл(НовыйПутьВыгрузки).Путь);
				Если НовыйКаталог.Существует() = Ложь Тогда 
					СоздатьКаталог(НовыйКаталог.ПолноеИмя);
				КонецЕсли;
				КопироватьФайл(Файл.ПолноеИмя, НовыйПутьВыгрузки);

				ФайлСобранный = Новый Файл(НовыйПутьВыгрузки);
				Кэш.Вставить(ФайлСобранный.ПолноеИмя, ФайлСобранный.ПолучитьВремяИзменения());
				КэшОбновляемый.Вставить(ФайлСобранный.ПолноеИмя, ФайлСобранный.ПолучитьВремяИзменения());
			КонецЕсли;
			Кэш.Вставить(Файл.ПолноеИмя, Файл.ПолучитьВремяИзменения());
			СписокОбработанных.Вставить(Файл.ПолноеИмя, Истина);
		КонецЕсли;
	КонецЦикла;

	Для каждого Элемент ИЗ СписокОбработанных Цикл 
		Файл = Новый Файл(Элемент.Ключ);
		Кэш.Вставить(Файл.ПолноеИмя, Файл.ПолучитьВремяИзменения());
	КонецЦикла;

	КэшПутей.Вставить(Ключ, Кэш);
	Кэш = Неопределено;
	Если СписокОбработанных.Количество() > 0 Тогда
		Лог.Информация("Изменено "+Строка(СписокОбработанных.Количество()));
		КолМаксИзмененийВывода = 5;
		Для каждого Элемент Из СписокОбработанных Цикл
			Если КолМаксИзмененийВывода < 0 Тогда
				Лог.Информация("Обработано ...");
				Прервать;
			КонецЕсли;
			Лог.Информация("Обработан "+Элемент.Ключ);
			КолМаксИзмененийВывода = КолМаксИзмененийВывода - 1;
		КонецЦикла;
	КонецЕсли;

	ОбновитьЗависимыйКэш(АвтоОбновление, КэшПутей, КэшОбновляемый);
	
КонецПроцедуры	

Процедура СледитьЗаИзменениямиИсходниковCF(Значение, КэшПутей, Фильтр = "")
	Если Значение <> Неопределено Тогда
		Ключ = Строка(Значение.Получить("inDir"));
		КаталогВходящий = ПолныйПуть(Значение.Получить("inDir"));
		СтрокаПодключения = ОбщиеМетоды.ПереопределитьПолныйПутьВСтрокеПодключения(Значение.Получить("connectionstring"));
		Пользователь = Значение.Получить("user");
		Пароль = Значение.Получить("password");
		ВерсияПлатформы = Значение.Получить("version");
		АвтоОбновление = Значение.Получить("autoupdate");
		ИмяПравила = Значение.Получить("name");
		Если ИмяПравила <> Неопределено И Не ПустаяСтрока(ИмяПравила) Тогда 
			Ключ = ИмяПравила;
		КонецЕсли;

		
		Если Не ПустаяСтрока(Фильтр) И Фильтр <> Ключ Тогда 
			Возврат;
		КонецЕсли;

		Если АвтоОбновление = Истина Или АвтоОбновление = "true" Тогда 
			АвтоОбновление = Истина;
		КонецЕсли;

		Кэш = КэшПутей.Получить(Ключ);
		Если Кэш = Неопределено Тогда
			Лог.Информация("Начало src to cf "+Ключ);
			Кэш = Новый Соответствие;
			СписокФайлов = НайтиФайлы(КаталогВходящий, ПолучитьМаскуВсеФайлы(), Истина);
			Для каждого Файл из СписокФайлов Цикл
				Кэш.Вставить(Файл.ПолноеИмя, Файл.ПолучитьВремяИзменения());
			КонецЦикла;
			КэшПутей.Вставить(Ключ, Кэш);
		КонецЕсли;

		Лог.Отладка("Проверяем изменения cf "+Строка(КаталогВходящий));

		СписокФайлов = НайтиФайлы(КаталогВходящий, ПолучитьМаскуВсеФайлы(), Истина);
		СписокОбработанных = Новый Соответствие();
		
		Для каждого Файл из СписокФайлов Цикл
			Если Файл.ЭтоКаталог() Тогда 
				Продолжить;
			КонецЕсли;

			Изменен = Ложь;
			Время = Кэш.Получить(Файл.ПолноеИмя); ВремяТекущее = Файл.ПолучитьВремяИзменения();
			Если Время = Неопределено ИЛИ Время <> ВремяТекущее Тогда 
				Изменен = Истина;
				Лог.Отладка("Изменен:"+Файл.ПолноеИмя + " время старое:"+Строка(Время) + " новое:"+Файл.ПолучитьВремяИзменения());
			КонецЕсли;

			Если Изменен = Истина Тогда
				СписокОбработанных.Вставить(Файл.ПолноеИмя, Файл);
			КонецЕсли;
		КонецЦикла;

		Если СписокОбработанных.Количество() > 0 Тогда
			СписокДляЗагрузки = "";
			ПервыйРаз = Истина;
			Для каждого ИмяФайла Из СписокОбработанных Цикл
				Если ПервыйРаз Тогда
					СписокДляЗагрузки = ""+ИмяФайла.Ключ;                            
					ПервыйРаз = Ложь;
				КонецЕсли;
				СписокДляЗагрузки = СписокДляЗагрузки + Символы.ПС + ИмяФайла.Ключ;    
			КонецЦикла;
			КонфигурацияЗагружена = Ложь;
			Попытка
				СобратьИзИсходниковТекущуюКонфигурацию(КаталогВходящий, СтрокаПодключения, Пользователь, Пароль, ВерсияПлатформы, СписокДляЗагрузки);
				Для каждого ИмяФайла Из СписокОбработанных Цикл
					Кэш.Вставить(ИмяФайла.Значение.ПолноеИмя, ИмяФайла.Значение.ПолучитьВремяИзменения());
				КонецЦикла;
				КонфигурацияЗагружена = Истина;
			Исключение
				Лог.Ошибка("Ошибка загрузки файлов конфигурации:"+ОписаниеОшибки());
			КонецПопытки;

			Если КонфигурацияЗагружена = Истина И АвтоОбновление = Истина Тогда
				Попытка
					МенеджерКонфигуратора = Новый МенеджерКонфигуратора;
					МенеджерКонфигуратора.ОбновитьКонфигурациюБазыДанных(СтрокаПодключения, Пользователь, Пароль, ,ВерсияПлатформы);
				Исключение
					Лог.Ошибка("Ошибка обновления конфигурации:"+ОписаниеОшибки());
				КонецПопытки;
				
			КонецЕсли;

			Лог.Информация("Загрузка изменений завершена:"+КаталогВходящий);
		КонецЕсли;

	КонецЕсли;
КонецПроцедуры

Процедура Следить(Знач ФайлНастроек = "", Знач Фильтр = "")
	Перем КэшПутей;
	КэшПутей = Новый Соответствие;
	ФайлНастроек = ПолныйПуть(ФайлНастроек);
	Настройки = ОбщиеМетоды.ПрочитатьФайлJSON(ФайлНастроек);
	Счетчик = -1;
	Пока Истина Цикл 
		Для каждого Элемент ИЗ Настройки Цикл
			Значение = Элемент.Получить("check-source-repo");
			Если Значение = Неопределено Тогда
				Значение = Элемент.Получить("srctoepf");
			КонецЕсли;
			Если Значение <> Неопределено Тогда
				СледитьЗаИзменениямиФайловВРепозиторииИсходников(Значение, КэшПутей, Фильтр)
			КонецЕсли;

			Значение = Элемент.Получить("check-work-copy");
			Если Значение = Неопределено Тогда
				Значение = Элемент.Получить("epftosrc");
			КонецЕсли;
			Если Значение <> Неопределено Тогда
				СледитьЗаИзменениямиФайловВРабочемКаталоге(Значение, КэшПутей, Фильтр)
			КонецЕсли;

			Значение = Элемент.Получить("check-config-sources");
			Если Значение = Неопределено Тогда
				Значение = Элемент.Получить("srccftoib");
			КонецЕсли;
			СледитьЗаИзменениямиИсходниковCF(Значение, КэшПутей);
		КонецЦикла;
		sleep(8000);
	КонецЦикла;

КонецПроцедуры

Процедура Конфигуратор(Знач СтрокаПодключения, Знач Пользователь="", Знач Пароль="",
						Знач СтрокаПодключенияХранилище = "", Знач ПользовательХранилища="", Знач ПарольХранилища="",
						Знач ВерсияХранилища="", Знач ВерсияПлатформы="", Знач СервиснаяБаза = Ложь, Знач ДополнительныеКлючиЗапуска = "") Экспорт

	Конфигуратор = Новый УправлениеКонфигуратором();
	Логирование.ПолучитьЛог("oscript.lib.v8runner").УстановитьУровень(Лог.Уровень());

	Если НЕ ПустаяСтрока(ВерсияПлатформы) Тогда
		Лог.Отладка("ВерсияПлатформы:"+ВерсияПлатформы);
		Конфигуратор.ИспользоватьВерсиюПлатформы(ВерсияПлатформы);
	КонецЕсли;

	Конфигуратор.УстановитьИмяФайлаСообщенийПлатформы(ПолучитьИмяВременногоФайла("log"));
	Если СервиснаяБаза = Истина Тогда
		КаталогБазы = ОбъединитьПути(КорневойПутьПроекта, "./build/ibservice");
		СтрокаПодключения = "/F""" + КаталогБазы + """";
	КонецЕсли;

	Если ПустаяСтрока(СтрокаПодключения) Тогда
		КаталогБазы = ОбъединитьПути(КорневойПутьПроекта, ?(СервиснаяБаза = Истина, "./build/ibservice", "./build/ib"));
		СтрокаПодключения = "/F""" + КаталогБазы + """";
	КонецЕсли;

	Конфигуратор.УстановитьКонтекст(СтрокаПодключения, Пользователь, Пароль);

	ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();

	Если НЕ ПустаяСтрока(СтрокаПодключенияХранилище) Тогда
		ПараметрыЗапуска.Добавить("/ConfigurationRepositoryF """+СтрокаПодключенияХранилище+"""");
		ПараметрыЗапуска.Добавить("/ConfigurationRepositoryN """+ПользовательХранилища+"""");

		Если Не ПустаяСтрока(ПарольХранилища) Тогда
			ПараметрыЗапуска.Добавить("/ConfigurationRepositoryP """+ПарольХранилища+"""");
		КонецЕсли;
	КонецЕсли;

	СтрокаЗапуска = "";
	СтрокаДляЛога = "";
	Для Каждого Параметр Из ПараметрыЗапуска Цикл
		СтрокаЗапуска = СтрокаЗапуска + " " + Параметр;
		Если Лев(Параметр,2) <> "/P" и Лев(Параметр,25) <> "/ConfigurationRepositoryP" Тогда
			СтрокаДляЛога = СтрокаДляЛога + " " + Параметр;
		КонецЕсли;
	КонецЦикла;

	Приложение = "";
	Приложение = Конфигуратор.ПутьКПлатформе1С();
	Если Найти(Приложение, " ") > 0 Тогда 
		Приложение = ОбщиеМетоды.ОбернутьПутьВКавычки(Приложение);
	КонецЕсли;
	Приложение = Приложение + " "+СтрокаЗапуска;
	Лог.Информация(Приложение);
	Процесс = СоздатьПроцесс(Приложение,,Истина);
	Процесс.Запустить();

КонецПроцедуры

Процедура УстановитьКаталогТекущегоПроекта(Знач Путь = "")
	КорневойПутьПроекта = "";
	Если ПустаяСтрока(Путь) Тогда
		Попытка
			КорневойПутьПроекта = СокрЛП(ЗапуститьПроцесс("git rev-parse --show-toplevel"));
		Исключение
		КонецПопытки;
	Иначе
		КорневойПутьПроекта = Путь;
	КонецЕсли;

	ПараметрыСистемы.КорневойПутьПроекта = КорневойПутьПроекта;

	Лог.Отладка("Текущий корень проекта:"+КорневойПутьПроекта);

КонецПроцедуры // УстановитьКаталогТекущегоПроекта()

Функция ЭтоЗапускВКоманднойСтроке()
	Возврат ТекущийСценарий().Источник = СтартовыйСценарий().Источник;
КонецФункции

Процедура ПодготовитьЛоги()
	Лог_cmdline = Логирование.ПолучитьЛог("oscript.lib.cmdline");
	Лог_v8runner = Логирование.ПолучитьЛог("oscript.lib.v8runner");
	
	ВыводПоУмолчанию = Новый ВыводЛогаВКонсоль();
	Лог_cmdline.ДобавитьСпособВывода(ВыводПоУмолчанию);
	Лог_v8runner.ДобавитьСпособВывода(ВыводПоУмолчанию);

	УровеньЛога = Лог.Уровень(); // учитываю возможность внешней настройки лога

	Если УровеньЛога = УровниЛога.Отладка Тогда

		Аппендер = Новый ВыводЛогаВФайл();

		ИмяВременногоФайла = ОбщиеМетоды.ПолучитьИмяВременногоФайлаВКаталоге(КаталогЛогов, СтрШаблон("%1.cmdline.log", ИмяСкрипта()));
		Аппендер.ОткрытьФайл(ИмяВременногоФайла);
		Лог_cmdline.ДобавитьСпособВывода(Аппендер);	
	КонецЕсли;
	
	Если УровеньЛога > УровниЛога.Отладка Тогда
		УровеньЛога = УровниЛога.Ошибка;
	КонецЕсли;
	Лог_cmdline.УстановитьУровень(УровеньЛога);
	Лог_v8runner.УстановитьУровень(УровеньЛога);

	Лог_v8runner.УстановитьРаскладку(ЭтотОбъект);
	Лог_cmdline.УстановитьРаскладку(ЭтотОбъект);    
КонецПроцедуры

Процедура ОсновнаяРабота()

	ПодготовитьЛоги();

	КодВозврата = 0;
	
	Попытка
	
		Парсер = Новый ПарсерАргументовКоманднойСтроки();
		
		Парсер.ДобавитьИменованныйПараметр("--ibname", "Строка подключения к БД", Истина);
		Парсер.ДобавитьИменованныйПараметр("--db-user", "Пользователь БД", Истина);
		Парсер.ДобавитьИменованныйПараметр("--db-pwd", "Пароль БД", Истина);
		Парсер.ДобавитьИменованныйПараметр("--v8version", "Версия платформы", Истина);
		Парсер.ДобавитьИменованныйПараметр("--root", "Полный путь к проекту", Истина);
		Парсер.ДобавитьИменованныйПараметр("--ordinaryapp", "Запуск толстого клиента (1 = толстый, 0 = тонкий клиент)", Истина);
		Парсер.ДобавитьИменованныйПараметр("--settings", "Путь к файлу настроек, в формате json", Истина);
		
		ДобавитьОписаниеКомандыПомощь(Парсер);
		ДобавитьОписаниеКомандыПоказатьВерсию(Парсер);
		// Работа с cf 
		ДобавитьОписаниеКомандыРазобратьНаИсходники(Парсер);
		ДобавитьОписаниеКомандыРазобратьНаИсходникиТекущуюКонфигурацию(Парсер);
		ДобавитьОписаниеКомандыСобратьИзИсходников(Парсер);
		ДобавитьОписаниеКомандыСобратьИзИсходниковТекущуюКонфигурацию(Парсер);
		// Работа с epf
		ДобавитьОписаниеКомандыСобратьEpf(Парсер);
		
		ДобавитьОписаниеКомандыСледить(Парсер);
		ДобавитьОписаниеКомандыКонфигуратор(Парсер);
		ДобавитьОписаниеКомандыКонвертироватьФайлы(Парсер);
		
		Аргументы = Парсер.РазобратьКоманду(АргументыКоманднойСтроки);
		Лог.Отладка("ТипЗнч(Аргументы)= "+ТипЗнч(Аргументы));
		Если Аргументы = Неопределено Тогда
			ВывестиСправку();
			Возврат;
		КонецЕсли;

		Команда = Аргументы.Команда;
		
		Если Команда = ВозможныеКоманды().Помощь Тогда
			ВывестиСправку();
			Возврат;
		ИначеЕсли Команда = ВозможныеКоманды().ПоказатьВерсию Тогда
			ПоказатьВерсиюКратко();
			Возврат;
		КонецЕсли;

		ПоказатьВерсию();

		Лог.Отладка("Передана команда: "+Команда);

		СоответствиеПеременных = Новый Соответствие();
		СоответствиеПеременных.Вставить("RUNNER_IBNAME", "--ibname");
		СоответствиеПеременных.Вставить("RUNNER_DBUSER", "--db-user");
		СоответствиеПеременных.Вставить("RUNNER_DBPWD", "--db-pwd");
		СоответствиеПеременных.Вставить("RUNNER_v8version", "--v8version");
		СоответствиеПеременных.Вставить("RUNNER_uccode", "--uccode");
		СоответствиеПеременных.Вставить("RUNNER_command", "--command");
		СоответствиеПеременных.Вставить("RUNNER_execute", "--execute");
		СоответствиеПеременных.Вставить("RUNNER_storage-user", "--storage-user");
		СоответствиеПеременных.Вставить("RUNNER_storage-pwd", "--storage-pwd");
		СоответствиеПеременных.Вставить("RUNNER_storage-ver", "--storage-ver");
		СоответствиеПеременных.Вставить("RUNNER_storage-name", "--storage-name");
		СоответствиеПеременных.Вставить("RUNNER_ROOT", "--root");
		СоответствиеПеременных.Вставить("RUNNER_WORKSPACE", "--workspace");
		СоответствиеПеременных.Вставить("RUNNER_PATHVANESSA", "--pathvanessa");
		СоответствиеПеременных.Вставить("RUNNER_PATHXUNIT", "--pathxunit");
		СоответствиеПеременных.Вставить("RUNNER_VANESSASETTINGS", "--vanessasettings");
		СоответствиеПеременных.Вставить("RUNNER_NOCACHEUSE", "--nocacheuse");

		//ПараметрыСистемы.КорневойПутьПроекта = УстановитьКаталогТекущегоПроекта(Аргументы.ЗначенияПараметров["--root"]);
		УстановитьКаталогТекущегоПроекта(Аргументы.ЗначенияПараметров["--root"]);

		ПутьКФайлуНастроекПоУмолчанию = ОбъединитьПути(КорневойПутьПроекта, ОбщиеМетоды.ИмяФайлаНастроек());

		НастройкиИзФайла = ОбщиеМетоды.ПрочитатьНастройкиФайлJSON(КорневойПутьПроекта,
			Аргументы.ЗначенияПараметров["--settings"], ПутьКФайлуНастроекПоУмолчанию);

		ЗначенияПараметровНизкийПриоритет = Новый Соответствие;

		Если НастройкиИзФайла.Количество() > 0 Тогда 
			ОбщиеМетоды.ДополнитьАргументыИзФайлаНастроек(Команда, ЗначенияПараметровНизкийПриоритет, НастройкиИзФайла);
		КонецЕсли;

		ОбщиеМетоды.ЗаполнитьЗначенияИзПеременныхОкружения(ЗначенияПараметровНизкийПриоритет, СоответствиеПеременных);
		ОбщиеМетоды.ДополнитьСоответствиеСУчетомПриоритета(Аргументы.ЗначенияПараметров, ЗначенияПараметровНизкийПриоритет);
		
		УстановитьКаталогТекущегоПроекта(Аргументы.ЗначенияПараметров["--root"]); // на случай переопределения этой настройки повторная установка

		Если ЗначениеЗаполнено(Аргументы.ЗначенияПараметров["--ibname"]) Тогда // TODO перенести в main.os
			Аргументы.ЗначенияПараметров.Вставить("--ibname", ОбщиеМетоды.ПереопределитьПолныйПутьВСтрокеПодключения(Аргументы.ЗначенияПараметров["--ibname"]));
		КонецЕсли;
		
		ЗапускатьТолстыйКлиент = ОбщиеМетоды.УказанПараметрТолстыйКлиент(Аргументы.ЗначенияПараметров["--ordinaryapp"],
			Лог);
		
		Если Команда = ВозможныеКоманды().СобратьEpf Тогда 
			Компилировать(ПолныйПуть(Аргументы.ЗначенияПараметров["inputPath"]), ПолныйПуть(Аргументы.ЗначенияПараметров["outputPath"]),
							Аргументы.ЗначенияПараметров["--ibname"], Аргументы.ЗначенияПараметров["--db-user"], Аргументы.ЗначенияПараметров["--db-pwd"], 
							Аргументы.ЗначенияПараметров["--v8version"]);
		ИначеЕсли Команда = ВозможныеКоманды().РазобратьНаИсходникиТекущуюКонфигурацию Тогда
			РазобратьНаИсходникиТекущуюКонфигурацию(ПолныйПуть(Аргументы.ЗначенияПараметров["outputPath"]), 
							Аргументы.ЗначенияПараметров["--ibname"], Аргументы.ЗначенияПараметров["--db-user"], Аргументы.ЗначенияПараметров["--db-pwd"],
							Аргументы.ЗначенияПараметров["--v8version"]);
		ИначеЕсли Команда = ВозможныеКоманды().РазобратьНаИсходники Тогда
			РазобратьФайлКонфигурации(ПолныйПуть(Аргументы.ЗначенияПараметров["inputPath"]), ПолныйПуть(Аргументы.ЗначенияПараметров["outputPath"]), Аргументы.ЗначенияПараметров["--v8version"]);
		ИначеЕсли Команда = ВозможныеКоманды().СобратьИзИсходников Тогда
			СобратьФайлКонфигурации(ПолныйПуть(Аргументы.ЗначенияПараметров["inputPath"]), ПолныйПуть(Аргументы.ЗначенияПараметров["outputPath"]), Аргументы.ЗначенияПараметров["--v8version"]);
		ИначеЕсли Команда = ВозможныеКоманды().СобратьИзИсходниковТекущуюКонфигурацию Тогда
			СобратьИзИсходниковТекущуюКонфигурацию(ПолныйПуть(Аргументы.ЗначенияПараметров["inputPath"]), 
							Аргументы.ЗначенияПараметров["--ibname"], Аргументы.ЗначенияПараметров["--db-user"], Аргументы.ЗначенияПараметров["--db-pwd"], Аргументы.ЗначенияПараметров["--v8version"]);

		ИначеЕсли Команда = ВозможныеКоманды().Следить Тогда 
			Следить(Аргументы.ЗначенияПараметров["inputPath"], Аргументы.ЗначенияПараметров["--filter"]);
		ИначеЕсли Команда = ВозможныеКоманды().КонвертироватьФайлы Тогда 
			КонвертироватьФайлы(ПолныйПуть(Аргументы.ЗначенияПараметров["inputPath"]), Аргументы.ЗначенияПараметров["--ibname"], Аргументы.ЗначенияПараметров["--db-user"], Аргументы.ЗначенияПараметров["--db-pwd"],
								Аргументы.ЗначенияПараметров["--v8version"]);
		ИначеЕсли Команда = ВозможныеКоманды().Конфигуратор Тогда 
			Конфигуратор(Аргументы.ЗначенияПараметров["--ibname"], Аргументы.ЗначенияПараметров["--db-user"], Аргументы.ЗначенияПараметров["--db-pwd"],
						Аргументы.ЗначенияПараметров["--storage-name"], Аргументы.ЗначенияПараметров["--storage-user"], Аргументы.ЗначенияПараметров["--storage-pwd"], Аргументы.ЗначенияПараметров["--storage-ver"],
						Аргументы.ЗначенияПараметров["--v8version"], Аргументы.ЗначенияПараметров["--dev"]);
		КонецЕсли;
		
	Исключение
		Лог.Ошибка(ОписаниеОшибки());
		КодВозврата = 1;
	КонецПопытки;
	
	ВременныеФайлы.Удалить();

КонецПроцедуры

Процедура ДобавитьОписаниеКомандыСобратьИзИсходников(Знач Парсер)
	ОписаниеКоманды = Парсер.ОписаниеКоманды(ВозможныеКоманды().СобратьИзИсходников);
	Парсер.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "inputPath");
	Парсер.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "outputPath");
	Парсер.ДобавитьКоманду(ОписаниеКоманды);
КонецПроцедуры

Процедура ДобавитьОписаниеКомандыСобратьИзИсходниковТекущуюКонфигурацию(Знач Парсер)
	ОписаниеКоманды = Парсер.ОписаниеКоманды(ВозможныеКоманды().СобратьИзИсходниковТекущуюКонфигурацию);
	Парсер.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "inputPath");
	
	Парсер.ДобавитьКоманду(ОписаниеКоманды);
КонецПроцедуры


Процедура ДобавитьОписаниеКомандыРазобратьНаИсходники(Знач Парсер)
	ОписаниеКоманды = Парсер.ОписаниеКоманды(ВозможныеКоманды().РазобратьНаИсходники);
	Парсер.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "inputPath");
	Парсер.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "outputPath");
	
	Парсер.ДобавитьКоманду(ОписаниеКоманды);
КонецПроцедуры

Процедура ДобавитьОписаниеКомандыРазобратьНаИсходникиТекущуюКонфигурацию(Знач Парсер)
	ОписаниеКоманды = Парсер.ОписаниеКоманды(ВозможныеКоманды().РазобратьНаИсходникиТекущуюКонфигурацию);
	Парсер.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "outputPath");
	Парсер.ДобавитьКоманду(ОписаниеКоманды);
КонецПроцедуры

Процедура ДобавитьОписаниеКомандыПомощь(Знач Парсер)
	ОписаниеКоманды = Парсер.ОписаниеКоманды(ВозможныеКоманды().Помощь);
	Парсер.ДобавитьКоманду(ОписаниеКоманды);
КонецПроцедуры

Процедура ДобавитьОписаниеКомандыПоказатьВерсию(Знач Парсер)
	ОписаниеКоманды = Парсер.ОписаниеКоманды(ВозможныеКоманды().ПоказатьВерсию);
	Парсер.ДобавитьКоманду(ОписаниеКоманды);
КонецПроцедуры

Процедура ДобавитьОписаниеКомандыСобратьEpf(Знач Парсер)
	ОписаниеКоманды = Парсер.ОписаниеКоманды(ВозможныеКоманды().СобратьEpf);
	Парсер.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "inputPath");
	Парсер.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "outputPath");
	Парсер.ДобавитьКоманду(ОписаниеКоманды);
КонецПроцедуры

Процедура ДобавитьОписаниеКомандыСледить(Знач Парсер) 
	ОписаниеКоманды = Парсер.ОписаниеКоманды(ВозможныеКоманды().Следить);
	Парсер.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "inputPath");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--filter", "Фильтр настроек для слежения");
	Парсер.ДобавитьКоманду(ОписаниеКоманды);
КонецПроцедуры //ДобавитьОписаниеКомандыСледить

Процедура ДобавитьОписаниеКомандыКонфигуратор(Знач Парсер) 
	ОписаниеКоманды = Парсер.ОписаниеКоманды(ВозможныеКоманды().Конфигуратор);
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--storage-name", "Строка подключения к хранилище");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--storage-user", "Пользователь хранилища");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--storage-pwd", "Пароль");
	Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, "--dev", "Признак dev режима, автоматом используем сервисную базу");

	Парсер.ДобавитьКоманду(ОписаниеКоманды);
КонецПроцедуры //ДобавитьОписаниеКомандыКонфигуратор

Процедура ДобавитьОписаниеКомандыКонвертироватьФайлы(Знач Парсер) 
	ОписаниеКоманды = Парсер.ОписаниеКоманды(ВозможныеКоманды().КонвертироватьФайлы);
	Парсер.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "inputPath");
	Парсер.ДобавитьКоманду(ОписаниеКоманды);
КонецПроцедуры //ДобавитьОписаниеКомандыСледить


	
Процедура Инициализация()
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ПараметрыСистемы.ЭтоWindows = Найти(ВРег(СистемнаяИнформация.ВерсияОС), "WINDOWS") > 0;

	Лог = Логирование.ПолучитьЛог("oscript.app.vanessa-runner");
	Попытка 
		КаталогЛогов = СокрЛП(ЗапуститьПроцесс("git rev-parse --show-toplevel"));
	Исключение
		КаталогЛогов = ВременныеФайлы.НовоеИмяФайла(ИмяСкрипта());
		СоздатьКаталог(КаталогЛогов);
	КонецПопытки;  

	Если ЭтоЗапускВКоманднойСтроке Тогда
		Лог.Закрыть(); // для исключения двойного вывода сообщений, например, в случае повторного вызова команд

		УровеньЛога = Лог.Уровень(); // учитываю возможность внешней настройки лога

		РежимРаботы = ПолучитьПеременнуюСреды("RUNNER_ENV");
		Если ЗначениеЗаполнено(РежимРаботы) И Нрег(РежимРаботы) = "debug" Тогда
			УровеньЛога = УровниЛога.Отладка;
			Лог.УстановитьУровень(УровеньЛога);
		КонецЕсли;

		Если ЭтоЗапускВКоманднойСтроке И УровеньЛога = УровниЛога.Отладка Тогда
			Аппендер = Новый ВыводЛогаВФайл();

			ИмяВременногоФайла = ОбщиеМетоды.ПолучитьИмяВременногоФайлаВКаталоге(КаталогЛогов, СтрШаблон("%1.log", ИмяСкрипта()));
			Аппендер.ОткрытьФайл(ИмяВременногоФайла);
			Лог.ДобавитьСпособВывода(Аппендер);
		КонецЕсли;
		
		Лог.УстановитьРаскладку(ЭтотОбъект);
		
		Если ЭтоЗапускВКоманднойСтроке Тогда
			ВыводПоУмолчанию = Новый ВыводЛогаВКонсоль();
			Лог.ДобавитьСпособВывода(ВыводПоУмолчанию);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////
// РЕАЛИЗАЦИЯ КОМАНД

Функция ПолныйПуть(Знач Путь, Знач КаталогПроекта ="")
	Возврат ОбщиеМетоды.ПолныйПуть(Путь, КаталогПроекта);
КонецФункции

Процедура ПоказатьВерсию()
	Сообщить("vanessa-runner v" + Версия());
	Сообщить("");
КонецПроцедуры

Процедура ПоказатьВерсиюКратко()
	Сообщить(Версия());
КонецПроцедуры

Функция КаталогПроекта()
	ФайлИсточника = Новый Файл(ТекущийСценарий().Источник);
	Возврат ФайлИсточника.Путь;
КонецФункции

Функция ИмяСкрипта()
	ФайлИсточника = Новый Файл(ТекущийСценарий().Источник);
	Возврат ФайлИсточника.ИмяБезРасширения;
КонецФункции

Функция УпаковщикВнешнихОбработок()
	Если УпаковщикВнешнихОбработок = Неопределено Тогда
		УпаковщикВнешнихОбработок = Новый УпаковщикВнешнихОбработок;
		УпаковщикВнешнихОбработок.УстановитьЛог(Лог);
	КонецЕсли;
	Возврат УпаковщикВнешнихОбработок;
КонецФункции

Функция Форматировать(Знач Уровень, Знач Сообщение) Экспорт

	Возврат СтрШаблон("%1: %2 - %3", ТекущаяДата(), УровниЛога.НаименованиеУровня(Уровень), Сообщение);

КонецФункции

ЭтоЗапускВКоманднойСтроке = ЭтоЗапускВКоманднойСтроке();

Инициализация();

Если ЭтоЗапускВКоманднойСтроке Тогда
	ОсновнаяРабота();
	ЗавершитьРаботу(КодВозврата);
КонецЕсли;
