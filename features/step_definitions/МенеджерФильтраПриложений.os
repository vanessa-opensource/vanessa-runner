// Реализация шагов BDD-фич/сценариев c помощью фреймворка https://github.com/artbear/1bdd
#Использовать "../../src"
#Использовать logos
#Использовать asserts

Перем БДД; //контекст фреймворка 1bdd
Перем Лог; //лог

// Метод выдает список шагов, реализованных в данном файле-шагов
Функция ПолучитьСписокШагов(КонтекстФреймворкаBDD) Экспорт
	БДД = КонтекстФреймворкаBDD;

	ВсеШаги = Новый Массив;

	ВсеШаги.Добавить("ЗаданыПриложения");
	ВсеШаги.Добавить("УказываюНастройкуФильтра");
	ВсеШаги.Добавить("УказываюНастройкуРежимФильтра");
	ВсеШаги.Добавить("МенеджерФильтраВозвращаетПриложения");
	ВсеШаги.Добавить("МенеджерФильтраНеВозвращаетПриложения");

	Возврат ВсеШаги;
КонецФункции

// Реализация шагов

// Процедура выполняется перед запуском каждого сценария
Процедура ПередЗапускомСценария(Знач Узел) Экспорт

КонецПроцедуры

// Процедура выполняется после завершения каждого сценария
Процедура ПослеЗапускаСценария(Знач Узел) Экспорт

КонецПроцедуры


//заданы приложения
//|приложение | пользователь   |
//|designer   | регламент      |
//|1cv8c      | пользователь1  |
//|1cv8       | пользователь2  |
Процедура ЗаданыПриложения(Знач ТаблицаДанных) Экспорт
	ТаблицаПриложений = ТаблицаПриложенийИзТаблицыДанных(ТаблицаДанных, Истина);

	БДД.СохранитьВКонтекст("ТаблицаПриложений", ТаблицаПриложений);
КонецПроцедуры

//указываю настройку фильтра ""
Процедура УказываюНастройкуФильтра(Знач Фильтр) Экспорт
	БДД.СохранитьВКонтекст("Фильтр", Фильтр);
КонецПроцедуры

//указываю настройку режим фильтра ""
Процедура УказываюНастройкуРежимФильтра(Знач РежимФильтра) Экспорт
	БДД.СохранитьВКонтекст("РежимФильтра", РежимФильтра);
КонецПроцедуры

//менеджер фильтра возвращает приложения
//    |designer   | регламент      |
//    |1cv8c      | пользователь1  |
//    |1cv8       | пользователь2  |
Процедура МенеджерФильтраВозвращаетПриложения(Знач ОжидаемаяТаблицаПриложений) Экспорт

	ТаблицаПриложений = БДД.ПолучитьИзКонтекста("ТаблицаПриложений");
	Фильтр = БДД.ПолучитьИзКонтекста("Фильтр");
	РежимФильтра = БДД.ПолучитьИзКонтекста("РежимФильтра");

	ОжидаемаяТаблицаПриложений = ТаблицаПриложенийИзТаблицыДанных(ОжидаемаяТаблицаПриложений, Ложь);
	ОжидаемаяТаблицаПриложений.Индексы.Добавить("Приложение,Пользователь");

	МенеджерФильтраПриложений = Новый МенеджерФильтраПриложений(Фильтр, РежимФильтра);
	МенеджерФильтраПриложений.УстановитьЛог(Лог);

	Для каждого Строка Из ТаблицаПриложений Цикл

		Совпадает = МенеджерФильтраПриложений.СеансПодходит(Строка.Приложение, Строка.Пользователь);
		Лог.Информация("Совпадает %1, %2", Совпадает, ОписаниеСтроки(Строка));

		Отбор = Новый Структура("Приложение,Пользователь", Строка.Приложение, Строка.Пользователь);
		ОжидаемыеСтроки = ОжидаемаяТаблицаПриложений.НайтиСтроки(Отбор);

		Если Не Совпадает Тогда
			Ожидаем.Что(ОжидаемыеСтроки, "Не совпадает - в ожиданиях не должно быть найдено строк, а они нашлись. Проверяем " + ОписаниеСтроки(Строка))
				.ИмеетДлину(0);
			Продолжить;
		КонецЕсли;

		Ожидаем.Что(ОжидаемыеСтроки, "В ожиданиях должна быть одна строка. Проверяем " + ОписаниеСтроки(Строка))
			.ИмеетДлину(1);

		ОжидаемаяСтрока = ОжидаемыеСтроки[0];

		Ожидаем.Что(Строка.Приложение, "ОжидаемаяСтрока.Приложение == СтрокаТаблицыПриложений.Приложение" + ОписаниеСтроки(Строка))
			.Равно(ОжидаемаяСтрока.Приложение);
		Ожидаем.Что(Строка.Пользователь, "ОжидаемаяСтрока.Пользователь == СтрокаТаблицыПриложений.Пользователь" + ОписаниеСтроки(Строка))
			.Равно(ОжидаемаяСтрока.Пользователь);

		ОжидаемаяТаблицаПриложений.Удалить(ОжидаемаяСтрока);
		Если Не ЗначениеЗаполнено(ОжидаемаяТаблицаПриложений) Тогда
			Прервать;
		КонецЕсли;

	КонецЦикла;

	Ожидаем.Что(ОжидаемаяТаблицаПриложений, "не должно остаться необработанных строк")
		.ИмеетДлину(0);

КонецПроцедуры

//менеджер фильтра не возвращает приложения
Процедура МенеджерФильтраНеВозвращаетПриложения() Экспорт
	МенеджерФильтраВозвращаетПриложения(ТаблицаПриложенийИзТаблицыДанных(Новый ТаблицаЗначений, Ложь));
КонецПроцедуры

Функция ТаблицаПриложенийИзТаблицыДанных(Знач ТаблицаДанных, Знач УчитыватьЗаголовок)

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Приложение");
	Результат.Колонки.Добавить("Пользователь");

	Для каждого Строка Из ТаблицаДанных Цикл

		Если УчитыватьЗаголовок Тогда
			УчитыватьЗаголовок = Ложь;
			Продолжить;
		КонецЕсли;

		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.Приложение = Строка[0];
		НоваяСтрока.Пользователь = Строка[1];

		Лог.Информация(ОписаниеСтроки(НоваяСтрока));

	КонецЦикла;

	Возврат Результат;
КонецФункции

Функция ОписаниеСтроки(Знач СтрокаТаблицыПриложений)
	Возврат СтрШаблон("%1, %2", СтрокаТаблицыПриложений.Приложение, СтрокаТаблицыПриложений.Пользователь);
КонецФункции

Лог = Логирование.ПолучитьЛог(ПараметрыСистемы.ИмяЛогаСистемы());
