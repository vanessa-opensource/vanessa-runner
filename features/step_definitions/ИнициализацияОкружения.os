#Использовать "../../src"

// Реализация шагов BDD-фич/сценариев с помощью фреймворка https://github.com/artbear/1bdd

Перем БДД; //контекст фреймворка 1bdd

// Метод выдает список шагов, реализованных в данном файле-шагов
Функция ПолучитьСписокШагов(КонтекстФреймворкаBDD) Экспорт
	БДД = КонтекстФреймворкаBDD;

	ВсеШаги = Новый Массив;

	ВсеШаги.Добавить("ЯИнициализируюРепозиторийGitВРабочемКаталоге");
	ВсеШаги.Добавить("ВСпискеБазЕстьБазаПоПути");
	ВсеШаги.Добавить("ВспискебазнахожубазудляПроекта");

	Возврат ВсеШаги;
КонецФункции

// Реализация шагов

// Процедура выполняется перед запуском каждого сценария
Процедура ПередЗапускомСценария(Знач Узел) Экспорт
	БазыДляУдаления = БДД.ПолучитьИзКонтекста("ПутиДляУдаленияПослеТеста");
	Если БазыДляУдаления = Неопределено Тогда
		БазыДляУдаления = Новый Соответствие;
	КонецЕсли;
	БДД.СохранитьВКонтекст("ПутиДляУдаленияПослеТеста", БазыДляУдаления);
КонецПроцедуры

// Процедура выполняется после завершения каждого сценария
Процедура ПослеЗапускаСценария(Знач Узел) Экспорт

	БазыДляУдаления = БДД.ПолучитьИзКонтекста("ПутиДляУдаленияПослеТеста");
	Парсер = МенеджерСпискаБаз.ПолучитьПарсерБаз();
	СписокБаз = Парсер.ПолучитьСписокБаз();
	Для каждого Элемент из БазыДляУдаления Цикл
		Попытка
			СписокБаз.Удалить(Элемент.Ключ);
		Исключение
			Сообщить(Элемент.Ключ + ":"+ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры

//Я инициализирую репозиторий git в рабочем каталоге
Процедура ЯИнициализируюРепозиторийGitВРабочемКаталоге() Экспорт
	Команда = Новый Команда;
	Команда.УстановитьСтрокуЗапуска("git init");
	Команда.УстановитьРабочийКаталог(БДД.ПолучитьИзКонтекста("РабочийКаталог"));
	КодВозврата = Команда.Исполнить();
	
	// ЗапуститьПриложение("git init" + ?(КакЧистое, " --bare", ""), КаталогРепозитория, Истина, КодВозврата);
	// КодВозврата = ИнициализироватьТестовоеХранилищеГит(ПутьГитРепозитория);
	СообщениеОшибки = СтрШаблон("неверно выполнена команда git init. 
		|Вывод команды %1", Команда.ПолучитьВывод());
	Ожидаем.Что(КодВозврата, СообщениеОшибки).Равно(0);
КонецПроцедуры

Функция ЗаменитьШаблоныВПараметрахКоманды(Знач ПараметрыКоманды)
	Рез = СтрЗаменить(ПараметрыКоманды, "<КаталогПроекта>", БДД.КаталогПроверяемогоПроекта());
	Рез = СтрЗаменить(Рез, "<РабочийКаталог>", БДД.ПолучитьИзКонтекста("РабочийКаталог"));
	Возврат Рез;
КонецФункции

//В списке баз есть база по пути "<РабочийКаталог>/./build/ib"
Процедура ВСпискеБазЕстьБазаПоПути(Знач СтрокаБазыДанных) Экспорт

	СтрокаБазыДанных = ЗаменитьШаблоныВПараметрахКоманды(СтрокаБазыДанных);
	СтрокаБазыДанных = Новый Файл(ОбъединитьПути(ТекущийКаталог(), СтрокаБазыДанных)).ПолноеИмя;

	УстановитьПутьКБазеВБазыДляУдаленияВКонтексте(СтрокаБазыДанных);

	Ожидаем.Что(МенеджерСпискаБаз.ПолучитьИмяБазыВСписке("/F"+СтрокаБазыДанных), 
		"Искали базу в списке баз /F"+СтрокаБазыДанных).Равно(Новый Файл(БДД.ПолучитьИзКонтекста("РабочийКаталог")).ИмяБезРасширения);
	
КонецПроцедуры

//В списке баз нахожу базу для проекта "<РабочийКаталог>"
Процедура Вспискебазнахожубазудляпроекта(СтрокаПутиБазы) Экспорт
	
	СтрокаПутиБазы = ЗаменитьШаблоныВПараметрахКоманды(СтрокаПутиБазы);

	УстановитьПутьКБазеВБазыДляУдаленияВКонтексте(СтрокаПутиБазы);

	Парсер = МенеджерСпискаБаз.ПолучитьПарсерБаз();
	ИмяПроекта = Новый Файл(СтрокаПутиБазы).ИмяБезРасширения;
	Ожидаем.Что(Парсер.НайтиПоИмени(ИмяПроекта)).Существует();


КонецПроцедуры

//{ Служебные функции

Процедура УстановитьПутьКБазеВБазыДляУдаленияВКонтексте(СтрокаБазыДанных)
	БазыДляУдаления = БДД.ПолучитьИзКонтекста("ПутиДляУдаленияПослеТеста");
	БазыДляУдаления.Вставить(СтрокаБазыДанных, Истина);
	БДД.СохранитьВКонтекст("ПутиДляУдаленияПослеТеста", БазыДляУдаления);
КонецПроцедуры

//}

