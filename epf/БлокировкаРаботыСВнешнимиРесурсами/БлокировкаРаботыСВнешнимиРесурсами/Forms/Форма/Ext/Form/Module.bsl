
#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЭтоКонфигурацияНаБазеБСПСервер() Тогда
		
		МожноЗавершатьРаботу = Ложь;
		ПараметрЗапускаФормы = ПараметрЗапуска;
		
		Если Не ПустаяСтрока(ПараметрЗапускаФормы) Тогда
			ТекстСообщения = НСтр("ru = 'Запуск обработчиков ожидания...'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ЗапуститьОбработчикиОжидания();
		КонецЕсли;
		
	Иначе 
		
		ТекстСообщения = НСтр("ru = 'Конфигурация не на базе БСП, обработка не поддерживается!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ЗавершитьРаботуСистемы(Ложь, Ложь);
		Возврат;
	
	КонецЕсли;
			
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Запустить(Команда)
	
	ЗапуститьОбработчикиОжидания();	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗапуститьОбработчикиОжидания()
	
	МассивПараметров = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПараметрЗапускаФормы, ";");
	
	Для Каждого Параметр Из МассивПараметров Цикл 	
		Попытка
			ЭтаФорма[Параметр] = Истина;
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Прочитан параметр: %1'"), Параметр);
		Исключение			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не установлен параметр запуска: %1'"), Параметр);	
		КонецПопытки;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЦикла;
	
	Если МассивПараметров.Количество() < 2 И ЗавершитьРаботуСистемы Тогда
		МожноЗавершатьРаботу = Истина;
		Возврат;
	КонецЕсли; 
		
	Если МассивПараметров.Количество() > 1 И ОтключитьРегламентноеЗадание Тогда 
		НаименованиеРегламентногоЗадания = СокрЛП(МассивПараметров[1]);	
		ОтключитьРегламентноеЗадание();	
	КонецЕсли;	
	
	Если РазрешитьРаботуСВнешнимиРесурсами Или ЗапретитьРаботуСВнешнимиРесурсами Тогда 
		РаботаСВнешнимиРесурсами();		
	КонецЕсли;
		
	ПодключитьОбработчикОжидания("ПроверитьВозможностьЗакрытия", 5);

КонецПроцедуры

&НаСервере
Процедура ОтключитьРегламентноеЗадание()
	
	Отбор = Новый Структура("Метаданные", НаименованиеРегламентногоЗадания);
	СписокЗаданий = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
		
	Для Каждого РегламентноеЗадание Из СписокЗаданий Цикл
		ПараметрыЗадания = Новый Структура("Использование", Ложь);
		РегламентныеЗаданияСервер.ИзменитьЗадание(РегламентноеЗадание, ПараметрыЗадания);
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Отключено регламентное задание: %1'"), РегламентноеЗадание.Наименование);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЦикла;
	МожноЗавершатьРаботу = Истина;
	
КонецПроцедуры	

&НаСервере
Процедура РаботаСВнешнимиРесурсами() 
	
	Если РазрешитьРаботуСВнешнимиРесурсами Тогда                            
		БлокировкаРаботыСВнешнимиРесурсами.РазрешитьРаботуСВнешнимиРесурсами();
		ТекстСообщения = НСтр("ru = 'Разрешена работа с внешними ресурсами'");
	ИначеЕсли ЗапретитьРаботуСВнешнимиРесурсами Тогда 
		БлокировкаРаботыСВнешнимиРесурсами.ЗапретитьРаботуСВнешнимиРесурсами();
		ТекстСообщения = НСтр("ru = 'Запрещена работа с внешними ресурсами'");
	КонецЕсли;	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	МожноЗавершатьРаботу = Истина;
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВозможностьЗакрытия() Экспорт
	
	Если МожноЗавершатьРаботу И ЗавершитьРаботуСистемы И 
			(ОтключитьРегламентноеЗадание 
			Или РазрешитьРаботуСВнешнимиРесурсами 
			Или ЗапретитьРаботуСВнешнимиРесурсами) Тогда
		ТекстСообщения = НСтр("ru = 'Завершаем работу'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ЗавершитьРаботуСистемы(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоКонфигурацияНаБазеБСПСервер()
	
	Рез = Ложь;
	Описание = Новый Структура;
	Попытка
		Выполнить("ОбновлениеИнформационнойБазыБСП.ПриДобавленииПодсистемы(Описание);");
		Рез = Описание.Имя = "СтандартныеПодсистемы";
	Исключение
		ИнфоОшибки = ИнформацияОбОшибке();
		Рез = НРег(ИнфоОшибки.ИмяМодуля) = НРег("ОбщийМодуль.ОбновлениеИнформационнойБазыБСП.Модуль");
	КонецПопытки;
	
	Возврат Рез;
	
КонецФункции

#КонецОбласти





