#Область ОписаниеПеременных

&НаКлиенте
Перем ПутьКОбработке; // каталог обработки

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УбратьПодтверждениеПриЗавершенииПрограммы();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	СтрокаЗапуска = СокрЛП(ПараметрЗапуска);

	Если СтрокаЗапуска = "" Тогда
		ПоказатьСправкуВЛоге();
		Возврат;
	КонецЕсли;

	ЗавершитьРаботуСистемы = Истина;

	Попытка
		ПутьКОбработке = ПолучитьПутьОбработки();

		ПараметрыКоманднойСтроки = ПолучитьСтруктуруПараметров(СтрокаЗапуска);
		ПреобразоватьПараметрыКоторыеНачинаютсяСТочкиКНормальнымПутям(ПараметрыКоманднойСтроки);

		ЗапуститьТолькоПроверкуПрименимостиРасширений = ЗначениеПараметраБулево("ЗапуститьТолькоПроверкуПрименимостиРасширений", ПараметрыКоманднойСтроки, Ложь);

		ПутьРасширения = ЗначениеПараметра("Путь", ПараметрыКоманднойСтроки,
			"Не задан путь расширения - формат Путь=НужныйПутьФайлаРасширения", Не ЗапуститьТолькоПроверкуПрименимостиРасширений);

		ИмяРасширения = ЗначениеПараметра("Имя", ПараметрыКоманднойСтроки,
			"Не задано имя расширения - формат Имя=МоеИмя", Ложь);

		Перезаписывать = ЗначениеПараметраБулево("Перезаписывать", ПараметрыКоманднойСтроки);
		БезопасныйРежимРасширения = ЗначениеПараметраБулево("БезопасныйРежим", ПараметрыКоманднойСтроки);
		ЗащитаОтОпасныхДействийРасширения = ЗначениеПараметраБулево("ЗащитаОтОпасныхДействий", ПараметрыКоманднойСтроки);
		ЗавершитьРаботуСистемы = ЗначениеПараметраБулево("ЗавершитьРаботуСистемы", ПараметрыКоманднойСтроки, Истина);
		ОтключитьЛогикуНачалаРаботыСистемы = ЗначениеПараметраБулево("ОтключитьЛогикуНачалаРаботыСистемы",
			ПараметрыКоманднойСтроки);
		ИспользоватьОсновныеРолиДляВсехПользователей  = ЗначениеПараметраБулево("ИспользоватьОсновныеРолиДляВсехПользователей",
			ПараметрыКоманднойСтроки, Истина);
		ПроверитьПрименимость = ЗначениеПараметраБулево("ПроверитьПрименимость", ПараметрыКоманднойСтроки, Ложь);
		ЗагружатьРасширениеПриНаличииПроблемПрименимости = ЗначениеПараметраБулево("ЗагружатьРасширениеПриНаличииПроблемПрименимости", ПараметрыКоманднойСтроки, Ложь); 	

		ПараметрыРасширения = Новый Структура;
		ПараметрыРасширения.Вставить("БезопасныйРежим", БезопасныйРежимРасширения);
		ПараметрыРасширения.Вставить("ЗащитаОтОпасныхДействий", ЗащитаОтОпасныхДействийРасширения);
		ПараметрыРасширения.Вставить("ИспользоватьОсновныеРолиДляВсехПользователей",
			ИспользоватьОсновныеРолиДляВсехПользователей); 
		ПараметрыРасширения.Вставить("ПроверитьПрименимость",
			ПроверитьПрименимость);
		ПараметрыРасширения.Вставить("ЗагружатьРасширениеПриНаличииПроблемПрименимости",
			ЗагружатьРасширениеПриНаличииПроблемПрименимости);

	Исключение
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());

		Ошибка = СтрШаблон("Неудача при обработке параметров запуска %1Параметры: %2 %1%3 %1",
			Символы.ПС, СтрокаЗапуска, ОписаниеОшибки);
		Лог(Ошибка);

		ПоказатьСправкуВЛоге();

		Если ЗавершитьРаботуСистемы Тогда
			ЗавершитьРаботу();
			Возврат;
		КонецЕсли;
	КонецПопытки;

	Попытка
		Если ЗапуститьТолькоПроверкуПрименимостиРасширений Тогда
			Лог("Указан ключ <ЗапуститьТолькоПроверкуПрименимостиРасширений> будет выполнена только проверка применимости. Расширения с этим ключем загружены не будут!", "Информация");
			ПроверитьВозможностьПрименимостиРасширений();
		Иначе	
			ЗагрузитьРасширения(ПутьРасширения, ИмяРасширения, Перезаписывать,
				ПараметрыРасширения,
				ЗавершитьРаботуСистемы, ОтключитьЛогикуНачалаРаботыСистемы);
        КонецЕсли;
	Исключение
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());

		Ошибка = СтрШаблон("Неудача при выполнении основного кода %1%2 %1",
			Символы.ПС, ОписаниеОшибки);
		Лог(Ошибка);

		Если ЗавершитьРаботуСистемы Тогда
			ЗавершитьРаботу();
		КонецЕсли;
	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Основное

&НаКлиенте
Процедура ПоказатьСправкуВЛоге()

	Лог("
		|Помощь:
		|Формат параметров Путь=КаталогФайлов;Имя=ИмяРасширения;Перезаписывать;БезопасныйРежим;ЗащитаОтОпасныхДействий;ЗавершитьРаботуСистемы;
		|  или Путь=ПутьФайла;БезопасныйРежим=Истина;ЗащитаОтОпасныхДействий=Ложь;ИспользоватьОсновныеРолиДляВсехПользователей=Ложь;ЗавершитьРаботуСистемы;
		|
		|Можно указать как путь каталога с несколькими расширениями, так и путь каталога с одним расширением.
		|
		|Любые параметры, кроме первого (Путь), являются необязательными.
		|Если указан параметр ЗапуститьТолькоПроверкуПрименимостиРасширений выполняется только проверка применимости всех расширений в конфигурации. Параметр (Путь) в этом случае указывать не нужно.
		|Если параметр (БезопасныйРежим;ЗащитаОтОпасныхДействий;ЗавершитьРаботуСистемы) не указан, расширение будет загружено без него.
		|Если параметр Перезаписывать указан, если соответствующие расширение будет переустановлено.
		|	Если параметр Перезаписывать не указан, будет выдана ошибка, если расширение с таким именем уже установлено!.
		|Если указано ЗавершитьРаботуСистемы=Ложь, работа 1С:Предприятия не будет завершена.
		|Если параметр ПроверитьПрименимость указан, перед загрузкой расширения будет выполнена проверка на наличие проблем применимости расширения.
		|	Если, несмотря на наличие проблем применимости, нужно загрузить расширение - необходимо указать параметр ЗагружатьРасширениеПриНаличииПроблемПрименимости 
		|
		|По умолчанию простой режим запуска Путь=Путь загружает расширение из файла, отключая безопасный режим и защиту от опасных действий.
		|Для платформы 8.3.15 и выше по умолчанию расширение загружается с использованим основных ролей расширения для всех пользователей.
		|
		|Пример запуска через vanessa-runner - vrunner run --command ""Путь=./МоеРасширение.cfe;ЗавершитьРаботуСистемы"" --execute $runnerRoot/epf/ЗагрузитьРасширениеВРежимеПредприятия.epf",

		"Информация");

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРасширения(ПутьРасширения, Знач ИмяРасширения, Перезаписывать,
						ПараметрыРасширения,
						ЗавершитьРаботуСистемы, ОтключитьЛогикуНачалаРаботыСистемы)

	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ПутьРасширения", ПутьРасширения);
	ДопПараметры.Вставить("ИмяРасширения", ИмяРасширения);
	ДопПараметры.Вставить("Перезаписывать", Перезаписывать);
	ДопПараметры.Вставить("ЗавершитьРаботуСистемы", ЗавершитьРаботуСистемы);
	ДопПараметры.Вставить("ОтключитьЛогикуНачалаРаботыСистемы", ОтключитьЛогикуНачалаРаботыСистемы);
	ДопПараметры.Вставить("ПараметрыРасширения", ПараметрыРасширения);

	Обработчик = Новый ОписаниеОповещения("ОбработкаПоискаРасширенийВКаталоге", ЭтаФорма, ДопПараметры);
	НачатьПоискФайлов(Обработчик, ПутьРасширения, "*.cfe", Истина);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПоискаРасширенийВКаталоге(Знач НайденныеФайлы, Знач ДопПараметры) Экспорт

	Попытка

		ПутьРасширения = ДопПараметры.ПутьРасширения;
		ИмяРасширения = ДопПараметры.ИмяРасширения;
		Перезаписывать = ДопПараметры.Перезаписывать;
		ЗавершитьРаботуСистемы = ДопПараметры.ЗавершитьРаботуСистемы;
		ОтключитьЛогикуНачалаРаботыСистемы = ДопПараметры.ОтключитьЛогикуНачалаРаботыСистемы;
		ПараметрыРасширения = ДопПараметры.ПараметрыРасширения;

		Если Не ЗначениеЗаполнено(НайденныеФайлы) Тогда
			НайденныеФайлы = Новый Массив;
			Файл = Новый Файл(ПутьРасширения);
			НайденныеФайлы.Добавить(Файл);
		КонецЕсли;

		Если Не ЗначениеЗаполнено(НайденныеФайлы) Тогда
			ВызватьИсключение "Не найдено файлов-расширений для пути " + ПутьРасширения;
		КонецЕсли;

		Для Каждого Файл Из НайденныеФайлы Цикл
			ПутьФайла = Файл.ПолноеИмя;
			ДвоичныеДанные = Новый ДвоичныеДанные(ПутьФайла);

			Если ПустаяСтрока(ИмяРасширения) Тогда
				ИмяРасширения = Файл.ИмяБезРасширения;
			КонецЕсли;

			Попытка
				УстановитьРасширение(ИмяРасширения, ДвоичныеДанные, Перезаписывать, ПараметрыРасширения);
			Исключение
				ВызватьИсключение ПутьФайла + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			КонецПопытки;

		КонецЦикла;

		ОбновитьПараметрыРаботыВерсийРасширений(ОтключитьЛогикуНачалаРаботыСистемы);
	Исключение
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());

		Ошибка = СтрШаблон("Неудача при выполнении основного кода %1%2 %1",
			Символы.ПС, ОписаниеОшибки);
		Лог(Ошибка);

	КонецПопытки;

	Если ЗавершитьРаботуСистемы Тогда
		ЗавершитьРаботу();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьРасширение(Имя, ДвоичныеДанныеРасширения, Перезаписывать,
								ПараметрыРасширения,
								ПовторнаяУстановка = Ложь)

	РасширенияДо = РасширенияКонфигурации.Получить();

	ОписаниеЗащиты = Новый("ОписаниеЗащитыОтОпасныхДействий");
	ОписаниеЗащиты.ПредупреждатьОбОпасныхДействиях = ПараметрыРасширения.ЗащитаОтОпасныхДействий;
	
	ПроверитьПрименимость = ПараметрыРасширения.ПроверитьПрименимость;
	ЗагружатьРасширениеПриНаличииПроблемПрименимости = ПараметрыРасширения.ЗагружатьРасширениеПриНаличииПроблемПрименимости;	

	Расширение = РасширенияКонфигурации.Создать();
	Расширение.БезопасныйРежим = ПараметрыРасширения.БезопасныйРежим;
	Расширение.ЗащитаОтОпасныхДействий = ОписаниеЗащиты;

	Если Версия8315ИлиВыше() Тогда
		Расширение.ИспользоватьОсновныеРолиДляВсехПользователей =
			ПараметрыРасширения.ИспользоватьОсновныеРолиДляВсехПользователей;
	КонецЕсли;
		
	Если ПроверитьПрименимость И Не ПовторнаяУстановка Тогда
		МассивПроблемПрименимости = Расширение.ПроверитьВозможностьПрименения(ДвоичныеДанныеРасширения, Истина);
		ВывестиДанныеОПроблемахПрименимости(МассивПроблемПрименимости, Имя);
		Если МассивПроблемПрименимости.Количество() > 0 И НЕ ЗагружатьРасширениеПриНаличииПроблемПрименимости Тогда
			ЛогСервер("Расширение не удалось установить. Обнаружены ошибки применимости!
			| Если вы хотите загрузить расширение не смотря на ошибки применимости, то используйте параметр <ЗагружатьРасширениеПриНаличииПроблемПрименимости;>");
			ВызватьИсключение "Установка не удалась";	
		КонецЕсли;	
	КонецЕсли;	
	
	Попытка
		Расширение.Записать(ДвоичныеДанныеРасширения);
	Исключение
		ИнфоОшибки = ИнформацияОбОшибке();
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнфоОшибки);

		Если ПовторнаяУстановка Тогда
			ВызватьИсключение;
		КонецЕсли;

		ЛогСервер("Расширение не удалось установить. Пытаюсь удалить существующее расширение по имени и повторно установить
		|Проблема:
		|" + ОписаниеОшибки, "");

		УдалитьРасширение(Имя);
		УстановитьРасширение(Имя, ДвоичныеДанныеРасширения, Перезаписывать, ПараметрыРасширения, Истина);

		Возврат;

	КонецПопытки;

	РасширенияПосле = РасширенияКонфигурации.Получить();
	НовыеЭлементы = РазностьМассивов(РасширенияПосле, РасширенияДо);

	Если Не ЗначениеЗаполнено(НовыеЭлементы) Тогда
		ЛогСервер("Не найдено новых установленных расширений после установки расширения");
		Возврат;
	КонецЕсли;

	ВнутреннееИмя = НовыеЭлементы[0].Имя;

	СообщитьОбУспешнойУстановке(ПараметрыРасширения, ВнутреннееИмя);

КонецПроцедуры

&НаСервере
Процедура УдалитьРасширение(Имя)

	Расширение = РасширениеПоИмени(Имя);

	Расширение.Удалить();

	ЛогСервер("Расширение удалено: " + Имя, "");

КонецПроцедуры

&НаСервере
Функция РасширениеПоИмени(Знач Имя)

	Отбор = Новый Структура("Имя", Имя);
	Расширения = РасширенияКонфигурации.Получить(Отбор);
	Если Не ЗначениеЗаполнено(Расширения) Тогда
		ВызватьИсключение "Не удалось найти расширение по имени " + Имя;
	КонецЕсли;

	Возврат Расширения[0];

КонецФункции

&НаСервере
Процедура СообщитьОбУспешнойУстановке(Знач ПараметрыРасширения, Знач Имя)

	Перем Расширение, Сообщение, Уровень;

	Уровень = "Информация";

	Расширение = РасширениеПоИмени(Имя);
	ЛогСервер(СтрШаблон("Установлено расширение %1, версия %2", Расширение.Имя , Расширение.Версия), Уровень);

	Если ПараметрыРасширения.БезопасныйРежим Тогда
		Сообщение = "Безопасный режим установлен!";
	Иначе
		Сообщение = "Безопасный режим снят!";
	КонецЕсли;
	ЛогСервер(Сообщение, Уровень);

	Если ПараметрыРасширения.ЗащитаОтОпасныхДействий Тогда
		Сообщение = "Защита от опасных действий установлена!";
	Иначе
		Сообщение = "Защита от опасных действий снята!";
	КонецЕсли;
	ЛогСервер(Сообщение, Уровень);

	Если Версия8315ИлиВыше() Тогда

		Если ПараметрыРасширения.ИспользоватьОсновныеРолиДляВсехПользователей Тогда
			Сообщение = "Установлен режим использования основных ролей расширения!";
		Иначе
			Сообщение = "Режим использования основных ролей расширения снят!";
		КонецЕсли;
		ЛогСервер(Сообщение, Уровень);

	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция РазностьМассивов(Знач Массив, Знач МассивВычитания)

	Результат = Новый Массив;
	Для Каждого Элемент Из Массив Цикл
		Если МассивВычитания.Найти(Элемент) = Неопределено Тогда
			Результат.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции

&НаСервере
Процедура ОбновитьПараметрыРаботыВерсийРасширений(ОтключитьЛогикуНачалаРаботыСистемы)

	Если Не ОтключитьЛогикуНачалаРаботыСистемы
		И Метаданные.Подсистемы.Найти("СтандартныеПодсистемы") <> Неопределено Тогда

		МодульРегистрыСведенийПараметрыРаботыВерсийРасширений = Вычислить("РегистрыСведений.ПараметрыРаботыВерсийРасширений");
		МодульРегистрыСведенийПараметрыРаботыВерсийРасширений.ОбновитьПараметрыРаботыРасширений();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверитьВозможностьПрименимостиРасширений()
	МассивПроблемПрименимости = РасширенияКонфигурации.ПроверитьВозможностьПримененияВсех();
	ВывестиДанныеОПроблемахПрименимости(МассивПроблемПрименимости);
	Если МассивПроблемПрименимости.Количество() > 0 Тогда
		ВызватьИсключение "При проверке применимости обнаружены ошибки!";
	Иначе
		ЛогСервер("Ошибок применимости не обнаружено!", "Информация")	      	
	КонецЕсли;	
КонецПроцедуры	

&НаСервере
Процедура ВывестиДанныеОПроблемахПрименимости(МассивПроблемПрименимости, ИмяНовогоРасширения = "")

	СтрокаОшибокПрименимости = "";
	Шаблон = "В расширении <%1> обнаружена проблема с важностью <%2>:
	|%3";

	Для Каждого Проблема Из МассивПроблемПрименимости Цикл 
		СтрокаОшибокПрименимости = СтрокаОшибокПрименимости + Символы.ПС + СтрШаблон(Шаблон, 
																					?(ЗначениеЗаполнено(Проблема.Расширение.Имя), Проблема.Расширение.Имя, ИмяНовогоРасширения), 
																					Строка(Проблема.Важность), 
																					Проблема.Описание);	
	КонецЦикла;	                                                                                                                                                
	
	Если НЕ СтрокаОшибокПрименимости = "" Тогда 
		ЛогСервер("При проверке применимости расширения обнаружены следующие проблемы:
		|
		|" + СтрокаОшибокПрименимости, "Информация");
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область БиблиотекаЗапускаВанессаРаннер

&НаСервере
Процедура УбратьПодтверждениеПриЗавершенииПрограммы()

	Если Метаданные.Подсистемы.Найти("СтандартныеПодсистемы") <> Неопределено Тогда
		МодульОбщегоНазначения = Вычислить("ОбщегоНазначения");
		Попытка
			МодульОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ОбщиеНастройкиПользователя",
				"ЗапрашиватьПодтверждениеПриЗавершенииПрограммы", Ложь);

		Исключение
			// Данного модуля и метода может не быть в конфигурации
			ЛогСервер("Неудача в УбратьПодтверждениеПриЗавершенииПрограммы. Конфигурация не основана на БСП?", "Предупреждение");
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПолучитьПутьОбработки()

	Перем ФайлПути, Результат;

	Результат = ПолучитьПутьКОбработкеСервер();
	Если НЕ ПустаяСтрока(ПутьКОбработке) Тогда
		ФайлПути = Новый Файл(ПутьКОбработке);
		Результат = ФайлПути.Путь;
	КонецЕсли;

	Возврат Результат;
КонецФункции

// портировано из Vanessa-ADD

&НаСервере
Функция ПолучитьПутьКОбработкеСервер()

	ОбъектНаСервере = ОбъектНаСервере();
	ИспользуемоеИмяФайла = ОбъектНаСервере.ИспользуемоеИмяФайла;
	ПрефиксИмени = НРег(Лев(ИспользуемоеИмяФайла, 6));
    Если (ПрефиксИмени <> "e1cib/") И (ПрефиксИмени <> "e1cib\") Тогда
		Возврат ИспользуемоеИмяФайла;
	КонецЕсли;

	Возврат "";
КонецФункции

Функция ОбъектНаСервере()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

// портировано из Vanessa-ADD

&НаКлиенте
Функция ПолучитьСтруктуруПараметров(Стр)
	Результат = Новый Структура;

	Массив = РазложитьСтрокуВМассивПодстрок(Стр, ";");
	Для каждого Элем Из Массив Цикл
		Поз = Найти(Элем, "=");
		Если Поз > 0 Тогда
			Ключ     = Лев(Элем, Поз - 1);
			Значение = Сред(Элем, Поз + 1);
			Попытка
				Результат.Вставить(СокрЛП(Ключ), СокрЛП(Значение));
			Исключение
				Лог("Не смог получить значение из строки запуска: " + Ключ);
			КонецПопытки;
		Иначе
			Если НЕ ПустаяСтрока(Элем) Тогда
				Попытка
					Результат.Вставить(Элем, Истина);
				Исключение
					Лог("Не смог получить значение из строки запуска: " + Элем);
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ЗначениеПараметра(Знач ИмяПараметра, Знач ПараметрыКоманднойСтроки, Знач ТекстОшибки,
							Знач ВыбрасыватьИсключение = Истина)

	Результат = "";
	Если Не ПараметрыКоманднойСтроки.Свойство(ИмяПараметра, Результат)
			Или Не ЗначениеЗаполнено(Результат) Тогда

		Если ВыбрасыватьИсключение Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

&НаКлиенте
Функция ЗначениеПараметраБулево(Знач ИмяПараметра, Знач ПараметрыКоманднойСтроки, Знач ПоУмолчанию = Ложь)

	Результат = Ложь;
	Если Не ПараметрыКоманднойСтроки.Свойство(ИмяПараметра, Результат)
			Или Не ЗначениеЗаполнено(Результат) Тогда

		Возврат ПоУмолчанию;
	КонецЕсли;

	Возврат Булево(Результат);

КонецФункции

// портировано из Vanessa-ADD

&НаКлиентеНаСервереБезКонтекста
Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",",
		Знач ПропускатьПустыеСтроки = Неопределено)

	Результат = Новый Массив;

	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;

	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;

	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Результат.Добавить(Строка);
	КонецЕсли;

	Возврат Результат;

КонецФункции

// портировано из Vanessa-ADD

&НаКлиенте
Процедура ПреобразоватьПараметрыКоторыеНачинаютсяСТочкиКНормальнымПутям(СтруктураПараметров)
	МассивКлючей = Новый Массив;

	Для каждого ПараметрБилда Из СтруктураПараметров Цикл
		Если Лев(ПараметрБилда.Значение, 1) = "."  Или
				Найти(ПараметрБилда.Значение, "$instrumentsRoot") > 0 Тогда

			МассивКлючей.Добавить(ПараметрБилда.Ключ);

		КонецЕсли;
	КонецЦикла;

	Для каждого Ключ Из МассивКлючей Цикл
		Было  = СтруктураПараметров[Ключ];
		Стало = ПреобразоватьПутьСТочкамиКНормальномуПути(СтруктураПараметров[Ключ]);
		Стало = ЗаменитьСлеши(Стало);

		СтруктураПараметров.Вставить(Ключ, Стало);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПреобразоватьПутьСТочкамиКНормальномуПути(ОригСтр)

	Если Найти(ОригСтр, "$instrumentsRoot") > 0 И НЕ ПустаяСтрока(ПутьКОбработке) Тогда
		ОригСтр = СтрЗаменить(ОригСтр, "$instrumentsRoot", ДополнитьСлешВПуть(ПутьКОбработке));
		Возврат ОригСтр;
	КонецЕсли;

	Возврат ОригСтр;

КонецФункции

// портировано из Vanessa-ADD

&НаКлиенте
Функция ДополнитьСлешВПуть(Знач Каталог)
	разделитель = ПолучитьРазделительПути();

	Если ПустаяСтрока(Каталог) Тогда
		Возврат Каталог;
	КонецЕсли;

	Если Прав(Каталог, 1) <> разделитель Тогда
		Каталог = Каталог + разделитель;
	КонецЕсли;
	Возврат Каталог;
КонецФункции

&НаКлиенте
Функция ЗаменитьСлеши(Знач Путь)
	Результат = СтрЗаменить(Путь, "\", ПолучитьРазделительПути());
	Результат = СтрЗаменить(Результат, "/", ПолучитьРазделительПути());
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ЗавершитьРаботу()
	// в таком варианте 1С не отдает лог в файл своего лога ( -- ПрекратитьРаботуСистемы(Ложь);
	ЗавершитьРаботуСистемы(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура Лог(Знач Комментарий, Знач Уровень = "Ошибка")

	Если Не ЗначениеЗаполнено(Уровень) Тогда
		Уровень = "Информация";
	КонецЕсли;

	СообщениеПользователю = Новый СообщениеПользователю;
	СообщениеПользователю.Текст = Уровень + ": " + Комментарий;
	СообщениеПользователю.Сообщить();

	ЗаписьЖурналаРегистрацииСервер(Комментарий, Уровень);

КонецПроцедуры

&НаСервере
Процедура ЛогСервер(Знач Комментарий, Знач Уровень = "Ошибка")

	Если Не ЗначениеЗаполнено(Уровень) Тогда
		Уровень = "Информация";
	КонецЕсли;

	СообщениеПользователю = Новый СообщениеПользователю;
	СообщениеПользователю.Текст = Уровень + ": " + Комментарий;
	СообщениеПользователю.Сообщить();

	ЗаписьЖурналаРегистрацииСервер(Комментарий, Уровень);

КонецПроцедуры

&НаСервере
Процедура ЗаписьЖурналаРегистрацииСервер(Знач Комментарий, Знач Уровень)

	Если НРег(Уровень) = "ошибка" Тогда
		УровеньЖР = УровеньЖурналаРегистрации.Ошибка;
	ИначеЕсли НРег(Уровень) = "предупреждение" Тогда
		УровеньЖР = УровеньЖурналаРегистрации.Предупреждение;
	Иначе
		УровеньЖР = УровеньЖурналаРегистрации.Информация;
	КонецЕсли;

	ЗаписьЖурналаРегистрации(КлючЖР(), УровеньЖР, Неопределено, Неопределено, Комментарий);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(Версия1, Версия2) Экспорт
	Массив1 = РазложитьСтрокуВМассивПодстрок(Версия1, ".");
	Массив2 = РазложитьСтрокуВМассивПодстрок(Версия2, ".");

	Версия1БольшеИлиРавно = Истина;
	Для Ккк = 0 По Мин(Массив1.Количество(), Массив2.Количество()) - 1 Цикл
		Элем1 = Массив1.Получить(Ккк);
		Элем2 = Массив2.Получить(Ккк);

		Если Число(Элем2) > Число(Элем1) Тогда
			Версия1БольшеИлиРавно = Ложь;
		ИначеЕсли Число(Элем2) < Число(Элем1) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат Версия1БольшеИлиРавно;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Версия8315ИлиВыше()
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Возврат ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения, "8.3.15.1");
КонецФункции

#КонецОбласти

&НаСервере
Функция КлючЖР()
	Возврат "VanessaRunner." + ОбъектНаСервере().Метаданные().Имя;
КонецФункции

#КонецОбласти
