#Использовать logos
#Использовать ParserFileV8i
#Использовать strings

Перем Лог;
Перем ФайлПарсераСпискаБаз Экспорт;
Перем КэшПодключенныхБаз;

Функция ПолучитьЛог()
	Если Лог = Неопределено Тогда
		Лог = Логирование.ПолучитьЛог(ПараметрыСистемы.ИмяЛогаСистемы());
	КонецЕсли;
	Возврат Лог;
КонецФункции


//Возвращает парсер списка баз, для возможности его модификации.
Функция ПолучитьПарсерБаз() Экспорт
	Перем Парсер;
	Парсер = Новый ПарсерСпискаБаз;
	Если ЗначениеЗаполнено(ФайлПарсераСпискаБаз) Тогда 
		Парсер.УстановитьФайл(ФайлПарсераСпискаБаз);
	Иначе 
		СистемнаяИнформация = Новый СистемнаяИнформация;
		ЭтоWindows = Найти(ВРег(СистемнаяИнформация.ВерсияОС), "WINDOWS") > 0;
		Если НЕ ЭтоWindows Тогда
			ЗначениеПеременной = ПолучитьПеременнуюСреды(ВРег("HOME"));
			ФайлСпискаБаз = Новый Файл(ОбъединитьПути(ЗначениеПеременной, ".1C/1cestart/ibases.v8i")).ПолноеИмя;
			Парсер.УстановитьФайл(ФайлСпискаБаз);
		КонецЕсли;
	КонецЕсли;

	Возврат Парсер;
КонецФункции

//Получает строку названия базы в списке подключения 
//
//	Параметры:
//		СтрокаПодключения - Строка - строка подключения к базе
//							Примеры: /F"d:\path", /S"server1c\base", Connect=File="/tmp/base
//		ВидЗначения - Строка - ключ из структуры описания базы, по умолчанию Name, можно получить ID для очистки кэша.
//		Парсер - ПарсерСпискаБаз - для целей тестирования и ускорения поиска, возможно переопределить. 
//
//	Возвращаемое значение:
//		Строка - имя базы в списке
//		Неопределено - в случаи ошибки поиска, парсинга или какой другой.
//
Функция ПолучитьИмяБазыВСписке(Знач СтрокаПодключения, Знач ВидЗначения = "Name", Знач Парсер = Неопределено) Экспорт
	Лог = ПолучитьЛог();
	Результат = Неопределено;
	СтрокаПоиска = "";
	Попытка
		Если Парсер = Неопределено Тогда
			Парсер = ПолучитьПарсерБаз();
		КонецЕсли;
		СписокБаз = Парсер.ПолучитьСписокБаз();
	Исключение
		Лог.Отладка("Загрузка файла списка баз "+ОписаниеОшибки());
		Возврат Результат;
	КонецПопытки;

	Если СписокБаз = Неопределено Тогда 
		Возврат Результат;
	КонецЕсли;

	СтрокаПоиска = СтрокаКоннекта(СтрокаПодключения);

	Если ПустаяСтрока(СтрокаПоиска) Тогда 
		Возврат Результат;
	КонецЕсли;

	Для каждого База Из СписокБаз Цикл
		СтруктураАдреса = База.Значение;
		НеобходимВыход = Ложь;
		Для каждого Часть Из СтруктураАдреса Цикл
			Если Часть.Ключ = "Connect" И СтрокаПоиска = Часть.Значение.String Тогда
				Попытка
					Результат = СтруктураАдреса[ВидЗначения];
				Исключение
					Лог.Ошибка(
						СтрШаблон("Получить описание БД по виду <%1> ошибка <%2>",ВидЗначения, ОписаниеОшибки()));
				КонецПопытки;
				НеобходимВыход = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;

		Если НеобходимВыход Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции //ПолучитьИмяБазыВСписке

// Добавляет в список базу новую базу по наименованию проекта, в случаи задвоения к наименованию 
// добавляем еще и CRC32 от полного пути проекта.
//
//	Параметры:
//		СтрокаПодключения - Строка - Строка подключения к базе данных
//		НазваниеПроекта - Строка - Название проекта, в случаи передачи КорневойПутьПроекта, тогда определяет как ИмяБезРасширения
//		ДопПараметры - Структура - дополнительные параметры в виде структуры,с необязательными значениями
//			+ Version - Строка - версия платформы для запуска, пустое значение или "8.3", "8.3.10"
//			+ RootPath - Строка - путь к каталогу с проектом, если пустой, тогда берем текущий каталог. 
//			+ * - дополнительные ключи, которые можно записать в ibases.v8i
//	
Процедура ДобавитьБазуВСписокБаз(Знач СтрокаПодключения, Знач НазваниеПроекта = "", ДопПараметры = Неопределено) Экспорт
	Перем КорневойПутьПроекта;
	Лог = ПолучитьЛог();
	Если  ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		КорневойПутьПроекта = ?(ЗначениеЗаполнено(ДопПараметры["RootPath"]), ТекущийКаталог(), ДопПараметры["RootPath"]);
	Иначе
		КорневойПутьПроекта = ТекущийКаталог();
	КонецЕсли;

	Провайдер = Новый ХешированиеДанных(ХешФункция.CRC32);
	Провайдер.Добавить(КорневойПутьПроекта);
	МассивНаименований = Новый Массив;
	МассивНаименований.Добавить(СокрЛП(НазваниеПроекта));
	МассивНаименований.Добавить(СокрЛП(НазваниеПроекта) + "_" + СокрЛП(Провайдер.ХешСуммаСтрокой));
	Провайдер.Добавить(СтрокаПодключения);
	МассивНаименований.Добавить(СокрЛП(НазваниеПроекта) + "_" + СокрЛП(Провайдер.ХешСуммаСтрокой));

	//База уже есть в списке, ничего не делаем.
	ИмяБазыВСписке = ПолучитьИмяБазыВСписке(СтрокаПодключения);
	Если ЗначениеЗаполнено(ИмяБазыВСписке) Тогда 
		Лог.Отладка(СтрШаблон("Базу нашли в списке <%1>, пропускаем добавление", ИмяБазыВСписке));
		Возврат;
	КонецЕсли;

	ДобавилиБазу = Ложь;
	Попытка
		Парсер = ПолучитьПарсерБаз();
		СписокБаз = Парсер.ПолучитьСписокБаз();
	Исключение
		Лог.Отладка("ДобавитьБазуВСписокБаз: Загрузка файла списка баз "+ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Для Каждого ИмяБазы из МассивНаименований Цикл
		Если Парсер.НайтиПоИмени(ИмяБазы) = Неопределено Тогда
			ДобавилиБазу = Истина;
			ОписаниеБазы = ОписаниеБазыВСписке(ДопПараметры);
			ОписаниеБазы.Вставить("Name", ИмяБазы);
			ОписаниеБазы.Вставить("Connect", Новый Структура("String", СтрокаКоннекта(СтрокаПодключения)));
			СписокБаз.Вставить(ИмяБазы, ОписаниеБазы);
			Попытка
				Парсер.ЗаписатьСписокБаз(СписокБаз);
			Исключение
				Лог.Ошибка(СтрШаблон("Запись нового списка <%1>, ошибка <%2>", ИмяБазы, 
					ОписаниеОшибки()));
			КонецПопытки;
			Прервать;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры //ДобавитьБазуВСписокБаз

Функция СтрокаКоннекта(Знач СтрокаПодключения)
	Результат = "";
	Если Врег(Лев(СтрокаПодключения, 2)) = "/F" Тогда
		//Connect=File="/home/evgensosna/projects/land/build/ib";
		//Кавычки убираем два раза, вдруг кавычки в кавычках. 
		СтрокаПредварительно = ОбщиеМетоды.УбратьКавычкиВокругПути(Сред(СтрокаПодключения,3, СтрДлина(СтрокаПодключения)-2));
		СтрокаПредварительно = СтрЗаменить(СтрокаПредварительно, "/", ПолучитьРазделительПути());
		СтрокаПредварительно = СтрЗаменить(СтрокаПредварительно, "\", ПолучитьРазделительПути());
		СтрокаПредварительно = Новый Файл(СтрокаПредварительно).ПолноеИмя;
		Результат = "Connect=File=""" + СтрокаПредварительно + """";
	ИначеЕсли Врег(Лев(СтрокаПодключения, 2)) = "/S" Тогда
		//Connect=Srvr="serverssl.service.th.consul";Ref="ssl";
		РезультатПромежуточный = ОбщиеМетоды.УбратьКавычкиВокругПути(
				ОбщиеМетоды.УбратьКавычкиВокругПути(Сред(СтрокаПодключения,3))
				);
		Разделитель = ?(Найти(Результат, "/")>0, "/", "\");
		МассивПодключения = 
			СтроковыеФункции.РазложитьСтрокуВМассивПодстрок(РезультатПромежуточный, Разделитель);
		Если МассивПодключения.Количество() = 2 Тогда 
			Результат = СтрШаблон("Connect=Srvr=""%1"";Ref=""%2"";", МассивПодключения[0], МассивПодключения[1]);
		КонецЕсли;
	ИначеЕсли Врег(Лев(СтрокаПодключения, 7)) = "Connect" Тогда
		Результат = СтрокаПодключения;
	КонецЕсли;
	Возврат Результат;
КонецФункции // СтрокаКоннекта(Знач СтрокаПодключения)

//Возвращает структуру с описанием базы данных
//
//	Параметры:
//		ДопПараметры - Структура - произвольные данные, которые добавим к результирующей структуре.
//
//	Возвращаемое значение:
//		Структура с минимальным описанием базы данных.
Функция ОписаниеБазыВСписке(ДопПараметры)
	Результат = Новый Структура();
	Результат.Вставить("Connect","");
	// UUID генерим сразу, т.к. структура новая.
	Результат.Вставить("ID", Новый УникальныйИдентификатор()); 
	Результат.Вставить("OrderInList", ТекущаяУниверсальнаяДатаВМиллисекундах());
	Результат.Вставить("Folder", "/");
	Результат.Вставить("OrderInTree", ТекущаяУниверсальнаяДатаВМиллисекундах());
	Результат.Вставить("External", "0");
	Результат.Вставить("ClientConnectionSpeed", "Normal");
	Результат.Вставить("App", "Auto");
	Результат.Вставить("WA", "1");
	Результат.Вставить("Version", "");
	Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		Для каждого Элемент из ДопПараметры Цикл
			Результат.Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЦикла;
	КонецЕсли;

	Возврат Результат;
КонецФункции //ОписаниеБазыВСписке

Функция ПреобразоватьСтрокуПодключения(Знач СтрокаПодключения = Неопределено) Экспорт
	Лог = ПолучитьЛог();
	Если КэшПодключенныхБаз = Неопределено Тогда
		КэшПодключенныхБаз = Новый Соответствие;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(СтрокаПодключения) Тогда 
		Возврат СтрокаПодключения;
	КонецЕсли;

	Если КэшПодключенныхБаз.Получить(СтрокаПодключения) = Неопределено Тогда
		Результат = ПолучитьИмяБазыВСписке(СтрокаПодключения);
		КэшПодключенныхБаз.Вставить(СтрокаПодключения, СтрШаблон("/IBName ""%1"" ", Строка(Результат)));
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			КэшПодключенныхБаз.Вставить(СтрокаПодключения, Ложь);
			Возврат СтрокаПодключения;
		КонецЕсли;
	КонецЕсли;

	Результат = КэшПодключенныхБаз.Получить(СтрокаПодключения);
	Если ТипЗнч(Результат) = Тип("Булево") Тогда
		Результат = СтрокаПодключения;
	КонецЕсли;
	
	Лог.Отладка(СтрШаблон("Кэш подключения БД %1 преобразовали в %2", СтрокаПодключения, Результат));
	
	Возврат Результат;
	
КонецФункции //ПреобразоватьСтрокуПодключения

//Возвращает строку с именем в общем списке баз или же исходную, с условием использования кэша. 
//	Параметры:
//		СтрокаПодключения - Строка - строка подключения к базе, пример /F./build/ib , /Sserveronec/ib
//		НеИспользоватьКэш - Булево - 
//			Истина - не использовать кэш платформы для ускорения операций с базой
// 			Ложь - использовать и попытаться найти данную строку подключения в списке баз данных. 
//			По умолчанию Истина.
//
//	Возвращаемое значение:
//		Строка - преобразованная СтрокаПодключения, что и на входе или же с учетом имени в списке баз /IBName "test"
// Функция ПолучитьСтрокуПодключенияСКэшем(Знач СтрокаПодключения, ИспользоватьКэш = "0") Экспорт
Функция ПолучитьСтрокуПодключенияСКэшем(Знач СтрокаПодключения, Знач НеИспользоватьКэш) Экспорт
	Перем Результат;

	Если НеИспользоватьКэш = Неопределено Тогда
		НеИспользоватьКэш = Ложь;
	КонецЕсли;
	Результат = ?(НеИспользоватьКэш, СтрокаПодключения, ПреобразоватьСтрокуПодключения(СтрокаПодключения));

	Возврат Результат;
КонецФункции // ПолучитьСтрокуПодключенияСКэшем()
