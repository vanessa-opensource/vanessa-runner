
// СформироватьОтчетВФорматеJUnit
//	Создает отчет об ошибках в формате JUnit
// Параметры:
//   ОшибокНет - Булево - Признак наличия ошибок
//   РезультатТестирования - Структура - Набор параметров результата тестирования
//   ПутьОтчетаВФорматеJUnitxml - Строка - Путь к создаваемому файлу отчета
//   ПредставлениеНабораТестов - Строка - Базовая часть набора тестов
//
Процедура СформироватьОтчетВФорматеJUnit(ОшибокНет, РезультатТестирования, ПутьОтчетаВФорматеJUnitxml, РасширениеНабора = "") Экспорт
	
	ПредставлениеНабораТестов = "CheckConfig";
	Если ЗначениеЗаполнено(РасширениеНабора) Тогда
		
		ПредставлениеНабораТестов = СтрШаблон("%2.%1", РасширениеНабора, ПредставлениеНабораТестов);
		
	КонецЕсли;
	
	ПредставлениеНабораТестовXML = XMLСтрока(ПредставлениеНабораТестов);
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ВремяВыполнения = ТекущаяДата() - РезультатТестирования.ДатаНачала;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("testsuites");
	ЗаписьXML.ЗаписатьАтрибут("name", ПредставлениеНабораТестовXML); 
	
	КоличествоТестов = РезультатТестирования.КоличествоПроверок;
	Если КоличествоТестов = 0 Тогда
		КоличествоТестов = 1;
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьАтрибут("tests", XMLСтрока(КоличествоТестов));
	ЗаписьXML.ЗаписатьАтрибут("failures", XMLСтрока(РезультатТестирования.КоличествоУпало));
	ЗаписьXML.ЗаписатьАтрибут("skipped", XMLСтрока(РезультатТестирования.КоличествоПропущено));
	ЗаписьXML.ЗаписатьАтрибут("time", XMLСтрока(ВремяВыполнения));
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("testsuite");
	ЗаписьXML.ЗаписатьАтрибут("name", ПредставлениеНабораТестовXML); 
	ЗаписьXML.ЗаписатьНачалоЭлемента("properties");
	ЗаписьXML.ЗаписатьКонецЭлемента(); // properties
	
	Если НЕ РезультатТестирования.Ошибки.Количество() Тогда
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("testcase");
		ЗаписьXML.ЗаписатьАтрибут("classname", ПредставлениеНабораТестовXML); 
		ЗаписьXML.ЗаписатьАтрибут("name", XMLСтрока("Все сообщения"));
		ЗаписьXML.ЗаписатьАтрибут("time", XMLСтрока(ВремяВыполнения));
		Если РезультатТестирования.КоличествоУпало = 0 Тогда
			
			ЗаписьXML.ЗаписатьАтрибут("status", "passed");	
			
		Иначе
			
			ЗаписьXML.ЗаписатьАтрибут("status", "failure");
			
		КонецЕсли;
		
		Если НЕ ОшибокНет Тогда
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("failure");
			ЗаписьXML.ЗаписатьАтрибут("message", XMLСтрока(РезультатТестирования.ВсеОшибки));
			ЗаписьXML.ЗаписатьКонецЭлемента(); // failure
			
		КонецЕсли;
		
	Иначе
		
		Для Каждого ГруппыОбъектов Из РезультатТестирования.Ошибки Цикл
			
			Для Каждого ГруппыТипов Из ГруппыОбъектов.Значение Цикл
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("testcase");
				ЗаписьXML.ЗаписатьАтрибут("classname", СтрШаблон("%1.%2", ПредставлениеНабораТестовXML, ГруппыТипов.Ключ));
				ЗаписьXML.ЗаписатьАтрибут("name", XMLСтрока(ГруппыОбъектов.Ключ));
				ТекстОшибки = "";
				Для Каждого ТестовыйСлучай Из ГруппыТипов.Значение Цикл
					ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС)
					+ ?(ЗначениеЗаполнено(ТестовыйСлучай.НомерСтроки), "Строка " + ТестовыйСлучай.НомерСтроки + ": ", "") + ТестовыйСлучай.ТекстОшибки;
				КонецЦикла;
				
				Если ГруппыТипов.Ключ = "Пропущено" Тогда
					
					// ЗаписьXML.ЗаписатьАтрибут("status", "skipped");
					ЗаписьXML.ЗаписатьНачалоЭлемента("skipped");
					ЗаписьXML.ЗаписатьКонецЭлемента();
					ЗаписьXML.ЗаписатьНачалоЭлемента("system-out");
					ЗаписьXML.ЗаписатьТекст(XMLСтрока(ТекстОшибки));
					ЗаписьXML.ЗаписатьКонецЭлемента();

				Иначе
					
					// ЗаписьXML.ЗаписатьАтрибут("status", "failure");
					ЗаписьXML.ЗаписатьНачалоЭлемента("failure");
					Если ГруппыТипов.Ключ = "Ошибка" Тогда
						
						ЗаписьXML.ЗаписатьАтрибут("type", "ERROR");
					
					Иначе

						ЗаписьXML.ЗаписатьАтрибут("type", "WARNING");
						
					КонецЕсли;
					
					ЗаписьXML.ЗаписатьАтрибут("message", XMLСтрока(ТекстОшибки));
					ЗаписьXML.ЗаписатьКонецЭлемента(); // failure

				КонецЕсли;
				
				ЗаписьXML.ЗаписатьКонецЭлемента(); 
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); // testsuite
	ЗаписьXML.ЗаписатьКонецЭлемента(); // testsuites
	
	СтрокаХМЛ = ЗаписьXML.Закрыть();
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ПутьОтчетаВФорматеJUnitxml);
	ЗаписьXML.ЗаписатьБезОбработки(СтрокаХМЛ); // таким образом файл будет записан всего один раз, и не будет проблем с обработкой на билд-сервере TeamCity
	ЗаписьXML.Закрыть();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////

// СформироватьОтчетВФорматеAllure
//	Создает отчет об ошибках в формате Allure
// Параметры:
//   ОшибокНет - Булево - Признак наличия ошибок
//   ДатаНачала - ДатаВремя - Дата начала формирования отчета
//   РезультатТестирования - Структура - Набор параметров результата тестирования
//   КаталогОтчетовAllure - Строка - Путь к каталогу отчетов
//   ПредставлениеНабораТестов - Строка - Базовая часть набора тестов
//
Процедура СформироватьОтчетВФорматеAllure(ОшибокНет, ДатаНачала, РезультатТестирования, КаталогОтчетовAllure, РасширениеНабора = "") Экспорт
	
	Если НЕ РезультатТестирования.Ошибки.Количество() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ФайлКаталога = Новый Файл(КаталогОтчетовAllure);
	Если НЕ ФайлКаталога.Существует() Тогда
		
		СоздатьКаталог(ФайлКаталога.ПолноеИмя);
		
	КонецЕсли;
	
	ВремяСтарта = РезультатТестирования.ДатаНачала;
	ВремяОкончания = ТекущаяДата();

	ПредставлениеНабораТестов = "Синтаксическая проверка конфигурации";
	Если ЗначениеЗаполнено(РасширениеНабора) Тогда
		
		ПредставлениеНабораТестов = СтрШаблон("%2. %1", РасширениеНабора, ПредставлениеНабораТестов);
		
	КонецЕсли;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("test-suite", "");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("", "urn:model.allure.qatools.yandex.ru");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xs", "http://www.w3.org/2001/XMLSchema");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьНачалоЭлемента("name");
	ЗаписьXML.ЗаписатьТекст(XMLСтрока(ПредставлениеНабораТестов));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("test-cases");
	ВажностьНабора = "minor";

	Для Каждого ГруппыОбъектов Из РезультатТестирования.Ошибки Цикл
		
		Для Каждого ГруппыТипов Из ГруппыОбъектов.Значение Цикл
			
			ТекстОшибки = "";
			ВажностьТекстКейса = "minor";
			КонтекстыОшибки = Новый Соответствие();
			Для Каждого ТестовыйСлучай Из ГруппыТипов.Значение Цикл
				
				ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС)
				+ ?(ЗначениеЗаполнено(ТестовыйСлучай.НомерСтроки), "Строка " + ТестовыйСлучай.НомерСтроки + ": ", "") + ТестовыйСлучай.ТекстОшибки;
				
				ЗаполнитьКонтекстыОшибки(КонтекстыОшибки, ТестовыйСлучай.ТекстОшибки);
				
			КонецЦикла;
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("test-case");
			ЗаписьXML.ЗаписатьАтрибут("start", ДатаВLong(ВремяСтарта));
			ЗаписьXML.ЗаписатьАтрибут("stop", ДатаВLong(ВремяОкончания));
			
			Статус = "skipped";
			Если ГруппыТипов.Ключ = "Ошибка" Тогда
				
				Статус = "failed";
				ВажностьНабора = "critical";
				ВажностьТекстКейса = "critical";
				
			ИначеЕсли ГруппыТипов.Ключ = "Предупреждение" Тогда
				
				Статус = "broken";
				
			ИначеЕсли ГруппыТипов.Ключ = "Пропущено" Тогда
				
				Статус = "skipped";
				
			ИначеЕсли ГруппыТипов.Ключ = "Исправлено" Тогда
				
				Статус = "passed";
				
			КонецЕсли; 
			ЗаписьXML.ЗаписатьАтрибут("status", Статус);
			ЗаписьXML.ЗаписатьНачалоЭлемента("name");
			ЗаписьXML.ЗаписатьТекст(XMLСтрока(ГруппыОбъектов.Ключ + "." + ГруппыТипов.Ключ));
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			Если Статус = "failed" ИЛИ Статус = "broken" Тогда
				ЗаписьXML.ЗаписатьНачалоЭлемента("failure");
				ЗаписьXML.ЗаписатьНачалоЭлемента("message");
				ЗаписьXML.ЗаписатьТекст(XMLСтрока(ТекстОшибки));
				ЗаписьXML.ЗаписатьКонецЭлемента();
				ЗаписьXML.ЗаписатьКонецЭлемента();
			КонецЕсли;
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("labels");
			ЗаписьXML.ЗаписатьНачалоЭлемента("label");
			ЗаписьXML.ЗаписатьАтрибут("name", "package");
			ЗаписьXML.ЗаписатьАтрибут("value", XMLСтрока(ГруппыОбъектов.Ключ));	
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			Для Каждого КонтекстОшибки Из КонтекстыОшибки Цикл
				ЗаписьXML.ЗаписатьНачалоЭлемента("label");
				ЗаписьXML.ЗаписатьАтрибут("name", "story");
				ЗаписьXML.ЗаписатьАтрибут("value", XMLСтрока("Работа в контексте '" + КонтекстОшибки.Ключ + "'"));	
				ЗаписьXML.ЗаписатьКонецЭлемента();
			КонецЦикла;
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("label");
			ЗаписьXML.ЗаписатьАтрибут("name", "severity");
			ЗаписьXML.ЗаписатьАтрибут("value", ВажностьТекстКейса);
			ЗаписьXML.ЗаписатьКонецЭлемента();
			ЗаписьXML.ЗаписатьКонецЭлемента();
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
		КонецЦикла;
		
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьНачалоЭлемента("labels");
	ЗаписьXML.ЗаписатьНачалоЭлемента("label");
	ЗаписьXML.ЗаписатьАтрибут("name", "severity");
	ЗаписьXML.ЗаписатьАтрибут("value", ВажностьНабора);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();

	РеальноеИмяФайла = ОбъединитьПути(КаталогОтчетовAllure, "" + (Новый УникальныйИдентификатор()) + "-testsuite.xml");

	СтрокаХМЛ = ЗаписьXML.Закрыть();
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(СтрокаХМЛ);
	ТекстовыйДокумент.Записать(РеальноеИмяФайла, КодировкаТекста.UTF8NoBOM);

КонецПроцедуры

Процедура ЗаполнитьКонтекстыОшибки(КонтекстыОшибки, Знач ОписаниеОшибки)
	
	ПозНачалоКонфигуратор = СтрНайти(ОписаниеОшибки, " (Проверка");
	ПозНачалоEDT = СтрНайти(ОписаниеОшибки, "[");
	
	Если ПозНачалоКонфигуратор Тогда // Формат конфигуратора
		
		ТекстОшибки = Сред(ОписаниеОшибки, ПозНачалоКонфигуратор);
		
		Если СтрНайти(ТекстОшибки, "Проверка толстого клиента (обычное приложение)") Тогда
			
			КонтекстыОшибки.Вставить("Толстый клиент (обычное приложение)");
			
		ИначеЕсли СтрНайти(ТекстОшибки, "Проверка: Веб-клиент") Тогда
			
			КонтекстыОшибки.Вставить("Web-клиент");
			
		ИначеЕсли СтрНайти(ТекстОшибки, "Проверка: Тонкий клиент") Тогда
			
			КонтекстыОшибки.Вставить("Тонкий клиент");
			
		ИначеЕсли СтрНайти(ТекстОшибки, "Проверка: Внешнее соединение ") Тогда
			
			КонтекстыОшибки.Вставить("Внешнее соединение");
			
		ИначеЕсли СтрНайти(ТекстОшибки, "Проверка: Толстый клиент ") Тогда
			
			КонтекстыОшибки.Вставить("Толстый клиент (управляемое приложение)");
			
		КонецЕсли;
		
	ИначеЕсли ПозНачалоEDT Тогда
		
		ПозКонецEDT = СтрНайти(ОписаниеОшибки, "]", НаправлениеПоиска.СКонца);
		Если ПозКонецEDT > ПозНачалоEDT Тогда
			
			КонтекстИсполнения = Сред(ОписаниеОшибки, ПозНачалоEDT + 1, ПозКонецEDT - ПозНачалоEDT - 1);
			
			Если СтрНайти(КонтекстИсполнения, "Внешнее соединение") Тогда
				
				КонтекстыОшибки.Вставить("Внешнее соединение");
				
			КонецЕсли;
			
			Если СтрНайти(КонтекстИсполнения, "Сервер,") Тогда
				
				КонтекстыОшибки.Вставить("Сервер");
				
			КонецЕсли;
			
			Если СтрНайти(КонтекстИсполнения, "Тонкий клиент") Тогда
				
				КонтекстыОшибки.Вставить("Тонкий клиент");
				
			КонецЕсли;
			
			Если СтрНайти(КонтекстИсполнения, "Толстый клиент (управляемое приложение)") Тогда
				
				КонтекстыОшибки.Вставить("Толстый клиент (управляемое приложение)");
				
			КонецЕсли;
			
			Если СтрНайти(КонтекстИсполнения, "Web-клиент") Тогда
				
				КонтекстыОшибки.Вставить("Web-клиент");
				
			КонецЕсли;
			
			Если СтрНайти(КонтекстИсполнения, "Толстый клиент (обычное приложение)") Тогда
				
				КонтекстыОшибки.Вставить("Толстый клиент (обычное приложение)");
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДатаВLong(ИсходнаяДата)
	
	Если ТипЗнч(ИсходнаяДата) = Тип("Дата") Тогда
		
		Возврат Окр((ИсходнаяДата - Дата(1, 1, 1)) * 1000);
		
	Иначе // уже число
		
		Возврат ИсходнаяДата;
		
	КонецЕсли;
	
КонецФункции
