// BSLLS:LatinAndCyrillicSymbolInWord-off

#Использовать ibcmdrunner

#Область ОписаниеПеременных

Перем Лог; // Содержит объект лога
Перем ВременныйКаталогДанныхСервера; // Временный каталог данных автономного сервера
Перем МенеджерАС; // Вложенный объект упрапвления автономным сервером
Перем ПортПрямогоДоступа; // Основной сетевой порт установки прямого соединения с сервером
Перем ПортHttpДоступа; // Основной сетевой порт, обслуживаемый сервером.

#КонецОбласти

#Область ПрограммныйИнтерфейс

Функция ВыполнитьДействие(Действие, ПараметрыКоманды) Экспорт

	ДанныеПодключения = ПараметрыКоманды["ДанныеПодключения"];

	ЗапуститьМенеджерАС();
	Лог.Информация("Запущен ibsrv на основном порту %1", ПортПрямогоДоступа);

	УстановитьОкружениеURLВебПубликации();
	
	СтрокаСоединения = СтрокаПрямогоСоединения();
	НовыеДанныеПодключения = Новый Структура(ДанныеПодключения);
	НовыеДанныеПодключения.ПутьБазы = СтрокаСоединения;
	НовыеДанныеПодключения.СтрокаПодключения = СтрокаСоединения;

	ПараметрыКоманды["ДанныеПодключения"] = НовыеДанныеПодключения;

	Попытка
		Результат = Действие.Выполнить(ПараметрыКоманды);	
	Исключение
		МенеджерАС.Остановить();
		ВызватьИсключение;
	КонецПопытки;
	
	МенеджерАС.Остановить();
	Лог.Информация("Процесс ibsrv остановлен");

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриСозданииОбъекта()

	Лог = Логирование.ПолучитьЛог(ПараметрыСистемы.ИмяЛогаСистемы());
	ВременныйКаталогДанныхСервера = ВременныеФайлы.СоздатьКаталог();
	
	МенеджерАС = Новый УправлениеАС();
	МенеджерАС.УстановитьКаталогДанных(ВременныйКаталогДанныхСервера);

	ПортПрямогоДоступа = ПортПрямогоДоступа();
	ПортHttpДоступа = ПортHttpДоступа();
	
КонецПроцедуры

Процедура Конструктор(ДанныеПодключения, ПараметрыКоманды) Экспорт

	ВерсияПлатформы = ДанныеПодключения.ВерсияПлатформы;
	Если ЗначениеЗаполнено(ВерсияПлатформы) Тогда
		Если ЗначениеЗаполнено(ДанныеПодключения.РазрядностьПлатформы) Тогда
			Разрядность = ОбщиеМетоды.РазрядностьПлатформы(ДанныеПодключения.РазрядностьПлатформы);
			Лог.Отладка("Разрядность платформы 1С указана %1", ДанныеПодключения.РазрядностьПлатформы);
		Иначе
			Разрядность = ОбщиеМетоды.РазрядностьПлатформы("x64x86");
			Лог.Отладка("Разрядность платформы 1С не указана");
		КонецЕсли;

		МенеджерАС.УстановитьВерсию(ВерсияПлатформы, Разрядность);
	КонецЕсли;

	Лог.Информация("Используется ibsrv платформы %1", МенеджерАС.Версия());

	КаталогБазы = ОбщиеМетоды.КаталогФайловойИБ(ДанныеПодключения.ПутьБазы);
	МенеджерАС.УстановитьПараметрыФайловойИБ(КаталогБазы);

КонецПроцедуры

Процедура Деструктор() Экспорт

	Попытка
		ВременныеФайлы.УдалитьФайл(ВременныйКаталогДанныхСервера);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Лог.Отладка(КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецПопытки;

	ВременныйКаталогДанныхСервера = "";

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СтрокаПрямогоСоединения()
	Возврат СтрШаблон("/Slocalhost:%1\DefAlias", XMLСтрока(ПортПрямогоДоступа));
КонецФункции

Функция URLВебПубликации()
	Возврат СтрШаблон("http://localhost:%1/", XMLСтрока(ПортHttpДоступа));
КонецФункции

Процедура УстановитьОкружениеURLВебПубликации()
	УстановитьПеременнуюСреды("VRUNNER_IBSRV_URL", URLВебПубликации());
КонецПроцедуры

Процедура ЗапуститьМенеджерАС()

	СдвигПортов = ДоступныйСдвигПортов();
	ПортПрямогоДоступа = ПортПрямогоДоступа(СдвигПортов);
	ПортHttpДоступа = ПортHttpДоступа(СдвигПортов);

	Если СдвигПортов > 0 Тогда
		МенеджерАС.УстановитьПортПрямогоДоступа(ПортПрямогоДоступа);
		МенеджерАС.УстановитьПортHttpДоступа(ПортHttpДоступа);
	КонецЕсли;

	МенеджерАС.Запустить();

КонецПроцедуры

Функция ДоступныйСдвигПортов()

	ДиапазонПортов = 0; // Стандартный сдвиг
	КоличествоПопыток = 8;
	КоличествоДиапазонов = 32;

	Генератор = Новый ГенераторСлучайныхЧисел(ТекущаяУниверсальнаяДатаВМиллисекундах());

	Результат = Ложь;
	ТекущаяПопытка = 0;
	Пока Не Результат И ТекущаяПопытка < КоличествоПопыток Цикл

		СдвигПортов = СдвигПортовДляДиапазона(ДиапазонПортов);
		ПортПроверки = ПортПрямогоДоступа(СдвигПортов);
		Если ПортДоступен(ПортПроверки) Тогда
			Лог.Отладка("Порт %1 доступен для запуска ibsrv", ПортПроверки);
			Результат = Истина;
			Прервать;
		Иначе
			Лог.Отладка("Порт %1 недоступен для запуска ibsrv!", ПортПроверки);
		КонецЕсли;
		
		ТекущаяПопытка = ТекущаяПопытка + 1;
		ДиапазонПортов = Генератор.СлучайноеЧисло(1, КоличествоДиапазонов);
		
	КонецЦикла;

	Если Результат Тогда
		Возврат СдвигПортов;
	Иначе
		ВызватьИсключение "Не найден доступный порт для запуска автономного сервера!";
	КонецЕсли;

КонецФункции

Функция СдвигПортовДляДиапазона(ДиапазонПортов)
	Возврат 1000 * ДиапазонПортов; // BSLLS:MagicNumber-off 
КонецФункции

Функция ПортПрямогоДоступа(СдвигПортов = 0)
	Возврат 1541 + СдвигПортов; // BSLLS:MagicNumber-off
КонецФункции

Функция ПортHttpДоступа(СдвигПортов = 0)
	Возврат 8314 + СдвигПортов; // BSLLS:MagicNumber-off
КонецФункции

Функция ПортДоступен(ПортПроверки)

	TCPСервер = Новый TCPСервер(ПортПроверки);
	Попытка
		TCPСервер.Запустить();	
	Исключение
		Возврат Ложь;
	КонецПопытки;

	TCPСервер.Остановить();
	Возврат Истина;

КонецФункции

#КонецОбласти
