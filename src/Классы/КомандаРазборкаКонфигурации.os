///////////////////////////////////////////////////////////////////
//
// Служебный модуль с набором методов работы с командами приложения
//
// Структура модуля реализована в соответствии с рекомендациями
// oscript-app-template (C) EvilBeaver
//
///////////////////////////////////////////////////////////////////

#Использовать asserts

#Область ОписаниеПеременных

Перем Лог; // Экземпляр логгера

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ЗарегистрироватьКоманду(Знач ИмяКоманды, Знач Парсер) Экспорт

	ТекстОписания =
		"     Разборка конфигурации в исходники.";

	ОписаниеКоманды = Парсер.ОписаниеКоманды(ИмяКоманды, ТекстОписания);

	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--out",
		"Путь к каталогу с исходниками, пример: --out=./cf");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "-o",
		"Краткая команда 'путь к исходникам --out', пример: -o ./cf");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--in", "Путь к файлу cf (*.cf), --in=./1Cv8.cf");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "-i",
		"Краткая команда 'Путь к файлу cf --in', пример: -i ./1Cv8.cf");
	Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, "--current", "Флаг выгрузки из текущей базы или -с");
	Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, "-c", "Флаг выгрузки из текущей базы, краткая форма от --current");
	Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, "--userenames", "Использовать файл переименований renames");

	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "-v", 
		"Путь к файлу версии (ConfigDumpInfo.xml или его копия), краткая от --versions");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--versions", 
		"Путь к файлу версии (ConfigDumpInfo.xml или его копия) или -v");
	Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, "--ibcmd",
		"Использовать утилиту ibcmd вместо конфигуратора");

	Парсер.ДобавитьКоманду(ОписаниеКоманды);

КонецПроцедуры // ЗарегистрироватьКоманду

// Выполняет логику команды
//
// Параметры:
//   ПараметрыКоманды - Соответствие - Соответствие ключей командной строки и их значений
//   ДополнительныеПараметры - Структура - дополнительные параметры (необязательно)
//
//  Возвращаемое значение:
//   Число - Код возврата команды.
//
Функция ВыполнитьКоманду(Знач ПараметрыКоманды, Знач ДополнительныеПараметры = Неопределено) Экспорт

	Лог = ОбщиеМетоды.ЛогКоманды(ДополнительныеПараметры);

	ПутьВходящий = ОбщиеМетоды.ПолныйПуть(ОбщиеМетоды.ПолучитьПараметры(ПараметрыКоманды, "-i", "--in"));
	ПутьИсходящий = ОбщиеМетоды.ПолныйПуть(ОбщиеМетоды.ПолучитьПараметры(ПараметрыКоманды, "-o", "--out"));
	ФайлВерсии = ОбщиеМетоды.ПолныйПуть(ОбщиеМетоды.ПолучитьПараметры(ПараметрыКоманды, "-v", "--versions"));

	ИспользоватьПереименования = ПараметрыКоманды["--userenames"];

	ИспользоватьТекущуюИБ = ОбщиеМетоды.ЕстьФлагКоманды(ПараметрыКоманды, "-c", "--current");
	
	Если ИспользоватьТекущуюИБ Тогда
		РазобратьНаИсходникиТекущуюКонфигурацию(ПараметрыКоманды, 
			ПутьИсходящий, ФайлВерсии, ИспользоватьПереименования);
	Иначе
		РазобратьНаИсходникиФайлКонфигурации(ПараметрыКоманды, 
			ПутьВходящий, ПутьИсходящий, ФайлВерсии, ИспользоватьПереименования);
	КонецЕсли;

	Возврат МенеджерКомандПриложения.РезультатыКоманд().Успех;

КонецФункции // ВыполнитьКоманду

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура РазобратьНаИсходникиТекущуюКонфигурацию(ПараметрыКоманды, 
	ПутьИсходящий, ФайлВерсии, ИспользоватьПереименования)
		
	ДанныеПодключения = ПараметрыКоманды["ДанныеПодключения"];
	ТолькоИзмененные = ?(ИспользоватьПереименования, Ложь, Истина);
	
	МенеджерСборки = ОбщиеМетоды.ФабрикаМенеджераСборки(ПараметрыКоманды);
	МенеджерСборки.Конструктор(ДанныеПодключения, ПараметрыКоманды);

	Лог.Информация("Запускаем разборку конфигурации текущей ИБ на исходники...");
	Попытка
		МенеджерСборки.РазобратьНаИсходникиТекущуюКонфигурацию(ПутьИсходящий, ФайлВерсии,
	 		ТолькоИзмененные, ИспользоватьПереименования);
	Исключение
		МенеджерСборки.Деструктор();
		ВызватьИсключение;
	КонецПопытки;
	Лог.Информация("Разборка конфигурации текущей ИБ на исходники завершена.");

	МенеджерСборки.Деструктор();
	
КонецПроцедуры

Процедура РазобратьНаИсходникиФайлКонфигурации(ПараметрыКоманды, 
	ПутьВходящий, ПутьИсходящий, ФайлВерсии, ИспользоватьПереименования)

	Если НЕ ФС.ФайлСуществует(ПутьВходящий) Тогда
		ВызватьИсключение СтрШаблон("Файл cf %1 не найден", ПутьВходящий);
	КонецЕсли;

	ОбщиеМетоды.УстановитьИспользованиеВременнойБазы(ПараметрыКоманды);
	ДанныеПодключения = ПараметрыКоманды["ДанныеПодключения"];

	МенеджерСборки = ОбщиеМетоды.ФабрикаМенеджераСборки(ПараметрыКоманды);
	МенеджерСборки.Конструктор(ДанныеПодключения, ПараметрыКоманды);
	КаталогВременнойИБ = МенеджерСборки.КаталогВременнойИБ();

	Лог.Информация("Запускаем разборку cf-файла на исходники...");
	Попытка
	
		МенеджерСборки.СоздатьФайловуюБазу(КаталогВременнойИБ);
		МенеджерСборки.ВыгрузитьКонфигурациюВИсходники(ПутьВходящий, 
			ПутьИсходящий, ФайлВерсии, ИспользоватьПереименования);
		
	Исключение
		МенеджерСборки.Деструктор();
		ВызватьИсключение;
	КонецПопытки;
	Лог.Информация("Разборка cf-файла на исходники завершена.");

	МенеджерСборки.Деструктор();

КонецПроцедуры

#КонецОбласти
