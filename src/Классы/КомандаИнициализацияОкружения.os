///////////////////////////////////////////////////////////////////
//
// Служебный модуль с набором методов работы с командами приложения
//
// Структура модуля реализована в соответствии с рекомендациями
// oscript-app-template (C) EvilBeaver
//
///////////////////////////////////////////////////////////////////

#Использовать logos
#Использовать fs
#Использовать v8runner

Перем Лог;
Перем КорневойПутьПроекта;

// Параметры команды
Перем ПутьКФайлуКонфигурации;
Перем ПутьКИсходникам;
Перем ИспользоватьIbcmd; // Флаг использования утилиты ibcmd

///////////////////////////////////////////////////////////////////////////////////////////////////
// Прикладной интерфейс

Процедура ЗарегистрироватьКоманду(Знач ИмяКоманды, Знач Парсер) Экспорт

	ТекстОписания =
		"     Инициализация базы данных для выполнения необходимых тестов.";

	ОписаниеКоманды = Парсер.ОписаниеКоманды(ИмяКоманды, ТекстОписания);

	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--src", "Путь к папке исходников
	|
	|Схема работы:
	|		Указываем путь к исходникам с конфигурацией,
	|		указываем версию платформы, которую хотим использовать,
	|		и получаем по пути build\ib готовую базу для тестирования.");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--dt", "Путь к файлу с dt выгрузкой");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--cf", "Путь к cf-файлу конфигурации
	|       В пути файла можно указать шаблонную переменную $version для подстановки в нее версии конфигурации
	|       Пример: 1Cv8_$version.cf выгрузит файл вида 1Cv8_1.2.3.4.cf");
	Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, "--dev",
		"Признак dev режима, создаем и загружаем автоматом структуру конфигурации");
	Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, "--storage", "Признак обновления из хранилища");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--storage-name", "Строка подключения к хранилищу");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--storage-user", "Пользователь хранилища");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--storage-pwd", "Пароль");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--storage-ver",
		"Номер версии, по умолчанию берем последнюю");

	Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, "--v1",
		"Поддержка режима реструктуризации -v1 на сервере");
	Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, "--v2",
		"Поддержка режима реструктуризации -v2 на сервере");
	Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, "--ibcmd",
		"Использовать утилиту ibcmd вместо конфигуратора");

	Парсер.ДобавитьКоманду(ОписаниеКоманды);

КонецПроцедуры

// Выполняет логику команды
//
// Параметры:
//   ПараметрыКоманды - Соответствие - Соответствие ключей командной строки и их значений
//   ДополнительныеПараметры - Соответствие - дополнительные параметры (необязательно)
//
Функция ВыполнитьКоманду(Знач ПараметрыКоманды, Знач ДополнительныеПараметры = Неопределено) Экспорт

	Лог = ДополнительныеПараметры.Лог;
	КорневойПутьПроекта = ПараметрыСистемы.КорневойПутьПроекта;

	ДанныеПодключения = ПараметрыКоманды["ДанныеПодключения"];

	ПараметрыХранилища = Новый Структура;
	ПараметрыХранилища.Вставить("СтрокаПодключения", ПараметрыКоманды["--storage-name"]);
	ПараметрыХранилища.Вставить("Пользователь", ПараметрыКоманды["--storage-user"]);
	ПараметрыХранилища.Вставить("Пароль", ПараметрыКоманды["--storage-pwd"]);
	ПараметрыХранилища.Вставить("Версия", ПараметрыКоманды["--storage-ver"]);
	ПараметрыХранилища.Вставить("РежимОбновления", ПараметрыКоманды["--storage"]);

	РежимыРеструктуризации = Новый Структура;
	РежимыРеструктуризации.Вставить("Первый", ПараметрыКоманды["--v1"]);
	РежимыРеструктуризации.Вставить("Второй", ПараметрыКоманды["--v2"]);

	ПутьКИсходникам = ОбщиеМетоды.ПолныйПуть(ПараметрыКоманды["--src"]);
	ПутьКФайлуКонфигурации = ОбщиеМетоды.ПолныйПуть(ПараметрыКоманды["--cf"]);
	ИспользоватьIbcmd = ПараметрыКоманды["--ibcmd"];

	ИнициализироватьБазуДанных(РежимыРеструктуризации, ПараметрыКоманды["--dt"],
					ДанныеПодключения, ПараметрыКоманды["--uccode"],
					ПараметрыКоманды["--v8version"], ПараметрыКоманды["--dev"],
					ПараметрыХранилища,
					ПараметрыКоманды["--nocacheuse"],
					ПараметрыКоманды);

	Возврат МенеджерКомандПриложения.РезультатыКоманд().Успех;
КонецФункции

Процедура ИнициализироватьБазуДанных(РежимыРеструктуризации,  Знач ПутьКDT, Знач ДанныеПодключения,
			Знач КлючРазрешенияЗапуска, Знач ВерсияПлатформы, Знач РежимРазработчика,
			Знач ПараметрыХранилища, Знач НеДобавлятьВСписокБаз,
			Знач ПараметрыКоманды)

	Перем БазуСоздавали;
	БазуСоздавали = Ложь;

	СтрокаПодключения = ДанныеПодключения.ПутьБазы;
	Пользователь = ДанныеПодключения.Пользователь;
	Пароль = ДанныеПодключения.Пароль;
	КодЯзыка = ДанныеПодключения.КодЯзыка;
	КодЯзыкаСеанса = ДанныеПодключения.КодЯзыкаСеанса;

	МенеджерКонфигуратора = Новый МенеджерКонфигуратора;

	Если ПустаяСтрока(СтрокаПодключения) Тогда
		КаталогБазы = ОбъединитьПути(КорневойПутьПроекта, ?(РежимРазработчика = Истина, "./build/ibservice", "./build/ib"));
		СтрокаПодключения = "/F""" + КаталогБазы + """";
	КонецЕсли;

	ОперацияПоддерживаетсяIbcmd = (НЕ ПараметрыХранилища.РежимОбновления);

	МенеджерСборки = НовыйМенеджерСборки(ИспользоватьIbcmd, 
		СтрокаПодключения, ОперацияПоддерживаетсяIbcmd);
	
	МенеджерСборки.Инициализация(
		ПараметрыКоманды, СтрокаПодключения, Пользователь, Пароль,
		ВерсияПлатформы, КлючРазрешенияЗапуска,
		КодЯзыка, КодЯзыкаСеанса);

	Лог.Отладка("ИнициализироватьБазуДанных СтрокаПодключения:" + СтрокаПодключения);
	
	Если Лев(СтрокаПодключения, 2) = "/F" Тогда
		
		МенеджерСборки.УстановитьКонтекст(СтрокаПодключения, "", "");
		КаталогБазы = ОбщиеМетоды.УбратьКавычкиВокругПути(Сред(СтрокаПодключения, 3, СтрДлина(СтрокаПодключения) - 2));
		ОбеспечитьФайловуюБазу(МенеджерСборки, КаталогБазы);
		БазуСоздавали = Истина;
		Лог.Информация("Создали базу данных для " + СтрокаПодключения);

	КонецЕсли;

	Если Не ПустаяСтрока(ПутьКDT) Тогда
		ЗагрузкаИзDt(МенеджерКонфигуратора, ПутьКDT, БазуСоздавали, СтрокаПодключения, Пользователь, Пароль);
	КонецЕсли;

	// Базу создали, пользователей еще нет.
	Если БазуСоздавали И ПустаяСтрока(ПутьКDT) Тогда
		МенеджерСборки.УстановитьКонтекст(СтрокаПодключения, "", "");
		Пользователь = "";
		Пароль = "";
	Иначе
		МенеджерСборки.УстановитьКонтекст(СтрокаПодключения, Пользователь, Пароль);
	КонецЕсли;

	ЗагрузкаИзИсходников(МенеджерСборки); 

	ЗагрузкаИзХранилища(МенеджерСборки, ПараметрыХранилища);

	ОбновитьКонфигурациюБД(МенеджерСборки, РежимРазработчика, РежимыРеструктуризации);

	ЗагрузкаИзФайлаКонфигурации(МенеджерСборки);

	МенеджерСборки.Деструктор();

	ДобавитьБазуВСписокБаз(НеДобавлятьВСписокБаз, ВерсияПлатформы, СтрокаПодключения);

	Лог.Информация("Инициализация завершена");

КонецПроцедуры

Процедура ОбеспечитьФайловуюБазу(МенеджерСборки, КаталогБазы) 
	
	Лог.Отладка("Нашли каталог базы для удаления <%1> ", КаталогБазы);
	ФайлБазы = Новый Файл(КаталогБазы);
	Если ФайлБазы.Существует() Тогда
	 	Лог.Отладка("Удаляем файл " + ФайлБазы.ПолноеИмя);
	 	УдалитьФайлы(ФайлБазы.ПолноеИмя, ПолучитьМаскуВсеФайлы());
	КонецЕсли;
	
	СоздатьКаталог(ФайлБазы.ПолноеИмя);
	Попытка
		МенеджерСборки.СоздатьФайловуюБазу(КаталогБазы);	
	Исключение
		ИнфоОшибки = ИнформацияОбОшибке();
		МенеджерСборки.Деструктор();
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнфоОшибки);
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗагрузкаИзФайлаКонфигурации(МенеджерКонфигуратора)

	Если ПустаяСтрока(ПутьКФайлуКонфигурации) Тогда
		Возврат;
	КонецЕсли;

	Лог.Информация("Запускаем загрузку конфигурации из cf-файла");
	МенеджерВерсий = Новый МенеджерВерсийФайлов1С();
	ПутьКФайлуСВерсией = МенеджерВерсий.НайтиФайлСВерсией(ПутьКФайлуКонфигурации);

	Попытка
		МенеджерКонфигуратора.ЗагрузитьФайлКонфигурации(ПутьКФайлуСВерсией, Ложь);
		МенеджерКонфигуратора.ОбновитьКонфигурациюБазыДанных(Ложь);
	Исключение
		МенеджерКонфигуратора.Деструктор();
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;

КонецПроцедуры

Процедура ЗагрузкаИзИсходников(МенеджерСборки) 

	Если ПустаяСтрока(ПутьКИсходникам) Тогда
		Возврат;
	КонецЕсли;
	
	Лог.Информация("Запускаю загрузку конфигурации из исходников");
	Попытка
		СписокФайлов = "";
		МенеджерСборки.СобратьИзИсходниковТекущуюКонфигурацию(ПутьКИсходникам, СписокФайлов, Ложь);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		МенеджерСборки.Деструктор();
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗагрузкаИзDt(МенеджерКонфигуратора, ПутьКDT, БазуСоздавали, СтрокаПодключения, Пользователь, Пароль)

	Конфигуратор = МенеджерКонфигуратора.УправлениеКонфигуратором();
	ПутьКDT = Новый Файл(ОбъединитьПути(КорневойПутьПроекта, ПутьКDT)).ПолноеИмя;
	Лог.Информация("Загружаем dt " + ПутьКDT);
	Попытка
		Если БазуСоздавали = Истина Тогда
			Конфигуратор.ЗагрузитьИнформационнуюБазу(ПутьКDT);
		Иначе
			Конфигуратор.УстановитьКонтекст(СтрокаПодключения, Пользователь, Пароль);
			Конфигуратор.ЗагрузитьИнформационнуюБазу(ПутьКDT);
		КонецЕсли;
	Исключение
		ИнфоОшибки = ИнформацияОбОшибке();
		МенеджерКонфигуратора.Деструктор();
		ВызватьИсключение "Не удалось загрузить:
		|" + ПодробноеПредставлениеОшибки(ИнфоОшибки);
	КонецПопытки;

КонецПроцедуры

Процедура ЗагрузкаИзХранилища(МенеджерКонфигуратора, ПараметрыХранилища)

	Если Не ПараметрыХранилища.РежимОбновления Тогда
		Возврат;
	КонецЕсли;

	Лог.Информация("Обновляем из хранилища");
	Попытка
		МенеджерКонфигуратора.ЗапуститьОбновлениеИзХранилища(
			ПараметрыХранилища.СтрокаПодключения,  ПараметрыХранилища.Пользователь, ПараметрыХранилища.Пароль,
			ПараметрыХранилища.Версия);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		МенеджерКонфигуратора.Деструктор();
		ВызватьИсключение "Не удалось загрузить базу из хранилища:
			|" + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке); 
	КонецПопытки;

КонецПроцедуры

Процедура ОбновитьКонфигурациюБД(МенеджерСборки, РежимРазработчика, РежимыРеструктуризации)
	
	Попытка
		Если РежимРазработчика = Ложь Или РежимыРеструктуризации.Первый Или РежимыРеструктуризации.Второй Тогда
			ОбщиеМетоды.ОбновитьКонфигурациюБД(МенеджерСборки,
				РежимыРеструктуризации.Первый, РежимыРеструктуризации.Второй);
		КонецЕсли;
	Исключение
		МенеджерСборки.Деструктор();
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;

КонецПроцедуры

Процедура ДобавитьБазуВСписокБаз(НеДобавлятьВСписокБаз, ВерсияПлатформы, СтрокаПодключения)
	
	Если НЕ НеДобавлятьВСписокБаз Тогда
		Возврат;
	КонецЕсли;

	ДопДанныеСпискаБаз = Новый Структура;
	ДопДанныеСпискаБаз.Вставить("RootPath", КорневойПутьПроекта);
	Попытка
		Если ЗначениеЗаполнено(ВерсияПлатформы) Тогда
			ДопДанныеСпискаБаз.Вставить("Version", ВерсияПлатформы);
		КонецЕсли;
		МенеджерСпискаБаз.ДобавитьБазуВСписокБаз(СтрокаПодключения,
			Новый Файл(КорневойПутьПроекта).ИмяБезРасширения,
				ДопДанныеСпискаБаз);
	Исключение
		Лог.Предупреждение("Добавление базы в список " + ОписаниеОшибки());
	КонецПопытки;

КонецПроцедуры

Функция НовыйМенеджерСборки(ИспользоватьУтилитуКоманднойСтроки, СтрокаПодключенияИБ, ПоддерживаемаяОперация = Истина) 

	Если Не ИспользоватьУтилитуКоманднойСтроки Тогда
		Возврат НовыйМенеджерКонфигуратора();
	
	ИначеЕсли Не ПоддерживаемаяОперация Тогда
		Лог.Отладка("Операция не поддерживается ibcmd. Используем конфигуратор.");
		Возврат НовыйМенеджерКонфигуратора();
	
	ИначеЕсли Не СтрНачинаетсяС(СтрокаПодключенияИБ, "/F") Тогда
		Лог.Информация("Серверные ИБ не поддерживаются ibcmd. Используем конфигуратор.");
		Возврат НовыйМенеджерКонфигуратора();
	
	Иначе
		Возврат Новый МенеджерIbcmd();

	КонецЕсли;

КонецФункции

Функция НовыйМенеджерКонфигуратора()
	
	МенеджерКонфигуратора = НовыйМенеджерКонфигуратора();
	Логирование.ПолучитьЛог("oscript.lib.v8runner").УстановитьУровень(Лог.Уровень());
	
	Конфигуратор = МенеджерКонфигуратора.УправлениеКонфигуратором();
	Конфигуратор.УстановитьИмяФайлаСообщенийПлатформы(ВременныеФайлы.НовоеИмяФайла("log"));

	Возврат МенеджерКонфигуратора;

КонецФункции
