///////////////////////////////////////////////////////////////////
//
// Служебный модуль с набором методов работы с командами приложения
//
// Структура модуля реализована в соответствии с рекомендациями
// oscript-app-template (C) EvilBeaver
//
///////////////////////////////////////////////////////////////////

#Использовать logos
#Использовать fs
#Использовать v8runner

Перем Лог;
Перем КорневойПутьПроекта;

///////////////////////////////////////////////////////////////////////////////////////////////////
// Прикладной интерфейс

Процедура ЗарегистрироватьКоманду(Знач ИмяКоманды, Знач Парсер) Экспорт

	ТекстОписания =
		"     Инициализация базы данных для выполнения необходимых тестов.";

	ОписаниеКоманды = Парсер.ОписаниеКоманды(ИмяКоманды, ТекстОписания);

	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--src", "Путь к папке исходников
	|
	|Схема работы:
	|		Указываем путь к исходникам с конфигурацией,
	|		указываем версию платформы, которую хотим использовать,
	|		и получаем по пути build\ib готовую базу для тестирования.");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--dt", "Путь к файлу с dt выгрузкой");
	Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, "--dev",
		"Признак dev режима, создаем и загружаем автоматом структуру конфигурации");
	Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, "--storage", "Признак обновления из хранилища");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--storage-name", "Строка подключения к хранилищу");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--storage-user", "Пользователь хранилища");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--storage-pwd", "Пароль");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--storage-ver",
		"Номер версии, по умолчанию берем последнюю");

	Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, "--v1",
		"Поддержка режима реструктуризации -v1 на сервере");
	Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, "--v2",
		"Поддержка режима реструктуризации -v2 на сервере");

	Парсер.ДобавитьКоманду(ОписаниеКоманды);

КонецПроцедуры

// Выполняет логику команды
//
// Параметры:
//   ПараметрыКоманды - Соответствие - Соответствие ключей командной строки и их значений
//   ДополнительныеПараметры - Соответствие - дополнительные параметры (необязательно)
//
Функция ВыполнитьКоманду(Знач ПараметрыКоманды, Знач ДополнительныеПараметры = Неопределено) Экспорт

	Лог = ДополнительныеПараметры.Лог;
	КорневойПутьПроекта = ПараметрыСистемы.КорневойПутьПроекта;

	ДанныеПодключения = ПараметрыКоманды["ДанныеПодключения"];

	ПараметрыХранилища = Новый Структура;
	ПараметрыХранилища.Вставить("СтрокаПодключения", ПараметрыКоманды["--storage-name"]);
	ПараметрыХранилища.Вставить("Пользователь", ПараметрыКоманды["--storage-user"]);
	ПараметрыХранилища.Вставить("Пароль", ПараметрыКоманды["--storage-pwd"]);
	ПараметрыХранилища.Вставить("Версия", ПараметрыКоманды["--storage-ver"]);
	ПараметрыХранилища.Вставить("РежимОбновления", ПараметрыКоманды["--storage"]);

	РежимыРеструктуризации = Новый Структура;
	РежимыРеструктуризации.Вставить("Первый", ПараметрыКоманды["--v1"]);
	РежимыРеструктуризации.Вставить("Второй", ПараметрыКоманды["--v2"]);

	ИнициализироватьБазуДанных(РежимыРеструктуризации, ПараметрыКоманды["--src"], ПараметрыКоманды["--dt"],
					ДанныеПодключения, ПараметрыКоманды["--uccode"],
					ПараметрыКоманды["--v8version"], ПараметрыКоманды["--dev"],
					ПараметрыХранилища,
					ПараметрыКоманды["--nocacheuse"],
					ПараметрыКоманды);

	Возврат МенеджерКомандПриложения.РезультатыКоманд().Успех;
КонецФункции

Процедура ИнициализироватьБазуДанных(РежимыРеструктуризации, Знач ПутьКSRC, Знач ПутьКDT, Знач ДанныеПодключения,
			Знач КлючРазрешенияЗапуска, Знач ВерсияПлатформы, Знач РежимРазработчика,
			Знач ПараметрыХранилища, Знач НеДобавлятьВСписокБаз,
			Знач ПараметрыКоманды)

	Перем БазуСоздавали;
	БазуСоздавали = Ложь;

	СтрокаПодключения = ДанныеПодключения.ПутьБазы;
	Пользователь = ДанныеПодключения.Пользователь;
	Пароль = ДанныеПодключения.Пароль;
	КодЯзыка = ДанныеПодключения.КодЯзыка;
	КодЯзыкаСеанса = ДанныеПодключения.КодЯзыкаСеанса;

	СтрокаПодключенияХранилище = ПараметрыХранилища.СтрокаПодключения;
	ПользовательХранилища = ПараметрыХранилища.Пользователь;
	ПарольХранилища = ПараметрыХранилища.Пароль;
	ВерсияХранилища = ПараметрыХранилища.Версия;
	РежимОбновленияХранилища = ПараметрыХранилища.РежимОбновления;

	МенеджерКонфигуратора = Новый МенеджерКонфигуратора;

	Логирование.ПолучитьЛог("oscript.lib.v8runner").УстановитьУровень(Лог.Уровень());

	Если ПустаяСтрока(СтрокаПодключения) Тогда

		КаталогБазы = ОбъединитьПути(КорневойПутьПроекта, ?(РежимРазработчика = Истина, "./build/ibservice", "./build/ib"));
		СтрокаПодключения = "/F""" + КаталогБазы + """";
	КонецЕсли;

	Лог.Отладка("ИнициализироватьБазуДанных СтрокаПодключения:" + СтрокаПодключения);

	Если Лев(СтрокаПодключения, 2) = "/F" Тогда
		КаталогБазы = ОбщиеМетоды.УбратьКавычкиВокругПути(Сред(СтрокаПодключения, 3, СтрДлина(СтрокаПодключения) - 2));
		Лог.Отладка("Нашли каталог базы для удаления <%1> ", КаталогБазы);

		ФайлБазы = Новый Файл(КаталогБазы);
		Если ФайлБазы.Существует() Тогда
			Лог.Отладка("Удаляем файл " + ФайлБазы.ПолноеИмя);
			УдалитьФайлы(ФайлБазы.ПолноеИмя, ПолучитьМаскуВсеФайлы());
		КонецЕсли;
		СоздатьКаталог(ФайлБазы.ПолноеИмя);
		МенеджерКонфигуратора.Инициализация(
			СтрокаПодключения, "", "",
			ВерсияПлатформы, КлючРазрешенияЗапуска,
			КодЯзыка, КодЯзыкаСеанса, ПараметрыКоманды
			);

		Конфигуратор = МенеджерКонфигуратора.УправлениеКонфигуратором();
		СоздатьФайловуюБазу(Конфигуратор, ФайлБазы.ПолноеИмя);
		БазуСоздавали = Истина;
		Лог.Информация("Создали базу данных для " + СтрокаПодключения);
	КонецЕсли;

	// При первичной инициализации опускаем указание пользователя и пароля, т.к. их еще нет.
	МенеджерКонфигуратора.Инициализация(
		СтрокаПодключения, "", "",
		ВерсияПлатформы, КлючРазрешенияЗапуска,
		КодЯзыка, КодЯзыкаСеанса, ПараметрыКоманды
		);

	Конфигуратор = МенеджерКонфигуратора.УправлениеКонфигуратором();
	Конфигуратор.УстановитьИмяФайлаСообщенийПлатформы(ВременныеФайлы.НовоеИмяФайла("log"));

	Если Не ПустаяСтрока(ПутьКDT) Тогда
		ПутьКDT = Новый Файл(ОбъединитьПути(КорневойПутьПроекта, ПутьКDT)).ПолноеИмя;
		Лог.Информация("Загружаем dt " + ПутьКDT);
		Попытка
			Если БазуСоздавали = Истина Тогда
				Конфигуратор.ЗагрузитьИнформационнуюБазу(ПутьКDT);
			Иначе
				Конфигуратор.УстановитьКонтекст(СтрокаПодключения, Пользователь, Пароль);
				Конфигуратор.ЗагрузитьИнформационнуюБазу(ПутьКDT);
			КонецЕсли;
		Исключение
			ИнфоОшибки = ИнформацияОбОшибке();
			МенеджерКонфигуратора.Деструктор();
			ВызватьИсключение "Не удалось загрузить:
			|" + ПодробноеПредставлениеОшибки(ИнфоОшибки);
		КонецПопытки;
	КонецЕсли;

	// Базу создали, пользователей еще нет.
	Если БазуСоздавали И ПустаяСтрока(ПутьКDT) Тогда
		Конфигуратор.УстановитьКонтекст(СтрокаПодключения, "", "");
		Пользователь = "";
		Пароль = "";
	Иначе
		Конфигуратор.УстановитьКонтекст(СтрокаПодключения, Пользователь, Пароль);
	КонецЕсли;

	Если Не ПустаяСтрока(ПутьКSRC) Тогда
		Лог.Информация("Запускаю загрузку конфигурации из исходников");

		ПутьКSRC = Новый Файл(ОбъединитьПути(КорневойПутьПроекта, ПутьКSRC)).ПолноеИмя;
		СписокФайлов = "";
		МенеджерКонфигуратора.СобратьИзИсходниковТекущуюКонфигурацию(ПутьКSRC, СписокФайлов, Ложь);

	КонецЕсли;

	Попытка

		Если РежимОбновленияХранилища = Истина Тогда
			Лог.Информация("Обновляем из хранилища");
			МенеджерКонфигуратора.ЗапуститьОбновлениеИзХранилища(
				СтрокаПодключенияХранилище, ПользовательХранилища, ПарольХранилища,
				ВерсияХранилища);
		КонецЕсли;

		Если РежимРазработчика = Ложь Или РежимыРеструктуризации.Первый Или РежимыРеструктуризации.Второй Тогда
			ОбщиеМетоды.ОбновитьКонфигурациюБД(МенеджерКонфигуратора,
				РежимыРеструктуризации.Первый, РежимыРеструктуризации.Второй);
		КонецЕсли;
	Исключение
		МенеджерКонфигуратора.Деструктор();
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;

	МенеджерКонфигуратора.Деструктор();

	Если НЕ НеДобавлятьВСписокБаз Тогда

		ДопДанныеСпискаБаз = Новый Структура;
		ДопДанныеСпискаБаз.Вставить("RootPath", КорневойПутьПроекта);
		Попытка
			Если ЗначениеЗаполнено(ВерсияПлатформы) Тогда
				ДопДанныеСпискаБаз.Вставить("Version", ВерсияПлатформы);
			КонецЕсли;
			МенеджерСпискаБаз.ДобавитьБазуВСписокБаз(СтрокаПодключения,
					Новый Файл(КорневойПутьПроекта).ИмяБезРасширения,
					ДопДанныеСпискаБаз);
		Исключение
			Лог.Предупреждение("Добавление базы в список " + ОписаниеОшибки());
		КонецПопытки;

	КонецЕсли;

	Лог.Информация("Инициализация завершена");

КонецПроцедуры

Процедура СоздатьФайловуюБазу(Конфигуратор, Знач КаталогБазы, Знач ПутьКШаблону = "",
	Знач ИмяБазыВСписке = "", Знач КодЯзыка = "")
	Лог.Отладка("Создаю файловую базу " + КаталогБазы);

	ФС.ОбеспечитьКаталог(КаталогБазы);
	УдалитьФайлы(КаталогБазы, "*.*");

	ПараметрыЗапуска = Новый Массив;
	ПараметрыЗапуска.Добавить("CREATEINFOBASE");
	ПараметрыЗапуска.Добавить("File=""" +КаталогБазы + """");
	ПараметрыЗапуска.Добавить("/Out""" +Конфигуратор.ФайлИнформации() + """");
	Если ЗначениеЗаполнено(КодЯзыка) Тогда
		ПараметрыЗапуска.Добавить("/L" +СокрЛП(КодЯзыка));
	КонецЕсли;

	Если ИмяБазыВСписке <> "" Тогда
		ПараметрыЗапуска.Добавить("/AddInList""" + ИмяБазыВСписке + """");
	КонецЕсли;
	Если ПутьКШаблону <> "" Тогда
		ПараметрыЗапуска.Добавить("/UseTemplate""" + ПутьКШаблону + """");
	КонецЕсли;

	СтрокаЗапуска = "";
	Для Каждого Параметр Из ПараметрыЗапуска Цикл
		СтрокаЗапуска = СтрокаЗапуска + " " + Параметр;
	КонецЦикла;

	Приложение = "";
	Приложение = Конфигуратор.ПутьКПлатформе1С();
	Если Найти(Приложение, " ") > 0 Тогда
		Приложение = ОбщиеМетоды.ОбернутьПутьВКавычки(Приложение);
	КонецЕсли;
	Приложение = Приложение + " " + СтрокаЗапуска;

	Попытка
		ОбщиеМетоды.ЗапуститьПроцесс(Приложение);
	Исключение
		ИнфоОшибки = ИнформацияОбОшибке();
		ВызватьИсключение "Не удалось создать файловую ИБ:
		|" + ПодробноеПредставлениеОшибки(ИнфоОшибки);
	КонецПопытки;

	РезультатСообщение = ОбщиеМетоды.ПрочитатьФайлИнформации(Конфигуратор.ФайлИнформации());
	Если НЕ (СтрНайти(РезультатСообщение, "успешно завершено") = 0
		ИЛИ СтрНайти(РезультатСообщение, "completed successfully") = 0) Тогда

		ВызватьИсключение "Результат работы не успешен: " + Символы.ПС + РезультатСообщение;

	КонецЕсли;

КонецПроцедуры
