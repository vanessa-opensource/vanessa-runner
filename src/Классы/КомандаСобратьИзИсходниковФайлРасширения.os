///////////////////////////////////////////////////////////////////////////////////////////////////
//
// Выполнение команды/действия в 1С:Предприятие в режиме тонкого/толстого клиента с передачей запускаемых обработок и параметров
//
// TODO добавить фичи для проверки команды
// 
// Служебный модуль с набором методов работы с командами приложения
//
// Структура модуля реализована в соответствии с рекомендациями 
// oscript-app-template (C) EvilBeaver
//
///////////////////////////////////////////////////////////////////////////////////////////////////

#Использовать logos
#Использовать v8runner

Перем Лог;
Перем МенеджерКонфигуратора;

///////////////////////////////////////////////////////////////////////////////////////////////////
// Прикладной интерфейс

Процедура ЗарегистрироватьКоманду(Знач ИмяКоманды, Знач Парсер) Экспорт

	ТекстОписания = 
		"     Сборка cfe-файла из исходников.
		|";

	ОписаниеКоманды = Парсер.ОписаниеКоманды(ИмяКоманды, 
		ТекстОписания);

	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--src", 
		"Путь к каталогу с исходниками, пример: --src=./cfe");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "-s", 
		"Краткая команда 'путь к исходникам --src', пример: -s ./cfe");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--out", "Путь к файлу cf (*.cf), --out=./Extension.cfe");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "-o", 
		"Краткая команда 'Путь к файлу cf --out', пример: -o ./Extension.cfe");
	Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, "--current", "Флаг загрузки в указанную базу или -с");
	Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, "-c", "Флаг загрузки в указанную базу, кратка форма от --current");

	Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, "--noupdate", "Флаг обновление СonfigDumpInfo.xml");

	Парсер.ДобавитьКоманду(ОписаниеКоманды);
	
КонецПроцедуры // ЗарегистрироватьКоманду

// Выполняет логику команды
// 
// Параметры:
//   ПараметрыКоманды - Соответствие - Соответствие ключей командной строки и их значений
//   ДополнительныеПараметры - Соответствие - дополнительные параметры (необязательно)
//
Функция ВыполнитьКоманду(Знач ПараметрыКоманды, Знач ДополнительныеПараметры = Неопределено) Экспорт

	Попытка
		Лог = ДополнительныеПараметры.Лог;
	Исключение
		Лог = Логирование.ПолучитьЛог(ПараметрыСистемы.ИмяЛогаСистемы());
	КонецПопытки;

	ДанныеПодключения = ПараметрыКоманды["ДанныеПодключения"];

	ПутьВходящий = ОбщиеМетоды.ПолныйПуть(ОбщиеМетоды.ПолучитьПараметры(ПараметрыКоманды, "-s", "--src"));
	ПутьИсходящий = ОбщиеМетоды.ПолныйПуть(ОбщиеМетоды.ПолучитьПараметры(ПараметрыКоманды,"-o", "--out"));
	ВерсияПлатформы = ПараметрыКоманды["--v8version"];
	СтрокаПодключения = ДанныеПодключения.СтрокаПодключения;
	ОбновлятьДамп = НЕ ПараметрыКоманды["--noupdate"];

	МенеджерКонфигуратора = Новый МенеджерКонфигуратора;
	
	ИмяРасширения = СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");
	Попытка
	 	ВТекущуюКонфигурацию = ОбщиеМетоды.ПолучитьПараметры(ПараметрыКоманды, "-c", "--current");
	 	Если ТипЗнч(ВТекущуюКонфигурацию) = Тип("Булево") И ВТекущуюКонфигурацию Тогда
	 		МенеджерКонфигуратора.Инициализация(ДанныеПодключения.СтрокаПодключения, ДанныеПодключения.Пользователь, ДанныеПодключения.Пароль,
	 			ВерсияПлатформы, ПараметрыКоманды["--uccode"], ДанныеПодключения.КодЯзыка);
		Иначе
			КаталогВременнойБазы = ВременныеФайлы.СоздатьКаталог();
			СтрокаПодключения = "/F""" + КаталогВременнойБазы + """";
			МенеджерКонфигуратора.Инициализация(СтрокаПодключения, "", "", ВерсияПлатформы, , ДанныеПодключения.КодЯзыка);
			Конфигуратор = МенеджерКонфигуратора.УправлениеКонфигуратором();
		
			Конфигуратор.СоздатьФайловуюБазу(КаталогВременнойБазы);
		КонецЕсли;

	 	МенеджерКонфигуратора.СобратьИзИсходниковРасширение(
				 ПутьВходящий,
				 ИмяРасширения,
				Ложь);
		МенеджерКонфигуратора.ВыгрузитьРасширениеВФайл(ПутьИсходящий, ИмяРасширения);
	Исключение
		МенеджерКонфигуратора.Деструктор();
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
		
	МенеджерКонфигуратора.Деструктор();

	Возврат МенеджерКомандПриложения.РезультатыКоманд().Успех;
КонецФункции // ВыполнитьКоманду
