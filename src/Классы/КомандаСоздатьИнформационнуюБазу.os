///////////////////////////////////////////////////////////////////////////////////////////////////
// Прикладной интерфейс

#Область ОписаниеПеременных

Перем Лог;
Перем Настройки;
Перем ИдентификаторКластераКеш;
Перем ЭтоWindows;

#КонецОбласти

#Область ПрограммныйИнтерфейс

Процедура ЗарегистрироватьКоманду(Знач ИмяКоманды, Знач Парсер) Экспорт

	ТекстОписанияКоманды = Неопределено;
	ТекстОписанияКоманды = "     Создать информационную базу.";
	ОписаниеКоманды = Парсер.ОписаниеКоманды(ИмяКоманды, ТекстОписанияКоманды);

	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--ras", "Сетевой адрес RAS. Обязательный. По умолчанию localhost:1545");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--rac", "Команда запуска RAC. Обязательный. По умолчанию находим в каталоге установки 1с");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--name", "Имя информационной базы. Обязательный.");

	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--dbms", "тип СУБД, в которой размещается информационная база. Обязательный. MSSQLServer|PostgreSQL|IBMDB2|OracleDatabase");
//		|MSSQLServer - MS SQL Server
//		|PostgreSQL - PostgreSQL
//		|IBMDB2 - IBM DB2
//		|OracleDatabase - Oracle Database ");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--db-server", "Имя сервера БД. Обязательный.");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--db-name", "Имя базы данных. Обязательный.");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--db-locale", "Идентификатор национальных настроек информационной базы. Обязательный.");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--db-admin", "Пользователь БД. Обязательный.");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--db-admin-pwd", "Пароль пользователя БД. Обязательный.");

	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--cluster-admin", "Администратор кластера");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--cluster-pwd", "Пароль администратора кластера");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--cluster", "Идентификатор кластера");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--cluster-name", "Имя кластера");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--create-database", "При создании информационной базы создать БД (true/false)");

	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--descr", "Описание ИБ");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--date-offset", "Смещение дат в ИБ");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--security-level", "Уровень безопасности установки соединений с ИБ");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--scheduled-jobs-deny", "Управление блокировкой выполнения регламентных заданий:
		|on - выполнение регламентных заданий запрещено
		|off - выполнение регламентных заданий разрешено");
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--license-distribution", "Управление выдачей лицензий сервером 1С:Предприятия
		|deny - выдача лицензий запрещена
		|allow - выдача лицензий разрешена"); // TODO параметр не передается в rac

	Парсер.ДобавитьКоманду(ОписаниеКоманды);

КонецПроцедуры

Функция ВыполнитьКоманду(Знач ПараметрыКоманды, Знач ДополнительныеПараметры = Неопределено) Экспорт

	Попытка
		Лог = ДополнительныеПараметры.Лог;
	Исключение
		Лог = Логирование.ПолучитьЛог(ПараметрыСистемы.ИмяЛогаСистемы());
	КонецПопытки;

	ПрочитатьПараметры(ПараметрыКоманды);

	Если Не ПараметрыВведеныКорректно() Тогда
		Возврат МенеджерКомандПриложения.РезультатыКоманд().НеверныеПараметры;
	КонецЕсли;
	СоздатьИнформационнуюБазу();

	Возврат МенеджерКомандПриложения.РезультатыКоманд().Успех;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПрочитатьПараметры(Знач ПараметрыКоманды)

	Настройки = Новый Структура;
	ДанныеПодключения = ПараметрыКоманды["ДанныеПодключения"];

	Для Каждого КЗ Из ПараметрыКоманды Цикл
		Лог.Отладка(КЗ.Ключ + " = " + КЗ.Значение);
	КонецЦикла;

	Настройки.Вставить("АдресСервераАдминистрирования", ОбщиеМетоды.Параметр(ПараметрыКоманды, "--ras", "localhost:1545"));
	Настройки.Вставить("ПутьКлиентаАдминистрирования", ПараметрыКоманды["--rac"]);
	Настройки.Вставить("АдминистраторИБ", ДанныеПодключения.Пользователь);
	Настройки.Вставить("ПарольАдминистратораИБ", ДанныеПодключения.Пароль);
	Настройки.Вставить("АдминистраторКластера", ПараметрыКоманды["--cluster-admin"]);
	Настройки.Вставить("ПарольАдминистратораКластера", ПараметрыКоманды["--cluster-pwd"]);
	Настройки.Вставить("ИдентификаторКластера", ПараметрыКоманды["--cluster"]);
	Настройки.Вставить("ИмяКластера", ПараметрыКоманды["--cluster-name"]);
	Настройки.Вставить("ИспользуемаяВерсияПлатформы", ПараметрыКоманды["--v8version"]);

	Настройки.Вставить("СоздаватьНовуюИБ", ПараметрыКоманды["--create-database"]);
	Настройки.Вставить("ИмяИБ", ПараметрыКоманды["--name"]);
	Настройки.Вставить("ТипСУБД", ПараметрыКоманды["--dbms"]);
	Настройки.Вставить("ИмяСервераБД", ПараметрыКоманды["--db-server"]);
	Настройки.Вставить("ИмяБазыДанных", ПараметрыКоманды["--db-name"]);
	Настройки.Вставить("Локаль", ПараметрыКоманды["--db-locale"]);
	Настройки.Вставить("АдминистраторБД", ПараметрыКоманды["--db-admin"]);
	Настройки.Вставить("ПарольАдминистраторБД", ПараметрыКоманды["--db-admin-pwd"]);
	Настройки.Вставить("ОписаниеИБ", ПараметрыКоманды["--descr"]);
	Настройки.Вставить("СмещениеДат", ПараметрыКоманды["--date-offset"]);
	Настройки.Вставить("УровеньБезопасности", ПараметрыКоманды["--security-level"]);
	Настройки.Вставить("БлокироватьРегламентныеЗадания", ПараметрыКоманды["--scheduled-jobs-deny"]);
	Настройки.Вставить("ВыдаватьЛицензииСервером", ПараметрыКоманды["--license-distribution"]);

	// Получим путь к платформе если вдруг не установленна
	Настройки.ПутьКлиентаАдминистрирования = ПолучитьПутьКRAC(Настройки.ПутьКлиентаАдминистрирования, Настройки.ИспользуемаяВерсияПлатформы);

КонецПроцедуры

Функция ПараметрыВведеныКорректно()

	Успех = Истина;

	Если Не ЗначениеЗаполнено(Настройки.АдресСервераАдминистрирования) Тогда
		Лог.Ошибка("Не указан сервер администрирования");
		Успех = Ложь;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Настройки.ПутьКлиентаАдминистрирования) Тогда
		Лог.Ошибка("Не указан клиент администрирования");
		Успех = Ложь;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Настройки.ИмяБазыДанных) Тогда
		Лог.Ошибка("Не указано имя базы данных");
		Успех = Ложь;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Настройки.ИмяИБ) Тогда
		Лог.Ошибка("Не указано имя создаваемой ИБ");
		Успех = Ложь;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Настройки.ТипСУБД) Тогда
		Лог.Ошибка("Не указан тип СУБД");
		Успех = Ложь;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Настройки.ИмяСервераБД) Тогда
		Лог.Ошибка("Не указано имя сервера БД");
		Успех = ЛОжь;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Настройки.Локаль) Тогда
		Лог.Ошибка("Не указан идентификатор национальных настроек ИБ");
		Успех = Ложь;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Настройки.АдминистраторБД) Тогда
		Лог.Ошибка("Не указан пользователь БД");
		Успех = Ложь;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Настройки.ПарольАдминистраторБД) Тогда
		Лог.Ошибка("Не указан пароль пользователя БД");
		Успех = Ложь;
	КонецЕсли;

	Возврат Успех;

КонецФункции

/////////////////////////////////////////////////////////////////////////////////
// Взаимодействие с кластером

Процедура СоздатьИнформационнуюБазу()
	ИдентификаторКластера = ИдентификаторКластера();
	КомандаВыполнения = СтрокаЗапускаКлиента() + "infobase create ";

	Если ЗначениеЗаполнено(Настройки.СоздаватьНовуюИБ) И Настройки.СоздаватьНовуюИБ Тогда
		КомандаВыполнения = КомандаВыполнения + "--create-database ";
	КонецЕсли;
	Если ЗначениеЗаполнено(Настройки.ИдентификаторКластера) Тогда
		КомандаВыполнения = КомандаВыполнения + "--cluster=""" + ИдентификаторКластера + """ ";
	КонецЕсли;
	КомандаВыполнения = КомандаВыполнения + КлючиАвторизацииВКластере();
	Если ЗначениеЗаполнено(Настройки.ИмяИБ) Тогда
		КомандаВыполнения = КомандаВыполнения + "--name=""" + Настройки.ИмяИБ + """ ";
	КонецЕсли;
	Если ЗначениеЗаполнено(Настройки.ТипСУБД) Тогда
		КомандаВыполнения = КомандаВыполнения + "--dbms=""" + Настройки.ТипСУБД + """ ";
	КонецЕсли;
	Если ЗначениеЗаполнено(Настройки.ИмяСервераБД) Тогда
		КомандаВыполнения = КомандаВыполнения + "--db-server=""" + Настройки.ИмяСервераБД + """ ";
	КонецЕсли;
	Если ЗначениеЗаполнено(Настройки.ИмяБазыДанных) Тогда
		КомандаВыполнения = КомандаВыполнения + "--db-name=""" + Настройки.ИмяБазыДанных + """ ";
	КонецЕсли;
	Если ЗначениеЗаполнено(Настройки.Локаль) Тогда
		КомандаВыполнения = КомандаВыполнения + "--locale=""" + Настройки.Локаль + """ ";
	КонецЕсли;
	Если ЗначениеЗаполнено(Настройки.АдминистраторБД) Тогда
		КомандаВыполнения = КомандаВыполнения + "--db-user=""" + Настройки.АдминистраторБД + """ ";
	КонецЕсли;
	Если ЗначениеЗаполнено(Настройки.ПарольАдминистраторБД) Тогда
		КомандаВыполнения = КомандаВыполнения + "--db-pwd=""" + Настройки.ПарольАдминистраторБД + """ ";
	КонецЕсли;
	Если ЗначениеЗаполнено(Настройки.ОписаниеИБ) Тогда
		КомандаВыполнения = КомандаВыполнения + "--db-descr=""" + Настройки.ОписаниеИБ + """ ";
	КонецЕсли;
	Если ЗначениеЗаполнено(Настройки.СмещениеДат) Тогда
		КомандаВыполнения = КомандаВыполнения + "--date-offset=""" + Настройки.СмещениеДат + """ ";
	КонецЕсли;
	Если ЗначениеЗаполнено(Настройки.УровеньБезопасности) Тогда
		КомандаВыполнения = КомандаВыполнения + "--security-level=""" + Настройки.УровеньБезопасности + """ ";
	КонецЕсли;
	Если ЗначениеЗаполнено(Настройки.БлокироватьРегламентныеЗадания) Тогда
		КомандаВыполнения = КомандаВыполнения + "--scheduled-jobs-deny=""" + Настройки.БлокироватьРегламентныеЗадания + """ ";
	КонецЕсли;
	КомандаВыполнения = КомандаВыполнения + " " + Настройки.АдресСервераАдминистрирования;
	ЗапуститьПроцесс(КомандаВыполнения);

	Лог.Информация(СтрШаблон("База создаана: Сервер БД: %1; Имя БД: %2; Имя ИБ:%3", Настройки.ИмяСервераБД, Настройки.ИмяБазыДанных, Настройки.ИмяИБ));
КонецПроцедуры

Функция ИдентификаторКластера()

	Если ИдентификаторКластераКеш = Неопределено Тогда

		Лог.Информация("Получаю список кластеров");

		КомандаВыполнения = СтрокаЗапускаКлиента() + "cluster list" + " " + Настройки.АдресСервераАдминистрирования;

		СписокКластеров = ЗапуститьПроцесс(КомандаВыполнения);

		МассивКластеров = Новый Массив;
		СтруктураКластера = Новый Структура;

		МассивСтрок = СтрРазделить(СписокКластеров, Символы.ПС);
		Для Каждого Стр Из МассивСтрок Цикл
			Если СтрНачинаетсяС(Стр, "cluster") Тогда
				СтруктураКластера.Вставить("УИДКластера", СокрЛП(Сред(Стр, (СтрНайти(Стр, ": ") + 2), СтрДлина(Стр))));
			КонецЕсли;
			Если СтрНачинаетсяС(Стр, "name") Тогда
				СтруктураКластера.Вставить("ИмяКластера", СокрЛП(Сред(Стр, (СтрНайти(Стр, ": ") + 2), СтрДлина(Стр))));

				МассивКластеров.Добавить(СтруктураКластера);
				СтруктураКластера = Новый Структура;
			КонецЕсли;
		КонецЦикла;

		Если НЕ ПустаяСтрока(Настройки.ИдентификаторКластера) Тогда
			Для Каждого ОписаниеКластера Из МассивКластеров Цикл
				Если ОписаниеКластера.УИДКластера = Настройки.ИдентификаторКластера Тогда
					УИДКластера = ОписаниеКластера.УИДКластера;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли НЕ ПустаяСтрока(Настройки.ИмяКластера) Тогда
			Для Каждого ОписаниеКластера Из МассивКластеров Цикл
				Если ОписаниеКластера.ИмяКластера = """" + Настройки.ИмяКластера + """" Тогда
					УИДКластера = ОписаниеКластера.УИДКластера;
				КонецЕсли;
			КонецЦикла;
		Иначе
			УИДКластера = Сред(СписокКластеров, (Найти(СписокКластеров, ":") + 1), Найти(СписокКластеров, "host") - Найти(СписокКластеров, ":") - 1);
		КонецЕсли;

		ИдентификаторКластераКеш = СокрЛП(СтрЗаменить(УИДКластера, Символы.ПС, ""));

	КонецЕсли;

	Если ПустаяСтрока(ИдентификаторКластераКеш) Тогда
		ВызватьИсключение "Кластер серверов отсутствует";
	КонецЕсли;

	Возврат ИдентификаторКластераКеш;

КонецФункции

Функция КлючиАвторизацииВКластере()
	КомандаВыполнения = "";
	Если ЗначениеЗаполнено(Настройки.АдминистраторКластера) Тогда
		КомандаВыполнения = КомандаВыполнения + СтрШаблон(" --cluster-user=""%1"" ", Настройки.АдминистраторКластера);
	КонецЕсли;

	Если ЗначениеЗаполнено(Настройки.ПарольАдминистратораКластера) Тогда
		КомандаВыполнения = КомандаВыполнения + СтрШаблон(" --cluster-pwd=""%1"" ", Настройки.ПарольАдминистратораКластера);
	КонецЕсли;
	Возврат КомандаВыполнения;
КонецФункции

Функция СтрокаЗапускаКлиента()
	Перем ПутьКлиентаАдминистрирования;
	Если ЭтоWindows Тогда
		ПутьКлиентаАдминистрирования = ОбщиеМетоды.ОбернутьПутьВКавычки(Настройки.ПутьКлиентаАдминистрирования);
	Иначе
		ПутьКлиентаАдминистрирования = Настройки.ПутьКлиентаАдминистрирования;
	КонецЕсли;

	Возврат ПутьКлиентаАдминистрирования + " ";

КонецФункции

Функция ЗапуститьПроцесс(Знач СтрокаВыполнения)

	Возврат ОбщиеМетоды.ЗапуститьПроцесс(СтрокаВыполнения);

КонецФункции

Функция РазобратьПоток(Знач Поток) Экспорт

	ТД = Новый ТекстовыйДокумент;
	ТД.УстановитьТекст(Поток);

	СписокОбъектов = Новый Массив;
	ТекущийОбъект = Неопределено;

	Для Сч = 1 По ТД.КоличествоСтрок() Цикл

		Текст = ТД.ПолучитьСтроку(Сч);
		Если ПустаяСтрока(Текст) ИЛИ ТекущийОбъект = Неопределено Тогда
			Если ТекущийОбъект <> Неопределено И ТекущийОбъект.Количество() = 0 Тогда
				Продолжить; // очередная пустая строка подряд
			КонецЕсли;

			ТекущийОбъект = Новый Соответствие;
			СписокОбъектов.Добавить(ТекущийОбъект);
		КонецЕсли;

		СтрокаРазбораИмя = "";
		СтрокаРазбораЗначение = "";

		Если РазобратьНаКлючИЗначение(Текст, СтрокаРазбораИмя, СтрокаРазбораЗначение) Тогда
			ТекущийОбъект[СтрокаРазбораИмя] = СтрокаРазбораЗначение;
		КонецЕсли;

	КонецЦикла;

	Если ТекущийОбъект <> Неопределено И ТекущийОбъект.Количество() = 0 Тогда
		СписокОбъектов.Удалить(СписокОбъектов.ВГраница());
	КонецЕсли;

	Возврат СписокОбъектов;

КонецФункции

Функция ПолучитьПутьКRAC(ТекущийПуть, Знач ВерсияПлатформы = "")

	Если НЕ ПустаяСтрока(ТекущийПуть) Тогда
		ФайлУтилиты = Новый Файл(ТекущийПуть);
		Если ФайлУтилиты.Существует() Тогда
			Лог.Отладка("Текущая версия rac " + ФайлУтилиты.ПолноеИмя);
			Возврат ФайлУтилиты.ПолноеИмя;
		КонецЕсли;
	КонецЕсли;

	Если ПустаяСтрока(ВерсияПлатформы) Тогда
		ВерсияПлатформы = "8.3";
	КонецЕсли;

	Конфигуратор = Новый УправлениеКонфигуратором;
	ПутьКПлатформе = Конфигуратор.ПолучитьПутьКВерсииПлатформы(ВерсияПлатформы);
	Лог.Отладка("Используемый путь для поиска rac " + ПутьКПлатформе);
	КаталогУстановки = Новый Файл(ПутьКПлатформе);
	Лог.Отладка(КаталогУстановки.Путь);

	ИмяФайла = ?(ЭтоWindows, "rac.exe", "rac");

	ФайлУтилиты = Новый Файл(ОбъединитьПути(Строка(КаталогУстановки.Путь), ИмяФайла));
	Если ФайлУтилиты.Существует() Тогда
		Лог.Отладка("Текущая версия rac " + ФайлУтилиты.ПолноеИмя);
		Возврат ФайлУтилиты.ПолноеИмя;
	КонецЕсли;

	Возврат ТекущийПуть;

КонецФункции

Функция РазобратьНаКлючИЗначение(Знач СтрокаРазбора, Ключ, Значение)

	ПозицияРазделителя = Найти(СтрокаРазбора, ":");
	Если ПозицияРазделителя = 0 Тогда
		Возврат Ложь;
	КонецЕсли;

	Ключ = СокрЛП(Лев(СтрокаРазбора, ПозицияРазделителя - 1));
	Значение = СокрЛП(Сред(СтрокаРазбора, ПозицияРазделителя + 1));

	Возврат Истина;

КонецФункции

#КонецОбласти

/////////////////////////////////////////////////////////////////////////////////
СистемнаяИнформация = Новый СистемнаяИнформация;
ЭтоWindows = Найти(НРег(СистемнаяИнформация.ВерсияОС), "windows") > 0;
