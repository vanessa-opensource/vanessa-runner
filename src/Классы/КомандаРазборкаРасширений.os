///////////////////////////////////////////////////////////////////
//
// Служебный модуль с набором методов работы с командами приложения
//
// Структура модуля реализована в соответствии с рекомендациями
// oscript-app-template (C) EvilBeaver
//
///////////////////////////////////////////////////////////////////

#Использовать asserts

#Область ОписаниеПеременных

Перем Лог; // Экземпляр логгера

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ЗарегистрироватьКоманду(Знач ИмяКоманды, Знач Парсер) Экспорт

	ТекстОписания =
		"     Разборка расширения из конфигурации в исходники.";

	ОписаниеКоманды = Парсер.ОписаниеКоманды(ИмяКоманды, ТекстОписания);

	Парсер.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "extensionName",
		"Имя расширения, под которым оно зарегистрировано в списке расширений");
	Парсер.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "outputPath", "Путь к исходникам расширения");
	Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, "--ibcmd",
		"Использовать утилиту ibcmd вместо конфигуратора");

	Парсер.ДобавитьКоманду(ОписаниеКоманды);

КонецПроцедуры // ЗарегистрироватьКоманду

// Выполняет логику команды
//
// Параметры:
//   ПараметрыКоманды - Соответствие - Соответствие ключей командной строки и их значений
//   ДополнительныеПараметры - Структура - дополнительные параметры (необязательно)
//
//  Возвращаемое значение:
//   Число - Код возврата команды.
//
Функция ВыполнитьКоманду(Знач ПараметрыКоманды, Знач ДополнительныеПараметры = Неопределено) Экспорт

	Лог = ОбщиеМетоды.ЛогКоманды(ДополнительныеПараметры);

	ДанныеПодключения = ПараметрыКоманды["ДанныеПодключения"];
	ИмяРасширения = ПараметрыКоманды["extensionName"];
	КаталогВыгрузки = ОбщиеМетоды.ПолныйПуть(ПараметрыКоманды["outputPath"]);

	МенеджерСборки = ОбщиеМетоды.ФабрикаМенеджераСборки(ПараметрыКоманды);
	МенеджерСборки.Конструктор(ДанныеПодключения, ПараметрыКоманды);

	Лог.Информация("Запускаем разборку расширения на исходники...");
	Попытка
		МенеджерСборки.РазобратьРасширениеНаИсходники(КаталогВыгрузки, ИмяРасширения);
	Исключение
		МенеджерСборки.Деструктор();
		ВызватьИсключение;
	КонецПопытки;
	Лог.Информация("Разборка расширения на исходники завершена.");

	МенеджерСборки.Деструктор();

	Возврат МенеджерКомандПриложения.РезультатыКоманд().Успех;

КонецФункции

#КонецОбласти
