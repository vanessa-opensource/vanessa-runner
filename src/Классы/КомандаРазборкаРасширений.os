///////////////////////////////////////////////////////////////////
//
// Служебный модуль с набором методов работы с командами приложения
//
// Структура модуля реализована в соответствии с рекомендациями
// oscript-app-template (C) EvilBeaver
//
///////////////////////////////////////////////////////////////////

#Использовать asserts

Перем Лог;

///////////////////////////////////////////////////////////////////////////////////////////////////
// Прикладной интерфейс

Процедура ЗарегистрироватьКоманду(Знач ИмяКоманды, Знач Парсер) Экспорт

	ТекстОписания =
		"     Разборка расширения из конфигурации в исходники.";

	ОписаниеКоманды = Парсер.ОписаниеКоманды(ИмяКоманды, ТекстОписания);

	Парсер.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "extensionName",
		"Имя расширения, под которым оно зарегистрировано в списке расширений");
	Парсер.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "outputPath", "Путь к исходникам расширения");
	Парсер.ДобавитьКоманду(ОписаниеКоманды);

КонецПроцедуры // ЗарегистрироватьКоманду

// Выполняет логику команды
//
// Параметры:
//   ПараметрыКоманды - Соответствие - Соответствие ключей командной строки и их значений
//   ДополнительныеПараметры - Соответствие - дополнительные параметры (необязательно)
//
Функция ВыполнитьКоманду(Знач ПараметрыКоманды, Знач ДополнительныеПараметры = Неопределено) Экспорт

	Лог = ДополнительныеПараметры.Лог;

	ДанныеПодключения = ПараметрыКоманды["ДанныеПодключения"];
	ПутьИсходников = ОбщиеМетоды.ПолныйПуть(ПараметрыКоманды["outputPath"]);

	РазобратьНаИсходникиРасширение(
		ПараметрыКоманды["extensionName"], ПутьИсходников,
		ДанныеПодключения,
		ПараметрыКоманды["--v8version"], ПараметрыКоманды["--uccode"], ПараметрыКоманды
		);

	Возврат МенеджерКомандПриложения.РезультатыКоманд().Успех;
КонецФункции

Процедура РазобратьНаИсходникиРасширение(Знач ИмяРасширения, Знач Каталог,
		Знач ДанныеПодключения,
		Знач ВерсияПлатформы, Знач КлючРазрешенияЗапуска,
		Знач ПараметрыКоманды)

	Лог.Информация("Выполняю разборку расширения %1 на исходники в каталог %2", ИмяРасширения, Каталог);
	Ожидаем.Что(ДанныеПодключения.СтрокаПодключения, "Ожидаем, что строка подключения к ИБ задана, а это не так").Заполнено();

	МенеджерКонфигуратора = Новый МенеджерКонфигуратора;
	МенеджерКонфигуратора.Инициализация(ДанныеПодключения.СтрокаПодключения,
		ДанныеПодключения.Пользователь, ДанныеПодключения.Пароль,
		ВерсияПлатформы, КлючРазрешенияЗапуска,
		ДанныеПодключения.КодЯзыка, ДанныеПодключения.КодЯзыкаСеанса, ПараметрыКоманды);

	Конфигуратор = МенеджерКонфигуратора.УправлениеКонфигуратором();

	ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();
	ПараметрыЗапуска.Добавить("/Visible");
	ПараметрыЗапуска.Добавить("/DumpConfigToFiles """ + Каталог + """");
	ПараметрыЗапуска.Добавить("-Extension """ + ИмяРасширения + """");

	Попытка
		Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);
	Исключение
		МенеджерКонфигуратора.Деструктор();
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;

	МенеджерКонфигуратора.Деструктор();

	Лог.Информация("Разборка расширения завершена");

КонецПроцедуры
