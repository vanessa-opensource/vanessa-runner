#Использовать v8runner
#Использовать asserts
#Использовать v8storage

#Область ОписаниеПеременных

Перем Лог;
Перем УправлениеКонфигуратором;
Перем КаталогВременнойИБ;
Перем ПараметрыХранилища;

#КонецОбласти

#Область ПрограммныйИнтерфейс

Функция УправлениеКонфигуратором() Экспорт
	Возврат УправлениеКонфигуратором;
КонецФункции

// пост-конструктор
//
// Параметры:
//   ДанныеПодключения - ФиксированнаяСтруктура, Структура
//   ПараметрыКоманды - Соответствие - параметры выполняемый команды
//
Процедура Конструктор(Знач ДанныеПодключения, Знач ПараметрыКоманды) Экспорт

	// чтобы не было расхождений при передаче параметров
	ПараметрыКоманды.Вставить("ДанныеПодключения", ДанныеПодключения);

	Инициализация(ПараметрыКоманды, ДанныеПодключения.СтрокаПодключения,
		ДанныеПодключения.Пользователь, ДанныеПодключения.Пароль,
		ПараметрыКоманды["--v8version"], ПараметрыКоманды["--uccode"],
		ДанныеПодключения.КодЯзыка, ДанныеПодключения.КодЯзыкаСеанса);
КонецПроцедуры

// пост-конструкторДляНеобязательнойСтрокиСоединения - если строка соединения не передана, используется временная ИБ
//
// Параметры:
//   ДанныеПодключения - ФиксированнаяСтруктура, Структура
//   ПараметрыКоманды - Соответствие - параметры выполняемый команды
//
Процедура КонструкторДляНеобязательнойСтрокиСоединения(Знач ДанныеПодключения, Знач ПараметрыКоманды) Экспорт

	СтрокаПодключения = ДанныеПодключения.СтрокаПодключения;
	Если Не ЗначениеЗаполнено(СтрокаПодключения) Тогда
		ДанныеПодключения = Новый Структура(ДанныеПодключения);
		ДанныеПодключения.ИспользоватьВременнуюБазу = Истина;
	КонецЕсли;

	Конструктор(ДанныеПодключения, ПараметрыКоманды);
КонецПроцедуры

// еще один пост-конструктор с явной передачей кучи параметров
//
// Параметры:
//   ПараметрыКоманды - Соответствие - параметры выполняемый команды
//   СтрокаПодключения - Строка - СтрокаПодключения
//   Пользователь - Строка - Пользователь
//   Пароль - Строка - Пароль
//   ВерсияПлатформы - Строка
//   КлючРазрешенияЗапуска - Строка
//   КодЯзыка - Строка - КодЯзыка
//   КодЯзыкаСеанса - Строка - КодЯзыкаСеанса
//
Процедура Инициализация(Знач ПараметрыКоманды, Знач СтрокаПодключения, Знач Пользователь = "", Знач Пароль = "",
						Знач ВерсияПлатформы = "", Знач КлючРазрешенияЗапуска = "",
						Знач КодЯзыка = "", Знач КодЯзыкаСеанса = "") Экспорт

	ТекущаяПроцедура = "Инициализация";
	ИспользоватьВременнуюБазу = Ложь;
	Лог.Отладка("Заданы ПараметрыКоманды %1", ЗначениеЗаполнено(ПараметрыКоманды));
	Если ЗначениеЗаполнено(ПараметрыКоманды) Тогда
		ИспользоватьВременнуюБазу = ПараметрыКоманды["ДанныеПодключения"].ИспользоватьВременнуюБазу;
		Лог.Отладка("ИспользоватьВременнуюБазу %1", ИспользоватьВременнуюБазу);
	КонецЕсли;
	Если ИспользоватьВременнуюБазу Тогда
		СтрокаПодключения = "";
		Пользователь = "";
		Пароль = "";
	Иначе
		Ожидаем.Что(СтрокаПодключения, ТекущаяПроцедура + ": не задана строка подключения").Заполнено();
	КонецЕсли;

	УправлениеКонфигуратором = Новый УправлениеКонфигуратором();

	КаталогВременнойИБ = ВременныеФайлы.СоздатьКаталог();
	УправлениеКонфигуратором.КаталогСборки(КаталогВременнойИБ);

	УправлениеКонфигуратором.УстановитьКонтекст(СтрокаПодключения, Пользователь, Пароль);
	Если НЕ ПустаяСтрока(ВерсияПлатформы) Тогда
		Если ЗначениеЗаполнено(ПараметрыКоманды) Тогда
			Разрядность = ПараметрыКоманды["--bitness"];
			Разрядность = ОбщиеМетоды.РазрядностьПлатформы(Разрядность);
			Лог.Отладка("Разрядность платформы 1С указана %1", Разрядность);
		Иначе
			Разрядность = Неопределено;
			Лог.Отладка("Разрядность платформы 1С не указана");
		КонецЕсли;
		УправлениеКонфигуратором.ИспользоватьВерсиюПлатформы(ВерсияПлатформы, Разрядность);
	Иначе
		ПутьКПредприятию = Платформа1С.ПутьКПредприятию("8.3");
		УправлениеКонфигуратором.ПутьКПлатформе1С(ПутьКПредприятию);
	КонецЕсли;
	Лог.Информация("Используется версия платформы %1", ТекущаяВерсияПлатформы());
	
	Если Не ПустаяСтрока(КлючРазрешенияЗапуска) Тогда
		УправлениеКонфигуратором.УстановитьКлючРазрешенияЗапуска(КлючРазрешенияЗапуска);
	КонецЕсли;

	Если ЗначениеЗаполнено(КодЯзыка) Тогда
		УправлениеКонфигуратором.УстановитьКодЯзыка(КодЯзыка);
	КонецЕсли;

	Если ЗначениеЗаполнено(КодЯзыкаСеанса) Тогда
		УправлениеКонфигуратором.УстановитьКодЯзыкаСеанса(КодЯзыкаСеанса);
	КонецЕсли;

КонецПроцедуры

Процедура Деструктор() Экспорт
	Попытка
		Если КаталогВременнойИБ <> Неопределено Тогда
			ВременныеФайлы.УдалитьФайл(КаталогВременнойИБ);
		КонецЕсли;
	Исключение
		Лог.Отладка(ОписаниеОшибки());
	КонецПопытки;

	КаталогВременнойИБ = Неопределено;
КонецПроцедуры

Процедура УстановитьКонтекст(Знач СтрокаСоединения, Знач Пользователь, Знач Пароль) Экспорт
	УправлениеКонфигуратором.УстановитьКонтекст(СтрокаСоединения, Пользователь, Пароль);
КонецПроцедуры

// Установить параметры подключения к хранилищу 1С
//
// Параметры:
//   НовыеПараметрыХранилища - Структура - ключи СтрокаПодключенияХранилище, ПользовательХранилища, ПарольХранилища
//
Процедура УстановитьПараметрыХранилища(Знач НовыеПараметрыХранилища) Экспорт
	ПараметрыХранилища = НовыеПараметрыХранилища;
КонецПроцедуры

// Запустить конфигуратор
//
// Параметры:
//   ДопСообщения - Структура - из метода НовыеДопСообщенияДляЗапускаПредприятия
//	ДополнительныеКлючиЗапуска - Строка - дополнительные ключи запуска Конфигуратора
//	ОжидатьЗавершения - Булево - ожидать завершения выполнения команды
//
Процедура ЗапуститьКонфигуратор(Знач ДопСообщения, Знач ДополнительныеКлючиЗапуска, Знач ОжидатьЗавершения) Экспорт

	Лог.Информация("Выполняю команду Конфигуратора");

	Лог.Отладка("ДополнительныеКлючиЗапуска:" + ДополнительныеКлючиЗапуска);

	УправлениеКонфигуратором.УстановитьПризнакОжиданияВыполненияПрограммы(ОжидатьЗавершения);

	Если Не ОжидатьЗавершения Тогда
		УправлениеКонфигуратором.УстановитьИмяФайлаСообщенийПлатформы(ВременныеФайлы.НовоеИмяФайла());
	КонецЕсли;

	ПараметрыЗапуска = УправлениеКонфигуратором.ПолучитьПараметрыЗапуска();

	СтрокаПодключенияХранилище = ПараметрыХранилища.СтрокаПодключения;
	ПользовательХранилища = ПараметрыХранилища.Пользователь;
	ПарольХранилища = ПараметрыХранилища.Пароль;

	Если НЕ ПустаяСтрока(СтрокаПодключенияХранилище) Тогда
		ПараметрыЗапуска.Добавить("/ConfigurationRepositoryF """ +СтрокаПодключенияХранилище + """");
		ПараметрыЗапуска.Добавить("/ConfigurationRepositoryN """ +ПользовательХранилища + """");

		Если Не ПустаяСтрока(ПарольХранилища) Тогда
			ПараметрыЗапуска.Добавить("/ConfigurationRepositoryP """ +ПарольХранилища + """");
		КонецЕсли;
	КонецЕсли;

	Если Не ПустаяСтрока(ДополнительныеКлючиЗапуска) Тогда
		ПараметрыЗапуска.Добавить(ДополнительныеКлючиЗапуска);
	КонецЕсли;

	Попытка
		УправлениеКонфигуратором.ВыполнитьКоманду(ПараметрыЗапуска);
	Исключение
		Лог.Ошибка(УправлениеКонфигуратором.ВыводКоманды());
		Лог.Ошибка(ДопСообщения.СообщениеВСлучаеПадения + Символы.ПС + ОписаниеОшибки());
		ВызватьИсключение;
	КонецПопытки;

	Лог.Информация("Работа Конфигуратора завершена");

КонецПроцедуры

Процедура СоздатьФайловуюБазу(Знач КаталогБазы, Знач ПутьКШаблону = "", Знач ИмяБазыВСписке = "") Экспорт
	
	Попытка
		УправлениеКонфигуратором.СоздатьФайловуюБазу(КаталогБазы, ПутьКШаблону, ИмяБазыВСписке);
		Текст = УправлениеКонфигуратором.ВыводКоманды();
		Если ЗначениеЗаполнено(Текст) Тогда
			Лог.Информация(Текст);
		КонецЕсли;
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Лог.Ошибка(УправлениеКонфигуратором.ВыводКоманды());
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	КонецПопытки;

	Если НЕ (СтрНайти(Текст, "успешно завершено") = 0
		ИЛИ СтрНайти(Текст, "completed successfully") = 0) Тогда

		ВызватьИсключение "Результат работы не успешен";
	
	КонецЕсли;

КонецПроцедуры

// Обновить конфигурацию БД на сервере
//
// Параметры:
//   ДинамическоеОбновление - Булево - использовать. Необязательно. По Умолчанию - Ложь.
//
Процедура ОбновитьКонфигурациюБазыДанных(ДинамическоеОбновление = Ложь) Экспорт


	Лог.Информация("Запускаю обновление конфигурации БД");
	ТекущаяПроцедура = "ОбновитьКонфигурациюБазыДанных";

	Попытка
		УправлениеКонфигуратором.ОбновитьКонфигурациюБазыДанных(Ложь, , ДинамическоеОбновление);
		Текст = УправлениеКонфигуратором.ВыводКоманды();
		Если Не ПустаяСтрока(Текст) Тогда
			Лог.Информация(Текст);
		КонецЕсли;
	Исключение
		Лог.Ошибка(УправлениеКонфигуратором.ВыводКоманды());
		ВызватьИсключение ТекущаяПроцедура;
	КонецПопытки;

	Лог.Информация("Обновление конфигурации БД завершено.");

КонецПроцедуры

// Обновить конфигурацию БД на сервере
//
// Параметры:
//   РежимРеструктуризации - Строка, Неопределено - рекомендуем использовать значения из РежимыРеструктуризации().
//			Например, РежимыРеструктуризации().Второй
//		Необязательно. По Умолчанию - Неопределено. т.е. использовать режим 1С по умолчанию
//   ИмяРасширения - Строка - имя расширения. Необязательно.
//
Процедура ОбновитьКонфигурациюБазыДанныхНаСервере(
	Знач РежимРеструктуризации = Неопределено,
	Знач ИмяРасширения = "") Экспорт

	Лог.Информация("Запускаю обновление конфигурации БД");
	ТекущаяПроцедура = "ОбновитьКонфигурациюБазыДанныхНаСервере";

	Попытка
		УправлениеКонфигуратором.ОбновитьКонфигурациюБазыДанныхНаСервере(
			Ложь, Ложь, РежимРеструктуризации, ИмяРасширения);
		Текст = УправлениеКонфигуратором.ВыводКоманды();
		Если Не ПустаяСтрока(Текст) Тогда
			Лог.Информация(Текст);
		КонецЕсли;
	Исключение
		Лог.Ошибка(УправлениеКонфигуратором.ВыводКоманды());
		ВызватьИсключение ТекущаяПроцедура;
	КонецПопытки;

	Лог.Информация("Обновление конфигурации БД завершено.");

КонецПроцедуры

// ОбновитьРасширение
//
// Параметры:
//   ИмяРасширения - Строка - <описание параметра>
//
Процедура ОбновитьРасширение(Знач ИмяРасширения) Экспорт
	ТекущаяПроцедура = "ОбновитьРасширение";

	Лог.Информация("Запускаю обновление расширения %1", ИмяРасширения);

	Попытка
		УправлениеКонфигуратором.ОбновитьКонфигурациюБазыДанных(Ложь, Ложь, Ложь, ИмяРасширения);
		Текст = УправлениеКонфигуратором.ВыводКоманды();
		Если Не ПустаяСтрока(Текст) Тогда
			Лог.Информация(Текст);
		КонецЕсли;
	Исключение
		Лог.Ошибка(УправлениеКонфигуратором.ВыводКоманды());
		ВызватьИсключение ТекущаяПроцедура;
	КонецПопытки;

	Лог.Информация("Обновление расширения завершено.");

КонецПроцедуры

Функция ПолучитьСписокВсехРасширений() Экспорт
	ПараметрыЗапуска = УправлениеКонфигуратором.ПолучитьПараметрыЗапуска();
	ПараметрыЗапуска.Добавить("/Visible");
	ПараметрыЗапуска.Добавить("/DumpDBCfgList");
	ПараметрыЗапуска.Добавить("-AllExtensions");
	УправлениеКонфигуратором.ВыполнитьКоманду(ПараметрыЗапуска);
	Возврат УправлениеКонфигуратором.ВыводКоманды();
КонецФункции

// TODO в v8runner и vanessa-runner выделить отдельную команду для показа всех расширений конфигурации
Процедура ПоказатьСписокВсехРасширенийКонфигурации() Экспорт
	Лог.Информация("Список расширений конфигурации:%2%1", ПолучитьСписокВсехРасширений(), Символы.ПС);
КонецПроцедуры

// Создать структуру для дополнительных сообщений запуска 1С в режиме Предприятия
//
//  Возвращаемое значение:
//   Структура - ключи Ключ,СообщениеВСлучаеУспеха,СообщениеВСлучаеПадения,СообщениеВСлучаеПропуска с пустыми строками
//
Функция НовыеДопСообщенияДляЗапускаПредприятия() Экспорт
	Результат = Новый Структура("Ключ,СообщениеВСлучаеУспеха,СообщениеВСлучаеПадения",
		"", "", "");
	Результат.Вставить("СообщениеВСлучаеПропуска", "");
	Результат.Вставить("ПоказыватьДополнительноЛогПредприятия", Истина);
	Возврат Результат;
КонецФункции

// Выполнить команду/действие в режиме 1С:Предприятия
//	проверкой статус-файла выполнения и  возможностью ожидания выполнения и чтением лог-файла
//
// Параметры:
//   ДопСообщения - Структура - из метода НовыеДопСообщенияДляЗапускаПредприятия
//   ПараметрЗапуска - Строка - параметр запуска, передаваемый в 1С
//   ОбработкаДляЗапуска - Строка -запускаемая обработка
//   ТолстыйКлиент - Булево - признак запуска толстого клиента
//   ДополнительныеКлючиЗапуска - Строка - <описание параметра>
//   ОжидатьЗавершения - Булево - признак запуска толстого клиента
//   ПутьЛогаВыполненияСценариев - Строка - путь файла информации 1С по ключу "/out".
//   ПутьКФайлуСтатусаВыполнения - Строка - путь файла статуса (внутри файла должно быть 1 или 0)
//
Процедура ЗапуститьВРежимеПредприятияСПроверкойВыполнения(
				Знач ДопСообщения,
				Знач ПараметрЗапуска,
				Знач ОбработкаДляЗапуска,
				Знач ТолстыйКлиент,
				Знач ДополнительныеКлючиЗапуска,
				Знач ОжидатьЗавершения,
				Знач ПутьЛогаВыполненияСценариев = Неопределено,
				Знач ПутьКФайлуСтатусаВыполнения = Неопределено) Экспорт

	Если Не ОжидатьЗавершения И ЗначениеЗаполнено(ПутьЛогаВыполненияСценариев) Тогда
		ВызватьИсключение "Нельзя получать лог выполнения без включенного признака ожидания выполнения 1С";
	КонецЕсли;

	Если ЗначениеЗаполнено(ПутьКФайлуСтатусаВыполнения) Тогда
		ОбщиеМетоды.УдалитьФайлЕслиОнСуществует(ПутьКФайлуСтатусаВыполнения);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПутьЛогаВыполненияСценариев) Тогда
		ОбщиеМетоды.УдалитьФайлЕслиОнСуществует(ПутьЛогаВыполненияСценариев);
	КонецЕсли;

	ЛогОт1С = "";

	Попытка
		Если ОжидатьЗавершения Тогда
			ЛогОт1С = ЗапуститьВРежимеПредприятияСЛогФайлом(
				ПараметрЗапуска, ОбработкаДляЗапуска,
				ПутьЛогаВыполненияСценариев,
				ТолстыйКлиент, ДополнительныеКлючиЗапуска, ДопСообщения);
		Иначе
			ЗапуститьВРежимеПредприятия(
				ПараметрЗапуска, ОбработкаДляЗапуска,
				ТолстыйКлиент, ДополнительныеКлючиЗапуска, Ложь, ДопСообщения);
		КонецЕсли;

	Исключение
		Лог.Ошибка("Причина ошибки:
			|%1
			|Вывод от 1С:Предприятие:
			|%2", ИнформацияОбОшибке().Описание, ЛогОт1С);
		ВызватьИсключение;
	КонецПопытки;

	Если ЗначениеЗаполнено(ПутьКФайлуСтатусаВыполнения) Тогда
		СтатусВозврата = СокрЛП(ОбщиеМетоды.ПрочитатьФайлИнформации(ПутьКФайлуСтатусаВыполнения));
		Лог.Отладка("Код возврата %1", СтатусВозврата);
		Если СтатусВозврата = "0" Тогда
			Лог.Информация(ДопСообщения.СообщениеВСлучаеУспеха);
		ИначеЕсли СтатусВозврата = "1" Тогда
			ДанныеОшибки = Новый Структура;
			ДанныеОшибки.Вставить("Предупреждение", "
				|Vanessa-ADD или 1С:Предприятие вернуло код возврата 1
				|");
			ВызватьИсключение Новый ИнформацияОбОшибке(ДопСообщения.СообщениеВСлучаеПадения, ДанныеОшибки);

		ИначеЕсли СтатусВозврата = "2" Тогда
			Лог.Предупреждение(ДопСообщения.СообщениеВСлучаеПропуска);
		Иначе
			ТекстОшибки = СтрШаблон("Получен неожиданный/неверный результат работы - %1
				|Возможно, работа 1С:Предприятие завершилась некорректно. Например, указана неверная версия платформы.
				|Или возникла ошибка при запуске. Проверьте журнал регистрации в ИБ.
				|Вывод от 1С:Предприятие:
				|%2", СтатусВозврата, ЛогОт1С);
			ДанныеОшибки = Новый Структура;
			ДанныеОшибки.Вставить("Предупреждение", "");
			ВызватьИсключение Новый ИнформацияОбОшибке(ТекстОшибки, ДанныеОшибки);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// ЗапуститьОбновлениеИзХранилища
//
// Параметры:
//   СтрокаПодключенияХранилище - Строка - <описание параметра>
//   ПользовательХранилища - Строка - <описание параметра>
//   ПарольХранилища - Строка - <описание параметра>
//   ВерсияХранилища - Строка - <описание параметра>
//   ДополнительныеКлючиЗапуска - Строка - <описание параметра>
//
Процедура ЗапуститьОбновлениеИзХранилища(
			Знач СтрокаПодключенияХранилище = "", Знач ПользовательХранилища = "", Знач ПарольХранилища = "",
			Знач ВерсияХранилища = "", Знач ДополнительныеКлючиЗапуска = "") Экспорт

	Лог.Информация("Выполняю обновление конфигурации из хранилища");

	ТекущаяПроцедура = "ЗапуститьОбновлениеИзХранилища";

	Ожидаем.Что(СтрокаПодключенияХранилище, ТекущаяПроцедура + " не задана строка подключения к хранилищу").Заполнено();
	Ожидаем.Что(ПользовательХранилища, ТекущаяПроцедура + " не задан пользователь хранилища").Заполнено();

	Параметры = УправлениеКонфигуратором.ПолучитьПараметрыЗапуска();

	Параметры.Добавить("/ConfigurationRepositoryF """ +СтрокаПодключенияХранилище + """");
	Параметры.Добавить("/ConfigurationRepositoryN """ +ПользовательХранилища + """");

	Если Не ПустаяСтрока(ПарольХранилища) Тогда
		Параметры.Добавить("/ConfigurationRepositoryP """ +ПарольХранилища + """");
	КонецЕсли;

	Параметры.Добавить("/ConfigurationRepositoryUpdateCfg");
	Параметры.Добавить("-force");
	Если Не ПустаяСтрока(ВерсияХранилища) Тогда
		Параметры.Добавить("-v" + ВерсияХранилища);
	КонецЕсли;

	Если Не ПустаяСтрока(ДополнительныеКлючиЗапуска) Тогда
		Параметры.Добавить(ДополнительныеКлючиЗапуска);
	КонецЕсли;

	Попытка
		УправлениеКонфигуратором.ВыполнитьКоманду(Параметры);
		Текст = УправлениеКонфигуратором.ВыводКоманды();
		Если Не ПустаяСтрока(Текст) Тогда
			Лог.Информация(Текст);
		КонецЕсли;

		Лог.Информация("Обновление конфигурации из хранилища завершено");
	Исключение
		Лог.Ошибка(УправлениеКонфигуратором.ВыводКоманды());
		ВызватьИсключение ТекущаяПроцедура;
	КонецПопытки;

КонецПроцедуры

// Создать хранилище 1С
//
// Параметры:
//   ПутьХранилища - Строка - <описание параметра>
//   ЛогинАдминистратора - Строка - <описание параметра>
//   ПарольАдминистратора - Строка - <описание параметра>
//
Процедура СоздатьХранилище(Знач ПутьХранилища, Знач ЛогинАдминистратора, Знач ПарольАдминистратора) Экспорт

	Лог.Информация("Выполняю создание хранилища конфигурации");

	ТекущаяПроцедура = "СоздатьХранилище";

	Ожидаем.Что(ПутьХранилища, ТекущаяПроцедура + " не задана строка подключения к хранилищу").Заполнено();
	Ожидаем.Что(ЛогинАдминистратора, ТекущаяПроцедура + " не задан пользователь хранилища").Заполнено();

	КонтекстБД = УправлениеКонфигуратором.ПолучитьКонтекст();
	Если Не ЗначениеЗаполнено(КонтекстБД.КлючСоединенияСБазой) Тогда
		Лог.Предупреждение("При создании хранилища не определена БД, создаем на основе временной БД");
		УправлениеКонфигуратором.СоздатьФайловуюБазу(КаталогВременнойИБ);
		УправлениеКонфигуратором.УстановитьКонтекст("/F " + КаталогВременнойИБ, "", "");
	КонецЕсли;

	ХранилищеКонфигурации = Новый МенеджерХранилищаКонфигурации();
	ХранилищеКонфигурации.УстановитьУправлениеКонфигуратором(УправлениеКонфигуратором);
	ХранилищеКонфигурации.УстановитьПараметрыАвторизации(ЛогинАдминистратора, ПарольАдминистратора);

	ХранилищеКонфигурации.УстановитьПутьКХранилищу(ПутьХранилища);

	Попытка

		ХранилищеКонфигурации.СоздатьХранилищеКонфигурации();

		Лог.Информация("Создание хранилища конфигурации завершено");
	Исключение
		Сообщение = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Лог.Ошибка(УправлениеКонфигуратором.ВыводКоманды());
		ВызватьИсключение ТекущаяПроцедура + "
		|" + Сообщение;
	КонецПопытки;

КонецПроцедуры

// Создать хранилище 1С
//
// Параметры:
//   ПутьХранилища - Строка - <описание параметра>
//   Логин - Строка - <описание параметра>
//   Пароль - Строка - <описание параметра>
//   ИгнорироватьНаличиеПодключеннойБД - Булево - <описание параметра>
//   ЗаменитьКонфигурациюБД - Булево - <описание параметра>
//
Процедура ПодключитьсяКХранилищу(Знач ПутьХранилища, Знач Логин, Знач Пароль,
								Знач ИгнорироватьНаличиеПодключеннойБД = Ложь,
								Знач ЗаменитьКонфигурациюБД = Истина) Экспорт

	Лог.Информация("Выполняю подключение к хранилищу конфигурации");

	ТекущаяПроцедура = "ПодключитьсяКХранилищу";

	КонтекстБД = УправлениеКонфигуратором.ПолучитьКонтекст();
	Если Не ЗначениеЗаполнено(КонтекстБД.КлючСоединенияСБазой) Тогда
		Лог.Предупреждение("При подключении к хранилищу не определена БД, подключаем временную БД");
		УправлениеКонфигуратором.СоздатьФайловуюБазу(КаталогВременнойИБ);
		УправлениеКонфигуратором.УстановитьКонтекст("/F " + КаталогВременнойИБ, "", "");
	КонецЕсли;

	ХранилищеКонфигурации = Новый МенеджерХранилищаКонфигурации();
	ХранилищеКонфигурации.УстановитьУправлениеКонфигуратором(УправлениеКонфигуратором);
	ХранилищеКонфигурации.УстановитьПараметрыАвторизации(Логин, Пароль);

	ХранилищеКонфигурации.УстановитьПутьКХранилищу(ПутьХранилища);

	Попытка
		ХранилищеКонфигурации.ПодключитьсяКХранилищу(ИгнорироватьНаличиеПодключеннойБД, ЗаменитьКонфигурациюБД);

		Лог.Информация("Подключение к хранилищу конфигурации завершено");
	Исключение
		Сообщение = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Лог.Ошибка(УправлениеКонфигуратором.ВыводКоманды());
		ВызватьИсключение ТекущаяПроцедура + "
		|" + Сообщение;
	КонецПопытки;

КонецПроцедуры

// Отлючить конфигурацию от хранилища
//
// Параметры:
//	ДополнительныеКлючиЗапуска - Строка - (необязательно) дополнительные ключи запуска Конфигуратора
//
Процедура ОтключитьсяОтХранилища(Знач ДополнительныеКлючиЗапуска = "") Экспорт

	ТекущаяПроцедура = "ОтключитьсяОтХранилища";
	Лог.Информация("Выполняю отключение от хранилища конфигурации");

	Параметры = УправлениеКонфигуратором.ПолучитьПараметрыЗапуска();

	Параметры.Добавить("/ConfigurationRepositoryUnbindCfg");
	Параметры.Добавить("-force");

	Если Не ПустаяСтрока(ДополнительныеКлючиЗапуска) Тогда
		Параметры.Добавить(ДополнительныеКлючиЗапуска);
	КонецЕсли;

	Попытка
		УправлениеКонфигуратором.ВыполнитьКоманду(Параметры);
		Текст = УправлениеКонфигуратором.ВыводКоманды();
		Если Не ПустаяСтрока(Текст) Тогда
			Лог.Информация(Текст);
		КонецЕсли;

		Лог.Информация("Отключение конфигурации от хранилища завершено");
	Исключение
		Лог.Ошибка(УправлениеКонфигуратором.ВыводКоманды());
		ВызватьИсключение ТекущаяПроцедура;
	КонецПопытки;

КонецПроцедуры

// Создать пользователя хранилища 1С
//
// Параметры:
//   ПутьХранилища - Строка - <описание параметра>
//   Логин - Строка - <описание параметра>
//   Пароль - Строка - <описание параметра>
//   ЛогинПользователя - Строка - <описание параметра>
//   ПарольПользователя - Строка - <описание параметра>
//   РольПользователя - Строка - <описание параметра>
//
Процедура СоздатьПользователяХранилища(Знач ПутьХранилища, Знач Логин, Знач Пароль,
								Знач ЛогинПользователя, Знач ПарольПользователя,
								Знач РольПользователя) Экспорт

	Лог.Информация("Выполняю создание пользователя хранилища конфигурации");

	ТекущаяПроцедура = "СоздатьПользователяХранилища";

	КонтекстБД = УправлениеКонфигуратором.ПолучитьКонтекст();
	Если Не ЗначениеЗаполнено(КонтекстБД.КлючСоединенияСБазой) Тогда
		Лог.Предупреждение("При создании пользователя хранилища не определена БД, создаем на основе временной БД");
		УправлениеКонфигуратором.СоздатьФайловуюБазу(КаталогВременнойИБ);
		УправлениеКонфигуратором.УстановитьКонтекст("/F " + КаталогВременнойИБ, "", "");
	КонецЕсли;

	ХранилищеКонфигурации = Новый МенеджерХранилищаКонфигурации();
	ХранилищеКонфигурации.УстановитьУправлениеКонфигуратором(УправлениеКонфигуратором);
	ХранилищеКонфигурации.УстановитьПараметрыАвторизации(Логин, Пароль);

	ХранилищеКонфигурации.УстановитьПутьКХранилищу(ПутьХранилища);

	Попытка
		ХранилищеКонфигурации.ДобавитьПользователяВХранилище(ЛогинПользователя, ПарольПользователя, РольПользователя);

		Лог.Информация("Создание пользователя хранилища конфигурации завершено");
	Исключение
		Сообщение = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Лог.Ошибка(УправлениеКонфигуратором.ВыводКоманды());
		ВызватьИсключение ТекущаяПроцедура + "
		|" + Сообщение;
	КонецПопытки;

КонецПроцедуры

Процедура КопироватьПользователейИзХранилища(Знач ПутьХранилища, Знач Логин, Знач Пароль,
											Знач ПутьХранилищаКопия, Знач ЛогинКопия, Знач ПарольКопия,
											Знач ВосстановитьУдаленного = Ложь) Экспорт

	Лог.Информация("Выполняю копирование пользователей из хранилища конфигурации");

	ТекущаяПроцедура = "КопироватьПользователейИзХранилища";

	КонтекстБД = УправлениеКонфигуратором.ПолучитьКонтекст();
	Если Не ЗначениеЗаполнено(КонтекстБД.КлючСоединенияСБазой) Тогда
		Лог.Предупреждение("При копировании пользователей хранилища не определена БД, создаем на основе временной БД");
		УправлениеКонфигуратором.СоздатьФайловуюБазу(КаталогВременнойИБ);
		УправлениеКонфигуратором.УстановитьКонтекст("/F " + КаталогВременнойИБ, "", "");
	КонецЕсли;

	ХранилищеКонфигурации = Новый МенеджерХранилищаКонфигурации();
	ХранилищеКонфигурации.УстановитьУправлениеКонфигуратором(УправлениеКонфигуратором);
	ХранилищеКонфигурации.УстановитьПараметрыАвторизации(Логин, Пароль);

	ХранилищеКонфигурации.УстановитьПутьКХранилищу(ПутьХранилища);

	Попытка
		ХранилищеКонфигурации.КопироватьПользователейИзХранилища(
			ПутьХранилищаКопия,
			ЛогинКопия,
			ПарольКопия,
			ВосстановитьУдаленного);

		Лог.Информация("Копирование пользователей из хранилища конфигурации завершено");
	Исключение
		Сообщение = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Лог.Ошибка(УправлениеКонфигуратором.ВыводКоманды());
		ВызватьИсключение ТекущаяПроцедура + "
		|" + Сообщение;
	КонецПопытки;

КонецПроцедуры

// Выгрузить файл конфигурации определенной версии из хранилища 1С
//
// Параметры:
//   ПутьХранилища - Строка - <описание параметра>
//   ЛогинАдминистратора - Строка - <описание параметра>
//   ПарольАдминистратора - Строка - <описание параметра>
//   ВерсияХранилища - Строка - версия хранилища
//   ПутьКФайлу - Строка - путь к файлу выгрузки
//
Процедура СохранитьВерсиюХранилищаВФайл(Знач ПутьХранилища, Знач ЛогинАдминистратора, Знач ПарольАдминистратора,
				Знач ВерсияХранилища, Знач ПутьКФайлу) Экспорт

		Лог.Информация("Выполняю выгрузку версии конфигурации из хранилища");

		ТекущаяПроцедура = "ВыгрузитьВерсиюХранилищаВФайл";

		Ожидаем.Что(ПутьХранилища, ТекущаяПроцедура + " не задана строка подключения к хранилищу").Заполнено();
		Ожидаем.Что(ЛогинАдминистратора, ТекущаяПроцедура + " не задан пользователь хранилища").Заполнено();

		КонтекстБД = УправлениеКонфигуратором.ПолучитьКонтекст();
		Если Не ЗначениеЗаполнено(КонтекстБД.КлючСоединенияСБазой) Тогда
			Лог.Предупреждение("При сохранении версии хранилища в файл не определена БД, создаем на основе временной БД");
			УправлениеКонфигуратором.СоздатьФайловуюБазу(КаталогВременнойИБ);
			УправлениеКонфигуратором.УстановитьКонтекст("/F " + КаталогВременнойИБ, "", "");
		КонецЕсли;

		ХранилищеКонфигурации = Новый МенеджерХранилищаКонфигурации();
		ХранилищеКонфигурации.УстановитьУправлениеКонфигуратором(УправлениеКонфигуратором);
		ХранилищеКонфигурации.УстановитьПараметрыАвторизации(ЛогинАдминистратора, ПарольАдминистратора);

		ХранилищеКонфигурации.УстановитьПутьКХранилищу(ПутьХранилища);

		Попытка
			ХранилищеКонфигурации.СохранитьВерсиюКонфигурацииВФайл(ВерсияХранилища, ПутьКФайлу);

			Лог.Информация("Выгрузка конфигурации из хранилища завершена");
		Исключение
			Сообщение = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Лог.Ошибка(УправлениеКонфигуратором.ВыводКоманды());
			ВызватьИсключение ТекущаяПроцедура + "
			|" + Сообщение;
		КонецПопытки;

КонецПроцедуры

// Захват объектов для редактирования в хранилище конфигурации
//
// Параметры:
//   ПутьХранилища - Строка - <описание параметра>
//   Логин - Строка - <описание параметра>
//   Пароль - Строка - <описание параметра>
//   ПутьКФайлуСоСпискомОбъектов - Строка - Строка путь к файлу xml с содержанием в формате http://its.1c.ru/db/v839doc#bookmark:adm:TI000000712
// 									 путь к файлу формата XML со списком объектов. Если опция используется, будет выполнена попытка захватить только объекты,
//									 указанные в файле. Если опция не используется, будут захвачены все объекты конфигурации.
//									 Если в списке указаны объекты, захваченные другим пользователем, эти объекты не будут захвачены и будет выдана ошибка.
//									 При этом доступные для захвата объекта будут захвачены. Подробнее о формате файла см в документации.
//   ПолучатьЗахваченныеОбъекты  - Булево - Флаг получения захваченных объектов (По умолчанию равно "Ложь")
//
Процедура ЗахватитьОбъектыВХранилище(Знач ПутьХранилища, Знач Логин, Знач Пароль,
	Знач ПутьКФайлуСоСпискомОбъектов = "",
	Знач ПолучатьЗахваченныеОбъекты = Ложь) Экспорт

	Лог.Информация("Выполняю захват объектов в хранилище");

	ТекущаяПроцедура = "ЗахватитьОбъектыВХранилище";

	Ожидаем.Что( ПутьХранилища, ТекущаяПроцедура + " не задана строка подключения к хранилищу").Заполнено();
	Ожидаем.Что( Логин, ТекущаяПроцедура + " не задан пользователь хранилища").Заполнено();

	ХранилищеКонфигурации = Новый МенеджерХранилищаКонфигурации();
	ХранилищеКонфигурации.УстановитьУправлениеКонфигуратором(УправлениеКонфигуратором);
	ХранилищеКонфигурации.УстановитьПараметрыАвторизации(Логин, Пароль);

	ХранилищеКонфигурации.УстановитьПутьКХранилищу(ПутьХранилища);

	Попытка

		ХранилищеКонфигурации.ЗахватитьОбъектыВХранилище(ПутьКФайлуСоСпискомОбъектов, ПолучатьЗахваченныеОбъекты);

		Лог.Информация("Захват объектов завершен");

	Исключение
		Сообщение = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Лог.Ошибка(УправлениеКонфигуратором.ВыводКоманды());
		ВызватьИсключение ТекущаяПроцедура + "
		|" + Сообщение;
	КонецПопытки;

КонецПроцедуры

// Помещение изменений объектов в хранилище конфигурации
//
// Параметры:
//   ПутьХранилища  - Строка - <описание параметра>
//   Логин          - Строка - <описание параметра>
//   Пароль         - Строка - <описание параметра>
//   ПутьКФайлуСоСпискомОбъектов - Строка - Строка путь к файлу xml с содержанием в формате http://its.1c.ru/db/v839doc#bookmark:adm:TI000000712
//                                   Если опция используется, будет выполнена попытка поместить только объекты, указанные в файле.
//                                   Если опция не используется, будут помещены изменения всех объектов конфигурации.
//                                   При наличии в списке объектов, не захваченных текущим пользователем или захваченных другим пользователем, ошибка выдана не будет
//   Комментарий	 	         - Строка - Комментарий к помещаемым. Чтобы установить многострочный комментарий, для каждой строки следует использовать свою опцию comment.
//   ОставитьОбъектыЗахваченными - Булево - оставлять захват для помещенных объектов.
//   ИгнорироватьУдаленные       - Булево - Флаг игнорирования удаления объектов. По умолчанию = Ложь
//                                   Если опция используется, при обнаружении ссылок на удаленные объекты будет выполнена попытка их очистить.
//                                   Если опция не указана, при обнаружении ссылок на удаленные объекты будет выдана ошибка.
//
Процедура ПоместитьИзмененияОбъектовВХранилище(Знач ПутьХранилища, Знач Логин, Знач Пароль,
	Знач ПутьКФайлуСоСпискомОбъектов = "",
	Знач Комментарий = "",
	Знач ОставитьОбъектыЗахваченными = Ложь,
	Знач ИгнорироватьУдаленные = Ложь) Экспорт

	Лог.Информация("Выполняю помещение объектов в хранилище");

	ТекущаяПроцедура = "ПоместитьИзмененияОбъектовВХранилище";

	Ожидаем.Что( ПутьХранилища, ТекущаяПроцедура + " не задана строка подключения к хранилищу").Заполнено();
	Ожидаем.Что( Логин, ТекущаяПроцедура + " не задан пользователь хранилища").Заполнено();

	ХранилищеКонфигурации = Новый МенеджерХранилищаКонфигурации();
	ХранилищеКонфигурации.УстановитьУправлениеКонфигуратором(УправлениеКонфигуратором);
	ХранилищеКонфигурации.УстановитьПараметрыАвторизации(Логин, Пароль);

	ХранилищеКонфигурации.УстановитьПутьКХранилищу(ПутьХранилища);

	Попытка

		ХранилищеКонфигурации.ПоместитьИзмененияОбъектовВХранилище(ПутьКФайлуСоСпискомОбъектов, Комментарий, ОставитьОбъектыЗахваченными, ИгнорироватьУдаленные);

		Лог.Информация("Помещение объектов завершено");

	Исключение
		Сообщение = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Лог.Ошибка(УправлениеКонфигуратором.ВыводКоманды());
		ВызватьИсключение ТекущаяПроцедура + "
		|" + Сообщение;
	КонецПопытки;

КонецПроцедуры

// Выгружает файл конфигурации из ИБ
//
// Параметры:
//  ПутьКНужномуФайлуКонфигурации - Строка - Путь к результату - выгружаемому файлу конфигурации (*.cf)
//
Процедура ВыгрузитьКонфигурациюВФайл(Знач ПутьКНужномуФайлуКонфигурации) Экспорт

	Лог.Информация("Запускаю выгрузку конфигурации в файл");
	ТекущаяПроцедура = "ВыгрузитьКонфигурациюВФайл";

	Если Не ЗначениеЗаполнено(ПутьКНужномуФайлуКонфигурации) Тогда
		ВызватьИсключение "Не указан путь выходного файла конфигурации."
	КонецЕсли;
	Файл = Новый Файл(ПутьКНужномуФайлуКонфигурации);
	ФС.ОбеспечитьКаталог(Файл.Путь);

	Попытка
		УправлениеКонфигуратором.ВыгрузитьКонфигурациюВФайл(ПутьКНужномуФайлуКонфигурации);
		Текст = УправлениеКонфигуратором.ВыводКоманды();
		Если Не ПустаяСтрока(Текст) Тогда
			Лог.Информация(Текст);
		КонецЕсли;
	Исключение
		Лог.Ошибка(УправлениеКонфигуратором.ВыводКоманды());
		ВызватьИсключение ТекущаяПроцедура;
	КонецПопытки;

	Лог.Информация("Выгрузка в файл завершена.");

КонецПроцедуры

// Выгружает файл поставки конфигурации из ИБ
//
// Параметры:
//  ПутьКНужномуФайлуКонфигурации - Строка - Путь к результату - выгружаемому файлу конфигурации (*.cf)
//
Процедура СоздатьФайлПоставки(Знач ПутьКНужномуФайлуКонфигурации) Экспорт

	Лог.Информация("Запускаю выгрузку файла поставки конфигурации");
	ТекущаяПроцедура = "СоздатьФайлПоставки";

	Если Не ЗначениеЗаполнено(ПутьКНужномуФайлуКонфигурации) Тогда
		ВызватьИсключение "Не указан путь выходного файла конфигурации."
	КонецЕсли;
	Файл = Новый Файл(ПутьКНужномуФайлуКонфигурации);
	ФС.ОбеспечитьКаталог(Файл.Путь);

	Попытка
		УправлениеКонфигуратором.СоздатьФайлыПоставки(ПутьКНужномуФайлуКонфигурации);
		Текст = УправлениеКонфигуратором.ВыводКоманды();
		Если Не ПустаяСтрока(Текст) Тогда
			Лог.Информация(Текст);
		КонецЕсли;
	Исключение
		Лог.Ошибка(УправлениеКонфигуратором.ВыводКоманды());
		ВызватьИсключение ТекущаяПроцедура;
	КонецПопытки;

КонецПроцедуры

// Разбор текущей конфигураций на исходники штатной выгрузкой 1С
//
// Параметры:
//   КаталогВыгрузки - Строка - Путь к каталогу выгрузки
//   ФайлВерсии - Строка - Путь к файлу версии
//   ТолькоИзмененные - Булево - Выгружать только измененные файлы для ускорения выгрузки
//   ИспользоватьПереименования - Булево - Переименовывать файлы в удобные имена и раскладывать по папкам согласно иерархии метаданных
//
Процедура РазобратьНаИсходникиТекущуюКонфигурацию(КаталогВыгрузки, Знач ФайлВерсии = "",
		Знач ТолькоИзмененные = Истина,
		Знач ИспользоватьПереименования = Ложь) Экспорт

	КаталогРаспаковки = ?(ИспользоватьПереименования, ВременныеФайлы.СоздатьКаталог(), КаталогВыгрузки);

	ФайлОбъект = Новый Файл(ФайлВерсии);
	ТолькоИзмененные = (ТолькоИзмененные И ФайлОбъект.Существует());
	ИспользоватьПереименования = ?(ТолькоИзмененные, Ложь, ИспользоватьПереименования);
	УправлениеКонфигуратором.ВыгрузитьКонфигурациюВФайлы(КаталогРаспаковки, , ТолькоИзмененные, ФайлВерсии);
	Если ИспользоватьПереименования Тогда
		РазложитьМодули1СПоПапкамСогласноИерархииМетаданных(КаталогРаспаковки, КаталогВыгрузки);
	КонецЕсли;

	Лог.Информация("Выгрузка в исходники завершена.");

КонецПроцедуры

// Выгружает расширение в исходники
//
// Параметры:
//   КаталогВыгрузки - Строка - Путь к каталогу выгрузки
//   ИмяРасширения - Строка - Имя расширения
//   ФайлВерсии - Строка - Путь к файлу версии
//   ТолькоИзмененные - Булево - Выгружать только измененные файлы для ускорения выгрузки
//
Процедура РазобратьРасширениеНаИсходники(КаталогВыгрузки, ИмяРасширения, 
	Знач ФайлВерсии = "", Знач ТолькоИзмененные = Истина) Экспорт

	ФС.ОбеспечитьКаталог(КаталогВыгрузки);
	Синхронизировать = ТолькоИзмененные И ФС.ФайлСуществует(ФайлВерсии);

	ФорматВыгрузки = ""; // Всегда иерархический
	УправлениеКонфигуратором.ВыгрузитьРасширениеВФайлы(КаталогВыгрузки, ИмяРасширения, ФорматВыгрузки, 
		Синхронизировать, ФайлВерсии);

КонецПроцедуры

// Выгружает файл конфигурации в исходники
//
// Параметры:
//  ФайлКонфигурации - Строка - Путь к источнику - выгружаемому файлу конфигурации (*.cf)
//  ВыходнойКаталог - Строка - Путь к каталогу выгрузки
//  ФайлВерсии - Строка - Путь к файлу версии
//  ИспользоватьПереименования - Булево - Переименовывать файлы в удобные имена и раскладывать по папкам согласно иерархии метаданных
//
Процедура ВыгрузитьКонфигурациюВИсходники(Знач ФайлКонфигурации, Знач ВыходнойКаталог,
	Знач ФайлВерсии = "", Знач ИспользоватьПереименования = Ложь) Экспорт

	Лог.Информация("Запускаю выгрузку конфигурации в исходники");
	ОбъектФайл = Новый Файл(ФайлКонфигурации);
	Если ОбъектФайл.Существует() = Ложь Тогда
		ВызватьИсключение СтроковыеФункции.ПодставитьПараметрыВСтроку("Файл cf %1 не найден", ФайлКонфигурации);
	КонецЕсли;

	ТолькоИзмененные = (ЗначениеЗаполнено(ФайлВерсии) И Новый Файл(ФайлВерсии).Существует());
	КаталогПлоскойВыгрузки = ВременныеФайлы.СоздатьКаталог();

	КаталогВыгрузки = Новый Файл(ВыходнойКаталог);
	Если КаталогВыгрузки.Существует() = Ложь Тогда
		СоздатьКаталог(ВыходнойКаталог);
	КонецЕсли;

	Лог.Отладка("Загружаю конфигурацию " + ФайлКонфигурации);
	УправлениеКонфигуратором.ЗагрузитьКонфигурациюИзФайла(ФайлКонфигурации, Ложь);
	РазобратьНаИсходникиТекущуюКонфигурацию(ВыходнойКаталог, ФайлВерсии, ТолькоИзмененные, ИспользоватьПереименования);

	ВременныеФайлы.УдалитьФайл(КаталогПлоскойВыгрузки);
	ВременныеФайлы.УдалитьФайл(КаталогВременнойИБ);

КонецПроцедуры

// Выгружает файл расширения из ИБ
//
// Параметры:
//  ПутьКНужномуФайлуРасширения - Строка - Путь к результату - выгружаемому файлу конфигурации (*.cfe)
//  ИмяРасширения - Строка - Имя расширения
//
Процедура ВыгрузитьРасширениеВФайл(Знач ПутьКНужномуФайлуРасширения, Знач ИмяРасширения) Экспорт

	Лог.Информация("Запускаю выгрузку расширения в файл");
	ТекущаяПроцедура = "ВыгрузитьРасширенияВФайл";

	Файл = Новый Файл(ПутьКНужномуФайлуРасширения);
	ФС.ОбеспечитьКаталог(Файл.Путь);

	Попытка

		ПараметрыЗапуска = УправлениеКонфигуратором.ПолучитьПараметрыЗапуска();
		ПараметрыЗапуска.Добавить("/DumpCfg");
		ПараметрыЗапуска.Добавить("""" + ОбщиеМетоды.ПолныйПуть(ПутьКНужномуФайлуРасширения) + """");
		ПараметрыЗапуска.Добавить("-Extension """ + ИмяРасширения + """");
		УправлениеКонфигуратором.ВыполнитьКоманду(ПараметрыЗапуска);

		Текст = УправлениеКонфигуратором.ВыводКоманды();
		Если Не ПустаяСтрока(Текст) Тогда
			Лог.Информация(Текст);
		КонецЕсли;
	Исключение
		Лог.Ошибка(УправлениеКонфигуратором.ВыводКоманды());
		ВызватьИсключение ТекущаяПроцедура;
	КонецПопытки;

	Лог.Информация("Выгрузка в файл завершена.");

КонецПроцедуры

// Собирает из исходников расширение с указанным имененм
//
// Параметры:
//	Каталог - Строка - путь каталогу с иходниками расширения
// 	ИмяРасширения - Строка - Имя расширения
//	Обновить - Булево - Признак обновления расширения в базе, имеет смысл только на пустой базе или первой загрузке.
//
Процедура СобратьИзИсходниковРасширение(Каталог, ИмяРасширения, Обновить = Ложь) Экспорт

	Лог.Информация("Выполняю сборку/загрузку расширения %1 из каталога %2", ИмяРасширения, Каталог);
	Конфигуратор = УправлениеКонфигуратором();

	ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();
	ПараметрыЗапуска.Добавить("/Visible");
	ПараметрыЗапуска.Добавить("/LoadConfigFromFiles """ + Каталог + """");
	ПараметрыЗапуска.Добавить("-Extension """ + ИмяРасширения + """");

	Если Обновить Тогда
		ПараметрыЗапуска.Добавить("/UpdateDBCfg");
	КонецЕсли;

	Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);

	Лог.Информация("Сборка/загрузка расширения %1 завершена", ИмяРасширения);

	Попытка
		ПоказатьСписокВсехРасширенийКонфигурации();
	Исключение
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;

КонецПроцедуры


// Выгружает информационную базу в файл
//
// Параметры:
//  ПутьКВыгружаемомуФайлуСДанными - Строка - Путь к результату - выгружаемому файлу с данными (*.dt)
//
Процедура ВыгрузитьИнфобазуВФайл(Знач ПутьКВыгружаемомуФайлуСДанными) Экспорт

		Лог.Информация("Запускаю выгрузку информационной базы в файл");
		ТекущаяПроцедура = "ВыгрузитьИнфобазуВФайл";

		Попытка
			УправлениеКонфигуратором.ВыгрузитьИнформационнуюБазу(ПутьКВыгружаемомуФайлуСДанными);
			Текст = УправлениеКонфигуратором.ВыводКоманды();
			Если Не ПустаяСтрока(Текст) Тогда
				Лог.Информация(Текст);
			КонецЕсли;
		Исключение
			Лог.Ошибка(УправлениеКонфигуратором.ВыводКоманды());
			ВызватьИсключение ТекущаяПроцедура;
		КонецПопытки;

		Лог.Информация("Выгрузка в файл завершена.");

	КонецПроцедуры

// Загружает информационную базу из файла
//
// Параметры:
//  ПутьКЗагружаемомуФайлуСДанными - Строка - Путь к файлу с данными (*.dt)
//  КоличествоЗаданий - Число - Количество заданий (потоков) загрузки из файла с данными
//
Процедура ЗагрузитьИнфобазуИзФайла(Знач ПутьКЗагружаемомуФайлуСДанными, Знач КоличествоЗаданий = 0) Экспорт

	Лог.Информация("Запускаю загрузку информационной базы из файла");
	ТекущаяПроцедура = "ЗагрузитьИнфобазуИзФайла";

	Попытка
		УправлениеКонфигуратором.ЗагрузитьИнформационнуюБазу(ПутьКЗагружаемомуФайлуСДанными, КоличествоЗаданий);
		Текст = УправлениеКонфигуратором.ВыводКоманды();
		Если Не ПустаяСтрока(Текст) Тогда
			Лог.Информация(Текст);
		КонецЕсли;
	Исключение
		Лог.Ошибка(УправлениеКонфигуратором.ВыводКоманды());
		ВызватьИсключение ТекущаяПроцедура;
	КонецПопытки;

	Лог.Информация("Загрузка из файла завершена.");

КонецПроцедуры // ЗагрузитьИнфобазуИзФайла

Функция ВыполнитьСинтаксическийКонтроль(Знач КоллекцияПроверок,
	РезультатПроверки,
	Знач СтрокаПодключенияХранилище = "",
	Знач ПользовательХранилища = "",
	Знач ПарольХранилища = "") Экспорт

	Лог.Информация("Выполняю синтакс-контроль конфигурации");

	РезультатПроверки = "";
	Успешно = ПолучитьРезультатыСинтаксическогоКонтроля(УправлениеКонфигуратором, КоллекцияПроверок, РезультатПроверки,
				СтрокаПодключенияХранилище,
				ПользовательХранилища,
				ПарольХранилища);

	Лог.Отладка("Результат синтакс-контроля: %1", РезультатПроверки);

	Возврат Успешно;

КонецФункции

Процедура СобратьИзИсходниковТекущуюКонфигурацию(Знач ВходнойКаталог,
	Знач СписокФайловДляЗагрузки = "", СниматьСПоддержки = Ложь, ОбновитьФайлВерсий = Истина) Экспорт
	Перем НеобходимоОбновлять, ИмяВременногоФайла;
	Лог.Информация("Загрузка конфигурации из файлов " + ВходнойКаталог);
	НеобходимоОбновлять = Ложь;
	КаталогВыгрузки = Новый Файл(ВходнойКаталог);
	Если КаталогВыгрузки.Существует() = Ложь Тогда
		ВызватьИсключение СтроковыеФункции.ПодставитьПараметрыВСтроку("Каталог исходников %1 не найден", КаталогВыгрузки.ПолноеИмя);
	КонецЕсли;

	ФайлПереименований = Новый Файл(ОбъединитьПути(ВходнойКаталог, "renames.txt"));
	Если ФайлПереименованийВалиден(ФайлПереименований) Тогда
		КаталогЗагрузки = ПодготовитьКаталогЗагрузкиПоФайлуПереименований(ВходнойКаталог, ФайлПереименований.ПолноеИмя);
	Иначе
		КаталогЗагрузки = ВходнойКаталог;
	КонецЕсли;

	Конфигуратор = УправлениеКонфигуратором();

	Если СниматьСПоддержки = Истина Тогда
		ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();
		ПараметрыЗапуска.Добавить("/ConfigurationRepositoryUnbindCfg -force");
		Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);

		ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();
		ПараметрыЗапуска.Добавить("/ManageCfgSupport -disableSupport -force");
		Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);

	КонецЕсли;

	ИмяВременногоФайла = "";
	Если СтрНайти(СписокФайловДляЗагрузки, ";") > 0 Тогда
		МассивСтрок = СтрРазделить(СписокФайловДляЗагрузки, ";");
		Для каждого Элемент из МассивСтрок Цикл
			Элемент = ОбщиеМетоды.ПолныйПуть(Элемент);
		КонецЦикла;
		СписокФайловДляЗагрузки = СтрСоединить(МассивСтрок, Символы.ПС);
	КонецЕсли;

	Если ЗначениеЗаполнено(СписокФайловДляЗагрузки) Тогда
		МассивСтрок = СтрРазделить(СписокФайловДляЗагрузки, Символы.ПС);
		Для каждого Элемент из МассивСтрок Цикл
			Элемент = ОбщиеМетоды.ПолныйПуть(Элемент);
		КонецЦикла;
		ТекстДляЗаписи = СтрСоединить(МассивСтрок, Символы.ПС);

		ИмяВременногоФайла = ВременныеФайлы.НовоеИмяФайла("txt");
		Запись = Новый ЗаписьТекста(ИмяВременногоФайла);
		Запись.Записать(ТекстДляЗаписи);
		Запись.Закрыть();
	КонецЕсли;

	Конфигуратор.ЗагрузитьКонфигурациюИзФайлов(КаталогЗагрузки, ИмяВременногоФайла, , ОбновитьФайлВерсий);

	Если НеобходимоОбновлять Тогда
		Конфигуратор.ОбновитьКонфигурациюБазыДанных(Ложь, Истина);
	КонецЕсли;

	Лог.Информация("Загрузка конфигурации из файлов успешно завершена!");

КонецПроцедуры

// Загружает файл конфигурации в текущую базу данных.
//	Параметры:
//		ПутьКФайлу - Строка - Путь к файлу *.cf
//		СниматьСПоддержки - Булево - снимает с поддержки, отключает от хранилища, по умолчанию Истина
//
Процедура ЗагрузитьФайлКонфигурации(Знач ПутьКФайлу, Знач СниматьСПоддержки = Истина) Экспорт
	Перем ФайлЗагрузки, Конфигуратор, ПараметрыЗапуска;

	Лог.Информация("Загружаем файл конфигурации %1", ПутьКФайлу);
	ФайлЗагрузки = Новый Файл(ПутьКФайлу);
	Ожидаем.Что(ФайлЗагрузки.Существует(), "Путь к файлу загрузки не существует " + ФайлЗагрузки.ПолноеИмя).ЕстьИстина();

	Конфигуратор = УправлениеКонфигуратором();

	Если ТипЗнч(СниматьСПоддержки) = Тип("Булево") И СниматьСПоддержки Тогда
		ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();
		ПараметрыЗапуска.Добавить("/ConfigurationRepositoryUnbindCfg -force");
		Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);

		ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();
		ПараметрыЗапуска.Добавить("/ManageCfgSupport -disableSupport -force");
		Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);

	КонецЕсли;

	Конфигуратор.ЗагрузитьКонфигурациюИзФайла(ФайлЗагрузки.ПолноеИмя);

	Лог.Информация("Загрузка конфигурации из файла cf успешно завершена!");

КонецПроцедуры

// Загружает файл расширения в текущую базу данных.
//	Параметры:
//		ПутьКФайлу - Строка - Путь к файлу *.cfe
//		ИмяРасширения - Строка
//		ОбновитьКонфигурациюИБ - Булево
//
Процедура ЗагрузитьФайлРасширения(Знач ПутьКФайлу, Знач ИмяРасширения, Знач ОбновитьКонфигурациюИБ = Ложь) Экспорт
	Перем ФайлЗагрузки, Конфигуратор;

	Лог.Информация("Загружаю файл расширения %1", ПутьКФайлу);
	ФайлЗагрузки = Новый Файл(ПутьКФайлу);
	Ожидаем.Что(ФайлЗагрузки.Существует(), "Путь к файлу загрузки не существует " + ФайлЗагрузки.ПолноеИмя).ЕстьИстина();

	Конфигуратор = УправлениеКонфигуратором();

	Конфигуратор.ЗагрузитьРасширениеИзФайла(ФайлЗагрузки.ПолноеИмя, ИмяРасширения, ОбновитьКонфигурациюИБ);

	Лог.Информация("Загрузка расширения из cfe-файла успешно завершена!");

КонецПроцедуры

// Возвращает каталог времнной ИБ
//
//  Возвращаемое значение:
//   Строка - Каталог временной ИБ
//
Функция КаталогВременнойИБ() Экспорт
	Возврат КаталогВременнойИБ;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьРезультатыСинтаксическогоКонтроля(Знач Конфигуратор, Знач КоллекцияПроверок, ЛогПроверкиИзКонфигуратора,
	Знач СтрокаПодключенияХранилище,
	Знач ПользовательХранилища,
	Знач ПарольХранилища)

	Ключи = ПолучитьКлючиПроверкиКонфигурации(КоллекцияПроверок);

	Успешно = Истина;
	Попытка
		Конфигуратор.ВыполнитьРасширеннуюПроверкуКонфигуратора(Ключи,
			СтрокаПодключенияХранилище,
			ПользовательХранилища,
			ПарольХранилища);
		ЛогПроверкиИзКонфигуратора = Конфигуратор.ВыводКоманды();
	Исключение
		ЛогПроверкиИзКонфигуратора = Конфигуратор.ВыводКоманды();
		Успешно = Ложь;
	КонецПопытки;

	Возврат Успешно;

КонецФункции

Функция ПолучитьКлючиПроверкиКонфигурации(Знач КоллекцияПроверок)

	Ключи = Новый Соответствие;
	Если КоллекцияПроверок = Неопределено Тогда
		Ключи.Вставить("-ThinClient", Истина);
		Ключи.Вставить("-WebClient", Истина);
		Ключи.Вставить("-Server", Истина);
		Ключи.Вставить("-ExternalConnection", Истина);
		Ключи.Вставить("-ThickClientOrdinaryApplication", Истина);
	Иначе
		Для каждого Ключ Из КоллекцияПроверок Цикл
			Если Ключ = "--mode" Тогда
				Продолжить;
			КонецЕсли;
			Ключи.Вставить(Ключ, Истина);
		КонецЦикла;
	КонецЕсли;

	Возврат Ключи;

КонецФункции

Процедура ПолучитьЛог()
	Если Лог = Неопределено Тогда
		Лог = Логирование.ПолучитьЛог(ПараметрыСистемы.ИмяЛогаСистемы());
	КонецЕсли;
КонецПроцедуры

Функция ПодготовитьКаталогЗагрузкиПоФайлуПереименований(ВходнойКаталог, ФайлПереименований)
	Перем БылаОшибка;
	КаталогВременнойСтруктуры = ВременныеФайлы.СоздатьКаталог();
	Текст = Новый ЧтениеТекста(ФайлПереименований);
	СоответствиеФайлов = Новый Соответствие();
	БылаОшибка = Ложь;
	Стр = Текст.ПрочитатьСтроку();
	Пока Стр <> Неопределено Цикл // строки читаются до символа перевода строки
		Если ПараметрыСистемы.ЭтоWindows = Ложь Тогда
			Стр = СтрЗаменить(Стр, "\", "/");
		КонецЕсли;

		Индекс = Найти(Стр, "-->");
		Если Индекс > 0 Тогда
			ИмяНовогоФайла = ОбъединитьПути(КаталогВременнойСтруктуры, Лев(Стр, Индекс - 1));
			ФайлНовый = Новый Файл(ИмяНовогоФайла);
			КаталогНовый = Новый Файл(ФайлНовый.Путь);
			Если НЕ КаталогНовый.Существует() Тогда
				СоздатьКаталог(ФайлНовый.Путь);
			КонецЕсли;
			ПутьФайлСтарый = ОбъединитьПути(ВходнойКаталог, Сред(Стр, Индекс + 3));
			ФайлСтарый = Новый Файл(ПутьФайлСтарый);
			Если ФайлСтарый.Существует() Тогда
				СоответствиеФайлов.Вставить(ФайлСтарый.ПолноеИмя, Истина);
				КопироватьФайл(ПутьФайлСтарый, ИмяНовогоФайла);
				Если Нрег(Прав(ФайлНовый.ПолноеИмя, 5)) = ".form" Или Нрег(ФайлНовый.Имя) = "form.bin" Тогда
					КаталогФормыСтарый = ОбъединитьПути(ФайлСтарый.Путь, ФайлНовый.ИмяБезРасширения);
					КаталогФормыНовый = ОбъединитьПути(ФайлНовый.Путь, ФайлНовый.ИмяБезРасширения);
					СоздатьКаталог(КаталогФормыНовый);
					МассивФайлов = НайтиФайлы(КаталогФормыСтарый, ПолучитьМаскуВсеФайлы());
					Для Каждого Элемент из МассивФайлов Цикл
						НовыйПутьФормы = ОбъединитьПути(КаталогФормыНовый, Элемент.Имя);
						Лог.Отладка("Копируем " + Элемент.ПолноеИмя + "--> " + НовыйПутьФормы);
						КопироватьФайл(Элемент.ПолноеИмя, НовыйПутьФормы);
					КонецЦикла;

					УпаковщикМетаданных.УпаковатьКонтейнерМетаданных(КаталогФормыНовый, ФайлНовый.ПолноеИмя);
				КонецЕсли;
			Иначе
				БылаОшибка = Истина;
			КонецЕсли;
		КонецЕсли;

		Стр = Текст.ПрочитатьСтроку();

	КонецЦикла;

	Если БылаОшибка = Истина Тогда
		МассивФайлов = НайтиФайлы(ВходнойКаталог, ПолучитьМаскуВсеФайлы(), Истина);
		Для Каждого Элемент из МассивФайлов Цикл
			Если СоответствиеФайлов.Получить(Элемент.ПолноеИмя) = Неопределено Тогда
				ИмяНовогоФайла = ОбъединитьПути(КаталогВременнойСтруктуры, Сред(Элемент.ПолноеИмя, СтрДлина(ВходнойКаталог)));
				ФайлНовый = Новый Файл(ИмяНовогоФайла);
				КаталогНовый = Новый Файл(ФайлНовый.Путь);
				Если НЕ КаталогНовый.Существует() Тогда
					СоздатьКаталог(ФайлНовый.Путь);
				КонецЕсли;
				КопироватьФайл(Элемент.ПолноеИмя, ИмяНовогоФайла);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат КаталогВременнойСтруктуры;

КонецФункции

Функция ФайлПереименованийВалиден(Знач ФайлПереименований)
	Рез = Ложь;
	Если ФайлПереименований.Существует() Тогда
		ПутьВыгрузки = ФайлПереименований.Путь;
		ФайлКонфигурации = Новый Файл(ОбъединитьПути(ПутьВыгрузки, "Configuration.xml"));
		ФайлКонфигурацииВремяИзменения = ФайлКонфигурации.ПолучитьВремяИзменения();
		ФайлПереименованийВремяИзменения = ФайлПереименований.ПолучитьВремяИзменения();
		Если ФайлКонфигурацииВремяИзменения <= ФайлПереименованийВремяИзменения Тогда
			Рез = Истина;

			Лог.Отладка("Файл конфигурации %1 создан не позже файла переименований %2",
				ФайлКонфигурации.Имя, ФайлПереименований.Имя);
			Лог.Отладка("Данные о переименованиях использовать можно.");
		Иначе
			Лог.Отладка("Файл конфигурации %1 создан позже файла переименований %2",
				ФайлКонфигурации.Имя, ФайлПереименований.Имя);
			Лог.Отладка("	Дата/время файла конфигурации %1 - %2",
				ФайлКонфигурации.Имя, ФайлКонфигурацииВремяИзменения);
			Лог.Отладка("	Дата/время файла переименований %1 - %2",
				ФайлПереименований.Имя, ФайлПереименованийВремяИзменения);
			Лог.Отладка("Файл переименований использовать нельзя, использую только штатную загрузку через Конфигуратор.");
		КонецЕсли;
	Иначе
		Лог.Отладка("Файл переименований %1 не существует, использую только штатную загрузку через Конфигуратор.",
			ФайлПереименований.Имя);
	КонецЕсли;
	Возврат Рез;
КонецФункции

// Выполнить команду/действие в режиме 1С:Предприятия
//
// Параметры:
//   ПараметрЗапуска - Строка - <описание параметра>
//   ОбработкаДляЗапуска - Строка - <описание параметра>
//   ТолстыйКлиент - Булево - признак запуска толстого клиента
//   ДополнительныеКлючиЗапуска - Строка - <описание параметра>
//   ОжидатьЗавершения - Булево - по умолчанию Истина, Ложь - запускает и завершает свой процесс.
//   ДопСообщения - Структура
//
Процедура ЗапуститьВРежимеПредприятия(Знач ПараметрЗапуска,
										Знач ОбработкаДляЗапуска, Знач ТолстыйКлиент,
										Знач ДополнительныеКлючиЗапуска,
										Знач ОжидатьЗавершения, Знач ДопСообщения)

	Лог.Информация("Выполняю команду/действие в режиме 1С:Предприятие");

	ТекущаяПроцедура = ДопСообщения.Ключ;

	Если ТолстыйКлиент = Ложь Тогда
		ТонкийКлиент1С = УправлениеКонфигуратором.ПутьКТонкомуКлиенту1С(УправлениеКонфигуратором.ПутьКПлатформе1С());
		УправлениеКонфигуратором.ПутьКПлатформе1С(ТонкийКлиент1С);
	КонецЕсли;

	УправлениеКонфигуратором.УстановитьПризнакОжиданияВыполненияПрограммы(ОжидатьЗавершения);

	Если Не ОжидатьЗавершения Тогда
		УправлениеКонфигуратором.УстановитьИмяФайлаСообщенийПлатформы(ВременныеФайлы.НовоеИмяФайла());
	КонецЕсли;

	ДополнительныеКлючи = ДополнительныеКлючиЗапуска;
	Если Не ПустаяСтрока(ОбработкаДляЗапуска) Тогда
		ДополнительныеКлючи = "" + ДополнительныеКлючи + " /Execute" +ОбщиеМетоды.ОбернутьПутьВКавычки(ОбработкаДляЗапуска);
	КонецЕсли;

	Лог.Отладка("ДополнительныеКлючи:" + ДополнительныеКлючи);
	Лог.Отладка("ПараметрЗапуска:" + ПараметрЗапуска);

	Попытка
		УправлениеКонфигуратором.ЗапуститьВРежимеПредприятия(ПараметрЗапуска,
			?(ТипЗнч(ТолстыйКлиент) = Тип("Булево"), Не ТолстыйКлиент, ТолстыйКлиент),
			ДополнительныеКлючи
		);
		Текст = УправлениеКонфигуратором.ВыводКоманды();
		Если Не ПустаяСтрока(Текст) Тогда
			Лог.Информация(Текст);
		КонецЕсли;

	Исключение
		Лог.Ошибка(УправлениеКонфигуратором.ВыводКоманды());
		Лог.Ошибка(ОписаниеОшибки());
		ВызватьИсключение ТекущаяПроцедура;
	КонецПопытки;

	Лог.Информация("Выполнение команды/действия в режиме 1С:Предприятие завершено.");
КонецПроцедуры

// Выполнить команду/действие в режиме 1С:Предприятия с ожиданием выполнения и чтением лог-файла
//
// Параметры:
//   ПараметрЗапуска - Строка - <описание параметра>
//   ОбработкаДляЗапуска - Строка - <описание параметра>
//   ПутьЛогаВыполненияСценариев - Строка - путь файла информации 1С по ключу "/out".
//   ТолстыйКлиент - Булево, Неопределено - признак запуска толстого клиента
//   ДополнительныеКлючиЗапуска - Строка - <описание параметра>
//   ДопСообщения - Структура - см. НовыеДопСообщенияДляЗапускаПредприятия
//		* ПоказыватьДополнительноЛогПредприятия - Булево
//
// Возвращаемое значение:
//	Строка - лог 1С:Предприятие
//
Функция ЗапуститьВРежимеПредприятияСЛогФайлом(Знач ПараметрЗапуска,
										Знач ОбработкаДляЗапуска,
										Знач ПутьЛогаВыполненияСценариев,
										Знач ТолстыйКлиент,
										Знач ДополнительныеКлючиЗапуска,
										Знач ДопСообщения)

	Лог.Информация("Выполняю команду/действие в режиме 1С:Предприятие");

	Результат = "";

	ТекущаяПроцедура = "ЗапуститьВРежимеПредприятияСЛогФайлом";

	УправлениеКонфигуратором.УстановитьПризнакОжиданияВыполненияПрограммы(Истина);

	ПутьДамп = ВременныеФайлы.НовоеИмяФайла();
	УправлениеКонфигуратором.УстановитьИмяФайлаСообщенийПлатформы(ПутьДамп);

	ДополнительныеКлючи = ДополнительныеКлючиЗапуска;
	Если Не ПустаяСтрока(ОбработкаДляЗапуска) Тогда
		ДополнительныеКлючи = "" + ДополнительныеКлючи + " /Execute" +ОбщиеМетоды.ОбернутьПутьВКавычки(ОбработкаДляЗапуска);
	КонецЕсли;

	Лог.Отладка("ДополнительныеКлючи:" + ДополнительныеКлючи);
	Лог.Отладка("ПараметрЗапуска:" + ПараметрЗапуска);

	ПараметрыСвязиСБазой = УправлениеКонфигуратором.ПолучитьПараметрыЗапуска();
	ПараметрыСвязиСБазой[0] = "ENTERPRISE";
	ПараметрыСвязиСБазой.Удалить(2);

	Если ЗначениеЗаполнено(ПараметрЗапуска) Тогда
		ПараметрыСвязиСБазой.Добавить("/C" + ПараметрЗапуска);
	КонецЕсли;

	Если ТолстыйКлиент = Истина Тогда
		ПараметрыСвязиСБазой.Добавить("/RunModeOrdinaryApplication ");
	КонецЕсли;

	ПараметрыСвязиСБазой.Добавить("/out""" + ПутьДамп + """");

	Если ДополнительныеКлючи <> Неопределено Тогда
		ПараметрыСвязиСБазой.Добавить(ДополнительныеКлючи);
	КонецЕсли;

	СтрокаЗапуска = "";
	Для Каждого Параметр Из ПараметрыСвязиСБазой Цикл
		СтрокаЗапуска = СтрокаЗапуска + " " + Параметр;
	КонецЦикла;

	Приложение = УправлениеКонфигуратором.ПутьКТонкомуКлиенту1С();
	Если ТолстыйКлиент = Истина Тогда
		Приложение = УправлениеКонфигуратором.ПутьКПлатформе1С();
	КонецЕсли;

	Если Найти(Приложение, " ") > 0 Тогда
		Приложение = ОбщиеМетоды.ОбернутьПутьВКавычки(Приложение);
	КонецЕсли;
	Приложение = Приложение + " " + СтрокаЗапуска;
	Лог.Отладка(Приложение);

	Попытка
		ЗапуститьПроцесс1С(Приложение, ПутьЛогаВыполненияСценариев );
		Результат = ВыводПредприятия(ПутьДамп);

		ПроверитьЛогПредприятияНаИзвестныеОшибки(Результат);

		ПоказатьВыводПредприятия(Результат, ДопСообщения.ПоказыватьДополнительноЛогПредприятия);

	Исключение
		ОписаниеОшибки = ОписаниеОшибки();

		Результат = ВыводПредприятия(ПутьДамп);
		ПоказатьВыводПредприятия(Результат, Истина);

		Лог.Ошибка(ОписаниеОшибки);
		ВызватьИсключение ТекущаяПроцедура;
	КонецПопытки;

	Лог.Информация("Выполнение команды/действия в режиме 1С:Предприятие завершено.");

	Возврат Результат;
КонецФункции

Процедура ЗапуститьПроцесс1С(Знач СтрокаЗапуска, Знач ПутьКФайлуЛога)

	ПериодОпросаВМиллисекундах = 1000;

	НадоЧитатьЛог = Истина;
	КолСтрокЛогаПрочитано = 0;

	Процесс = СоздатьПроцесс(СтрокаЗапуска);
	Процесс.Запустить();

	ТаймаутПоУмолчанию = 500;
	Приостановить(ТаймаутПоУмолчанию);

	Пока НЕ Процесс.Завершен Цикл
		Если ПериодОпросаВМиллисекундах <> 0 Тогда
			Приостановить(ПериодОпросаВМиллисекундах);
		КонецЕсли;

		Если НадоЧитатьЛог Тогда
			ВывестиНовыеСообщения(ПутьКФайлуЛога, КолСтрокЛогаПрочитано);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Выполняет перенос файлов из каталога плоской выгрузки в каталог с иерархической структурой метаданных.
//
Процедура РазложитьМодули1СПоПапкамСогласноИерархииМетаданных(Знач КаталогПлоскойВыгрузки,
	Знач КаталогИерархическойВыгрузки)

	Лог.Отладка("Раскладываем модули по папкам согласно иерархии метаданных");

	Если ПустаяСтрока(КаталогИерархическойВыгрузки) Тогда
		ВызватьИсключение "Не задан каталог выгрузки модулей по иерархии";
	КонецЕсли;

	ФайлВыгрузкиКаталог = Новый Файл(КаталогИерархическойВыгрузки);
	Если Не ФайлВыгрузкиКаталог.Существует() Тогда
		СоздатьКаталог(КаталогИерархическойВыгрузки);
		//ЗарегистрироватьВременныйФайл(КаталогИерархическойСтруктурыМодулей); TODO выяснить почему временный?
	КонецЕсли;

	Переименования = Новый ТаблицаЗначений;
	Переименования.Колонки.Добавить("Источник");
	Переименования.Колонки.Добавить("Приемник");

	ИскатьВПодкаталогах = Истина;
	СписокФайлов = НайтиФайлы(КаталогПлоскойВыгрузки, ПолучитьМаскуВсеФайлы(), ИскатьВПодкаталогах);
	Лог.Отладка("Найдено файлов выгрузки: " + СписокФайлов.Количество() + " шт.");
	Для Каждого Файл Из СписокФайлов Цикл

		ИмяНовогоФайла = СтрЗаменить(Файл.ПолноеИмя, КаталогПлоскойВыгрузки, "");
		ИмяНовогоФайла = ?(Лев(ИмяНовогоФайла, 1) = "/", Сред(ИмяНовогоФайла, 2), ИмяНовогоФайла);
		ИмяНовогоФайла = ?(Лев(ИмяНовогоФайла, 1) = "\", Сред(ИмяНовогоФайла, 2), ИмяНовогоФайла);
		Если Файл.ЭтоКаталог() Тогда
			ИмяКаталога = ОбъединитьПути(КаталогИерархическойВыгрузки, ИмяНовогоФайла);
			ФайлКаталога = Новый Файл(ИмяКаталога);
			Если ФайлКаталога.Существует() = Ложь Тогда
				СоздатьКаталог(ИмяКаталога);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		ИмяФайлаДляПереименования = ИмяНовогоФайла;

		НовыйФайл = Новый Файл(ОбъединитьПути(КаталогИерархическойВыгрузки, ИмяНовогоФайла));
		НовыйКаталог = Новый Файл(НовыйФайл.Путь);
		Если НЕ НовыйКаталог.Существует() Тогда
			СоздатьКаталог(НовыйКаталог.ПолноеИмя);
		КонецЕсли;

		ДобавитьПереименование(Переименования, ИмяФайлаДляПереименования, ИмяНовогоФайла);

		КопироватьФайл(Файл.ПолноеИмя, НовыйФайл.ПолноеИмя);

		Если Нрег(Прав(Файл.ПолноеИмя, 5)) = ".form" Или Нрег(Файл.Имя) = "form.bin" Тогда
			КаталогФормы = ОбъединитьПути(НовыйКаталог.ПолноеИмя, НовыйФайл.ИмяБезРасширения);
			ФайлКаталога = Новый Файл(КаталогФормы);
			Если ФайлКаталога.Существует() Тогда
				УдалитьФайлы(ФайлКаталога.ПолноеИмя, ПолучитьМаскуВсеФайлы());
			КонецЕсли;
			СоздатьКаталог(КаталогФормы);
			УпаковщикМетаданных.РаспаковатьКонтейнерМетаданных(НовыйФайл.ПолноеИмя, КаталогФормы);
		КонецЕсли;

	КонецЦикла;

	ТекстовыйДокумент = Новый ЗаписьТекста(ОбъединитьПути(КаталогИерархическойВыгрузки, "renames.txt"));
	Для Каждого ЭлементСтроки Из Переименования Цикл
		ТекстовыйДокумент.ЗаписатьСтроку(ЭлементСтроки.Источник + "-->" +СтрЗаменить(ЭлементСтроки.Приемник, "/", "\"));
	КонецЦикла;
	ТекстовыйДокумент.Закрыть();

КонецПроцедуры

Процедура ДобавитьПереименование(Знач Переименования, Знач Источник, Знач Приемник)
	СтрокаПереименования = Переименования.Добавить();
	СтрокаПереименования.Источник = Источник;
	СтрокаПереименования.Приемник = Приемник;
КонецПроцедуры

Процедура ВывестиНовыеСообщения(ИмяФайлаЛога, КолСтрокЛогаПрочитано)
	Попытка
		МассивСтрок = ПолучитьНовыеСтрокиЛога(ИмяФайлаЛога, КолСтрокЛогаПрочитано);
		Для Каждого Стр Из МассивСтрок Цикл
			Если СокрЛП(Стр) = "" Тогда
				Продолжить;
			КонецЕсли;
			Лог.Информация(СокрЛП(Стр));
		КонецЦикла;
	Исключение
		Лог.Ошибка(ОписаниеОшибки());
	КонецПопытки;

КонецПроцедуры

Функция ПолучитьНовыеСтрокиЛога(Знач ИмяФайла, КолСтрокЛогаПрочитано)
	Файл = Новый Файл(ИмяФайла);
	Если Не Файл.Существует() Тогда
		Возврат Новый Массив;
	КонецЕсли;

	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайла, "UTF-8", , , Ложь);

	ВесьТекст = Текст.Прочитать();

	Текст.Закрыть();

	Массив = Новый Массив();

	МассивСтрок = СтрРазделить(ВесьТекст, Символы.ПС, Истина);
	Если ЗначениеЗаполнено(МассивСтрок) Тогда
		КоличествоМинус1 = МассивСтрок.Количество() - 1;
		Если МассивСтрок[КоличествоМинус1] = "" Тогда
			МассивСтрок.Удалить(КоличествоМинус1);
		КонецЕсли;
	КонецЕсли;

	Для Ккк = (КолСтрокЛогаПрочитано + 1) По МассивСтрок.Количество() Цикл
		Массив.Добавить(МассивСтрок[Ккк - 1]);
	КонецЦикла;

	КолСтрокЛогаПрочитано = МассивСтрок.Количество();

	Возврат Массив;
КонецФункции

Процедура ПроверитьЛогПредприятияНаИзвестныеОшибки(ЛогПредприятия)

	НормализованныйЛог = НРег(ЛогПредприятия);
	Для каждого Ошибка Из ИзвестныеНормализованныеОшибки() Цикл
		Если Найти(НормализованныйЛог, Ошибка) > 0 Тогда
			ВызватьИсключение Ошибка;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция ИзвестныеНормализованныеОшибки()
	Ошибки = Новый Массив;
	Ошибки.Добавить("Пользователь ИБ не идентифицирован");

	Результат = Новый Массив;
	Для каждого Ошибка Из Ошибки Цикл
		Результат.Добавить(НРег(Ошибка));
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ВыводПредприятия(Знач ПутьДамп)
	Результат = "";
	Если ФС.Существует(ПутьДамп) Тогда
		Результат = ОбщиеМетоды.ПрочитатьФайл(ПутьДамп, КодировкаТекста.ANSI);
	Иначе
		Лог.Отладка("Не существует файл вывода от 1С - %1", ПутьДамп);
	КонецЕсли;

	Возврат Результат;

КонецФункции

Процедура ПоказатьВыводПредприятия(Знач ТекстВывода, Знач ПоказыватьВЛоге)

	Если Не ПустаяСтрока(ТекстВывода) Тогда
		Сообщение = СтрШаблон("Дополнительный лог выполнения 1С:Предприятие
		|
		|%1", ТекстВывода);

		Если ПоказыватьВЛоге Тогда
			Лог.Информация(Сообщение);
		Иначе
			Лог.Отладка(Сообщение);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция ТекущаяВерсияПлатформы()

	ПутьПредприятия = УправлениеКонфигуратором.ПутьКПлатформе1С();
	ШаблонВерсии = Новый РегулярноеВыражение("8(\.\d+){3}");
	ВсеСовпадения = ШаблонВерсии.НайтиСовпадения(ПутьПредприятия);
	Если ВсеСовпадения.Количество() = 0 Тогда
		ВызватьИсключение "Неопределена версия платформы!";
	КонецЕсли;

	Возврат ВсеСовпадения[0].Значение;

КонецФункции

#КонецОбласти

ПолучитьЛог();
