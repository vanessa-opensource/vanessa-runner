#Использовать v8runner
#Использовать asserts

Перем Лог;
Перем УправлениеКонфигуратором;
Перем КаталогВременнойИБ;

Функция УправлениеКонфигуратором() Экспорт
	Возврат УправлениеКонфигуратором;	
КонецФункции

Процедура Инициализация(Знач СтрокаПодключения, Знач Пользователь="", Знач Пароль="",
						Знач ВерсияПлатформы="", Знач КлючРазрешенияЗапуска = "") Экспорт

	ТекущаяПроцедура = "Инициализация";
	Ожидаем.Что(СтрокаПодключения, ТекущаяПроцедура+": не задана строка подключения").Заполнено();	
	
	УправлениеКонфигуратором = Новый УправлениеКонфигуратором();

	КаталогВременнойИБ = ВременныеФайлы.СоздатьКаталог();
	УправлениеКонфигуратором.КаталогСборки(КаталогВременнойИБ);
		
	УправлениеКонфигуратором.УстановитьКонтекст(СтрокаПодключения, Пользователь, Пароль);
	Если НЕ ПустаяСтрока(ВерсияПлатформы) Тогда
		УправлениеКонфигуратором.ИспользоватьВерсиюПлатформы(ВерсияПлатформы);
	КонецЕсли;
	
	Если Не ПустаяСтрока(КлючРазрешенияЗапуска) Тогда
		УправлениеКонфигуратором.УстановитьКлючРазрешенияЗапуска(КлючРазрешенияЗапуска);
	КонецЕсли;	
КонецПроцедуры

Процедура Деструктор() Экспорт
	Попытка
		Если КаталогВременнойИБ <> Неопределено Тогда
			ВременныеФайлы.УдалитьФайл(КаталогВременнойИБ);
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	КаталогВременнойИБ = Неопределено;
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//   СтрокаПодключения - <Тип.Вид> - <описание параметра>
//   Пользователь - <Тип.Вид> - <описание параметра>
//   Пароль - <Тип.Вид> - <описание параметра>
//   КлючРазрешенияЗапуска - <Тип.Вид> - <описание параметра>
//   ВерсияПлатформы - <Тип.Вид> - <описание параметра>
//   ДополнительныеКлючиЗапуска - <Тип.Вид> - <описание параметра>
//
Процедура ОбновитьКонфигурациюБазыДанных(Знач СтрокаПодключения, Знач Пользователь="", Знач Пароль="",
										Знач КлючРазрешенияЗапуска = "", Знач ВерсияПлатформы="", 
										Знач ДополнительныеКлючиЗапуска = "") Экспорт
										

	Лог.Информация("Запускаю обновление конфигурации БД");
	ТекущаяПроцедура = "ОбновитьКонфигурациюБазыДанных";
					
	Ожидаем.Что(СтрокаПодключения, ТекущаяПроцедура+": не задана строка подключения").Заполнено();	
	
	// TODO отрефакторить создание УправлениеКонфигуратором и задание базовых параметров выполнения
	Конфигуратор = Новый УправлениеКонфигуратором();
	УправлениеКонфигуратором = Конфигуратор;

	КаталогВременнойИБ = ВременныеФайлы.СоздатьКаталог();
	Конфигуратор.КаталогСборки(КаталогВременнойИБ);
		
	Конфигуратор.УстановитьКонтекст(СтрокаПодключения, Пользователь, Пароль);
	Если НЕ ПустаяСтрока(ВерсияПлатформы) Тогда
		Конфигуратор.ИспользоватьВерсиюПлатформы(ВерсияПлатформы);
	КонецЕсли;
	
	Если Не ПустаяСтрока(КлючРазрешенияЗапуска) Тогда
		Конфигуратор.УстановитьКлючРазрешенияЗапуска(КлючРазрешенияЗапуска);
	КонецЕсли;	
	
	Попытка
		Конфигуратор.ОбновитьКонфигурациюБазыДанных(Ложь);
		Текст = Конфигуратор.ВыводКоманды();
		Если Не ПустаяСтрока(Текст) Тогда
			Лог.Информация(Текст);
		КонецЕсли;
	Исключение
		Лог.Ошибка(Конфигуратор.ВыводКоманды());
		ВызватьИсключение ТекущаяПроцедура;
	КонецПопытки;

	Попытка
		Если КаталогВременнойИБ <> Неопределено Тогда
			ВременныеФайлы.УдалитьФайл(КаталогВременнойИБ);
		КонецЕсли;
	Исключение
	КонецПопытки;

	Лог.Информация("Обновление конфигурации БД завершено.");

КонецПроцедуры //ОбновитьКонфигурациюБазыДанных

// <Описание процедуры>
//
// Параметры:
//   ИмяРасширения - <Строка> - <описание параметра>
//   СтрокаПодключения - <Тип.Вид> - <описание параметра>
//   Пользователь - <Тип.Вид> - <описание параметра>
//   Пароль - <Тип.Вид> - <описание параметра>
//   КлючРазрешенияЗапуска - <Тип.Вид> - <описание параметра>
//   ВерсияПлатформы - <Тип.Вид> - <описание параметра>
//   ДополнительныеКлючиЗапуска - <Тип.Вид> - <описание параметра>
//
Процедура ОбновитьРасширение(Знач ИмяРасширения, Знач ДополнительныеКлючиЗапуска = "") Экспорт
	ТекущаяПроцедура = "ОбновитьРасширение";

	Лог.Информация("Запускаю обновление расширения %1", ИмяРасширения);

	Попытка
		УправлениеКонфигуратором.ОбновитьКонфигурациюБазыДанных(Ложь, Истина, Ложь, ИмяРасширения);
		Текст = УправлениеКонфигуратором.ВыводКоманды();
		Если Не ПустаяСтрока(Текст) Тогда
			Лог.Информация(Текст);
		КонецЕсли;
	Исключение
		Лог.Ошибка(УправлениеКонфигуратором.ВыводКоманды());
		ВызватьИсключение ТекущаяПроцедура;
	КонецПопытки;

	Лог.Информация("Обновление расширения завершено.");

КонецПроцедуры //ОбновитьРасширение

// TODO в v8runner и vanessa-runner выделить отдельную команду для показа всех расширений конфигурации
Процедура ПоказатьСписокВсехРасширенийКонфигурации() Экспорт

	ПараметрыЗапуска = УправлениеКонфигуратором.ПолучитьПараметрыЗапуска();
	ПараметрыЗапуска.Добавить("/Visible");
	ПараметрыЗапуска.Добавить("/DumpDBCfgList");
	ПараметрыЗапуска.Добавить("-AllExtensions");
	УправлениеКонфигуратором.ВыполнитьКоманду(ПараметрыЗапуска);
	
	Лог.Информация("Список расширений конфигурации:%2%1", УправлениеКонфигуратором.ВыводКоманды(), Символы.ПС);
КонецПроцедуры

// Выполнить команду/действие в режиме 1С:Предприятия
//
// Параметры:
//  СтрокаПодключения - <Строка> - Строка подключения к БД
//  Пользователь - <Строка> - Пользователь
//  Пароль - <Строка> - Пароль для пользователя
//   КлючРазрешенияЗапуска - <Строка> - <описание параметра>
//   ПараметрЗапуска - <Строка> - <описание параметра>
//   ОбработкаДляЗапуска - <Строка> - <описание параметра>
//  ТолстыйКлиент - <Булево> - признак запуска толстого клиента
//   ВерсияПлатформы - <Строка> - <описание параметра>
//   ДополнительныеКлючиЗапуска - <Строка> - <описание параметра>
//
Процедура ЗапуститьВРежимеПредприятия(Знач СтрокаПодключения, Знач Пользователь="", Знач Пароль="",
										Знач КлючРазрешенияЗапуска = "", Знач ПараметрЗапуска="", 
										Знач ОбработкаДляЗапуска="", Знач ТолстыйКлиент = Ложь,
										Знач ВерсияПлатформы="", Знач ДополнительныеКлючиЗапуска = "") Экспорт

	Лог.Информация("Выполняю команду/действие в режиме 1С:Предприятие");

	ТекущаяПроцедура = "ЗапуститьВРежимеПредприятия";
					
	Ожидаем.Что(СтрокаПодключения, ТекущаяПроцедура+" не задана строка подключения").Заполнено();	
	
	Конфигуратор = Новый УправлениеКонфигуратором();
	УправлениеКонфигуратором = Конфигуратор;
		
	КаталогВременнойИБ = ВременныеФайлы.СоздатьКаталог();
	Конфигуратор.КаталогСборки(КаталогВременнойИБ);
	
	Конфигуратор.УстановитьКонтекст(СтрокаПодключения, Пользователь, Пароль);
	Если НЕ ПустаяСтрока(ВерсияПлатформы) Тогда
		Конфигуратор.ИспользоватьВерсиюПлатформы(ВерсияПлатформы);
	КонецЕсли;

	Если Не ТолстыйКлиент Тогда
		ТонкийКлиент1С = Конфигуратор.ПутьКТонкомуКлиенту1С(Конфигуратор.ПутьКПлатформе1С());
		Конфигуратор.ПутьКПлатформе1С(ТонкийКлиент1С);
	КонецЕсли;
	
	Если Не ПустаяСтрока(КлючРазрешенияЗапуска) Тогда
		Конфигуратор.УстановитьКлючРазрешенияЗапуска(КлючРазрешенияЗапуска);
	КонецЕсли;	
	
	ДополнительныеКлючи = ДополнительныеКлючиЗапуска;
	Если Не ПустаяСтрока(ОбработкаДляЗапуска) Тогда
		ДополнительныеКлючи = "" + ДополнительныеКлючи + "/Execute"+ОбщиеМетоды.ОбернутьПутьВКавычки(ОбработкаДляЗапуска);
	КонецЕсли;
	
	Лог.Отладка("ДополнительныеКлючи:"+ДополнительныеКлючи);
	Лог.Отладка("ПараметрЗапуска:"+ПараметрЗапуска);
	
	Попытка
		Конфигуратор.ЗапуститьВРежимеПредприятия(ПараметрЗапуска, Истина, ДополнительныеКлючи);
		Текст = Конфигуратор.ВыводКоманды();
		Если Не ПустаяСтрока(Текст) Тогда
			Лог.Информация(Текст);
		КонецЕсли;

	Исключение
		Лог.Ошибка(Конфигуратор.ВыводКоманды());
		ВызватьИсключение ТекущаяПроцедура;
	КонецПопытки;

	Лог.Информация("Выполнение команды/действие в режиме 1С:Предприятие завершено.");
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//   СтрокаПодключения - <Тип.Вид> - <описание параметра>
//   Пользователь - <Тип.Вид> - <описание параметра>
//   Пароль - <Тип.Вид> - <описание параметра>
//   СтрокаПодключенияХранилище - <Тип.Вид> - <описание параметра>
//   ПользовательХранилища - <Тип.Вид> - <описание параметра>
//   ПарольХранилища - <Тип.Вид> - <описание параметра>
//   ВерсияХранилища - <Тип.Вид> - <описание параметра>
//   ВерсияПлатформы - <Тип.Вид> - <описание параметра>
//   ДополнительныеКлючиЗапуска - <Тип.Вид> - <описание параметра>
//
Процедура ЗапуститьОбновлениеИзХранилища(
			Знач СтрокаПодключения, Знач Пользователь="", Знач Пароль="",
			Знач СтрокаПодключенияХранилище = "", Знач ПользовательХранилища="", Знач ПарольХранилища="",
			Знач ВерсияХранилища="", Знач ВерсияПлатформы="", Знач ДополнительныеКлючиЗапуска = "") Экспорт

	Лог.Информация("Выполняю обновление конфигурации из хранилища");

	ТекущаяПроцедура = "ЗапуститьОбновлениеИзХранилища";

	Ожидаем.Что(СтрокаПодключения, ТекущаяПроцедура+" не задана строка подключения").Заполнено();
	Ожидаем.Что(СтрокаПодключенияХранилище, ТекущаяПроцедура+" не задана строка подключения к хранилищу").Заполнено();
	Ожидаем.Что(ПользовательХранилища, ТекущаяПроцедура+" не задан пользователь хранилища").Заполнено();
	
	Конфигуратор = Новый УправлениеКонфигуратором();
	УправлениеКонфигуратором = Конфигуратор;
		
	Конфигуратор.УстановитьКонтекст(СтрокаПодключения, Пользователь, Пароль);
	Если НЕ ПустаяСтрока(ВерсияПлатформы) Тогда
		Конфигуратор.ИспользоватьВерсиюПлатформы(ВерсияПлатформы);
	КонецЕсли;
	
	Параметры = Конфигуратор.ПолучитьПараметрыЗапуска();

	Параметры.Добавить("/ConfigurationRepositoryF """+СтрокаПодключенияХранилище+"""");
	Параметры.Добавить("/ConfigurationRepositoryN """+ПользовательХранилища+"""");

	Если Не ПустаяСтрока(ПарольХранилища) Тогда
		Параметры.Добавить("/ConfigurationRepositoryP """+ПарольХранилища+"""");
	КонецЕсли;

	Параметры.Добавить("/ConfigurationRepositoryUpdateCfg"); 
	Параметры.Добавить("-force");
	Если Не ПустаяСтрока(ВерсияХранилища) Тогда
		Параметры.Добавить("-v" + ВерсияХранилища);
	КонецЕсли;
	
	Если Не ПустаяСтрока(ДополнительныеКлючиЗапуска) Тогда
		Параметры.Добавить(ДополнительныеКлючиЗапуска);
	КонецЕсли;

	Попытка
		Конфигуратор.ВыполнитьКоманду(Параметры);
		Текст = Конфигуратор.ВыводКоманды();
		Если Не ПустаяСтрока(Текст) Тогда
			Лог.Информация(Текст);
		КонецЕсли;

		Лог.Информация("Обновление конфигурации из хранилища завершено");
	Исключение
		Лог.Ошибка(Конфигуратор.ВыводКоманды());
		ВызватьИсключение ТекущаяПроцедура;
	КонецПопытки;

КонецПроцедуры //ЗапуститьОбновлениеИзХранилища

// Выгружает файл конфигурации из ИБ
//
// Параметры:
//  ПутьКНужномуФайлуКонфигурации - Строка - Путь к результату - выгружаемому файлу конфигурации (*.cf)
//  СтрокаПодключения - <Строка> - Строка подключения к БД
//  Пользователь - <Строка> - Пользователь
//  Пароль - <Строка> - Пароль для пользователя
//  ВерсияПлатформы - <Строка> - <описание параметра>
//
Процедура ВыгрузитьКонфигурациюВФайл(
	Знач ПутьКНужномуФайлуКонфигурации, 
	Знач СтрокаПодключения, Знач Пользователь="", Знач Пароль="", Знач ВерсияПлатформы="") Экспорт
										

	Лог.Информация("Запускаю выгрузку конфигурации в файл");
	ТекущаяПроцедура = "ВыгрузитьКонфигурациюВФайл";
					
	Ожидаем.Что(СтрокаПодключения, ТекущаяПроцедура+": не задана строка подключения").Заполнено();	
	
	// TODO отрефакторить создание УправлениеКонфигуратором и задание базовых параметров выполнения
	Конфигуратор = Новый УправлениеКонфигуратором();
	УправлениеКонфигуратором = Конфигуратор;

	КаталогВременнойИБ = ВременныеФайлы.СоздатьКаталог();
	Конфигуратор.КаталогСборки(КаталогВременнойИБ);
		
	Конфигуратор.УстановитьКонтекст(СтрокаПодключения, Пользователь, Пароль);
	Если НЕ ПустаяСтрока(ВерсияПлатформы) Тогда
		Конфигуратор.ИспользоватьВерсиюПлатформы(ВерсияПлатформы);
	КонецЕсли;
	
	Попытка
		Конфигуратор.ВыгрузитьКонфигурациюВФайл(ПутьКНужномуФайлуКонфигурации);
		Текст = Конфигуратор.ВыводКоманды();
		Если Не ПустаяСтрока(Текст) Тогда
			Лог.Информация(Текст);
		КонецЕсли;
	Исключение
		Лог.Ошибка(Конфигуратор.ВыводКоманды());
		ВызватьИсключение ТекущаяПроцедура;
	КонецПопытки;

	Попытка
		Если КаталогВременнойИБ <> Неопределено Тогда
			ВременныеФайлы.УдалитьФайл(КаталогВременнойИБ);
		КонецЕсли;
	Исключение
	КонецПопытки;

	Лог.Информация("Выгрузка в файл завершена.");

КонецПроцедуры //ВыгрузитьКонфигурациюВФайл

Функция ВыполнитьСинтаксическийКонтроль(Знач КоллекцияПроверок,
	РезультатПроверки, Знач СтрокаПодключения, Знач Пользователь="", Знач Пароль="", Знач ВерсияПлатформы="") Экспорт

	Лог.Информация("Выполняю синтакс-контроль конфигурации");
	ТекущаяПроцедура = "ВыполнитьСинтаксическийКонтроль";
					
	Ожидаем.Что(СтрокаПодключения, ТекущаяПроцедура+": не задана строка подключения").Заполнено();	
	
	// TODO отрефакторить создание УправлениеКонфигуратором и задание базовых параметров выполнения
	Конфигуратор = Новый УправлениеКонфигуратором();
	УправлениеКонфигуратором = Конфигуратор;

	КаталогВременнойИБ = ВременныеФайлы.СоздатьКаталог();
	Конфигуратор.КаталогСборки(КаталогВременнойИБ);
		
	Конфигуратор.УстановитьКонтекст(СтрокаПодключения, Пользователь, Пароль);
	Если НЕ ПустаяСтрока(ВерсияПлатформы) Тогда
		Конфигуратор.ИспользоватьВерсиюПлатформы(ВерсияПлатформы);
	КонецЕсли;
	
	// Лог.Информация("Полная проверка конфигурации");

	РезультатПроверки = "";
	Успешно = ПолучитьРезультатыСинтаксическогоКонтроля(Конфигуратор, КоллекцияПроверок, РезультатПроверки);

	Лог.Информация("Результат синтакс-контроля: %1", РезультатПроверки);

	Возврат Успешно;
	
КонецФункции

// { приватная часть 

Функция ПолучитьРезультатыСинтаксическогоКонтроля(Знач Конфигуратор, Знач КоллекцияПроверок, ЛогПроверкиИзКонфигуратора)
	Ключи = ПолучитьКлючиПроверкиКонфигурации(КоллекцияПроверок);

	Успешно = Истина;
	Попытка
		Конфигуратор.ВыполнитьСинтаксическийКонтроль(
			Ключи["-ThinClient"],
			Ключи["-WebClient"],
			Ключи["-Server"],
			Ключи["-ExternalConnection"],
			Ключи["-ThickClientOrdinaryApplication"]);

		ЛогПроверкиИзКонфигуратора = Конфигуратор.ВыводКоманды();
	Исключение
		ЛогПроверкиИзКонфигуратора = Конфигуратор.ВыводКоманды();
		Успешно = Ложь;		
	КонецПопытки;
	
	
	Возврат Успешно;
	
КонецФункции

Функция ПолучитьКлючиПроверкиКонфигурации(Знач КоллекцияПроверок)
	
	Ключи = Новый Соответствие;
	Если КоллекцияПроверок = Неопределено Тогда
		ФлагПоУмолчанию = Истина;
	Иначе
		ФлагПоУмолчанию = Ложь;
	КонецЕсли;
	
	Ключи.Вставить("-ThinClient", ФлагПоУмолчанию);
	Ключи.Вставить("-WebClient", ФлагПоУмолчанию);
	Ключи.Вставить("-Server", ФлагПоУмолчанию);
	Ключи.Вставить("-ExternalConnection", ФлагПоУмолчанию);
	Ключи.Вставить("-ThickClientOrdinaryApplication", ФлагПоУмолчанию);
    
	Для каждого Ключ Из КоллекцияПроверок Цикл
			Ключи[Ключ] = Истина;
	КонецЦикла;
	// Поз = Найти(ПараметрыПроверки, " ");
	// Пока Поз > 0 Цикл
		
	// 	Ключ = Лев(ПараметрыПроверки, Поз-1);
	// 	Если Не ПустаяСтрока(Ключ) Тогда
	// 		Ключи[Ключ] = Истина;
	// 	КонецЕсли;
	// 	ПараметрыПроверки = Сред(ПараметрыПроверки, Поз+1);
	// 	Поз = Найти(ПараметрыПроверки, " ");
		
	// КонецЦикла;
	
	// Если СтрДлина(СокрЛП(ПараметрыПроверки)) > 0 Тогда
	// 	Ключ = ПараметрыПроверки;
	// 	Ключи[Ключ] = Истина;
	// КонецЕсли;
	
	Возврат Ключи;
	
КонецФункции

Функция ПолучитьЛог()
	Если Лог = Неопределено Тогда
		Лог = Логирование.ПолучитьЛог(ПараметрыСистемы.ИмяЛогаСистемы());
	КонецЕсли;
	Возврат Лог;	
КонецФункции

// }

ПолучитьЛог();
