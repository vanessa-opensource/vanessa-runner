///////////////////////////////////////////////////////////////////
//
// Служебный модуль с реализацией работы команды init-project
//
// Структура модуля реализована в соответствии с рекомендациями
// oscript-app-template (C) EvilBeaver
//
///////////////////////////////////////////////////////////////////
#Использовать gui
#Использовать 1commands
#Использовать logos
///////////////////////////////////////////////////////////////////
Перем Настройки;
Перем Лог;
Перем ПакетыУстановки;
Перем ПакетыОшибки;
Перем ПакетыИспользуемые;
//Основная форма скрипта
Перем Форма;
//Стили закрепления (низ, вверх, лево, право)
Перем СтильЗакрепления;
//Индикатор создания проекта
Перем Индикатор;
///////////////////////////////////////////////////////////////////

Процедура ЗарегистрироватьКоманду(Знач ИмяКоманды, Знач Парсер) Экспорт
	
	ОписаниеКоманды = Парсер.ОписаниеКоманды(ИмяКоманды, "     Создание структуры проекта.");
	
	Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "--template", "Ссылка на шаблон, из которого будет клонироваться проект");
	Парсер.ДобавитьКоманду(ОписаниеКоманды);
	
КонецПроцедуры // ЗарегистрироватьКоманду

// Выполняет логику команды
//
// Параметры:
//   ПараметрыКоманды - Соответствие - Соответствие ключей командной строки и их значений
//   ДополнительныеПараметры - Соответствие - дополнительные параметры (необязательно)
Функция ВыполнитьКоманду(Знач ПараметрыКоманды, Знач ДополнительныеПараметры) Экспорт
	
	Попытка
		Лог = ДополнительныеПараметры.Лог;
	Исключение
		Лог = Логирование.ПолучитьЛог(ПараметрыСистемы.ИмяЛогаСистемы());
	КонецПопытки;
	
	ПакетыОшибки = Новый Массив;
	ПакетыИспользуемые = Новый Массив;
	
	ПрочитатьПараметры(ПараметрыКоманды);
	ИнициализацияПроекта();
	
	Возврат МенеджерКомандПриложения.РезультатыКоманд().Успех;
	
КонецФункции // ВыполнитьКоманду

Процедура ПрочитатьПараметры(Знач ПараметрыКоманды)
	
	ПутьФайлаНастроек = ПараметрыКоманды["--settings"];
	
	Настройки = Новый Структура;
	
	Настройки.Вставить("СсылкаНаШаблон", ПараметрыКоманды["--template"]);
	Настройки.Вставить("ИспользуетсяФайлНастроек", ЗначениеЗаполнено(ПутьФайлаНастроек));
	
	Настройки.Вставить("ШаблонПроекта", ПараметрыКоманды["ШаблонПроекта"]);
	Настройки.Вставить("Пакеты", ПараметрыКоманды["Пакеты"]);
	
	ИспользоватьШаблон = Истина;
	Если ЗначениеЗаполнено(Настройки.ШаблонПроекта) Тогда
		ИспользоватьШаблон = Настройки.ШаблонПроекта.Получить("Использовать");
		Если ТипЗнч(ИспользоватьШаблон) <> Тип("Булево") Тогда
			ИспользоватьШаблон = Истина;
		КонецЕсли;
	КонецЕсли;
	Настройки.Вставить("ИспользоватьШаблон", ИспользоватьШаблон);
	
КонецПроцедуры

Процедура ИнициализацияПроекта()
	
	Лог.Информация("Создаю проект...");
	
	Если Настройки.ИспользоватьШаблон Тогда
		
		УспешноКлонирован = КлонироватьШаблон();
		Если НЕ УспешноКлонирован Тогда
			Лог.Информация("Не удалось клонировать шаблон");
			Возврат;
		КонецЕсли;
		
		Если НЕ Настройки.ИспользуетсяФайлНастроек Тогда
			Пакеты = ПрочитатьПакетыИзНастроекКлонированногоШаблона();
			Если Пакеты.Количество() > 0 Тогда
				Настройки.Пакеты = Пакеты;
				Лог.Информация("Для установки выбраны пакеты из шаблона");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ИспользоватьПакетыПоУмолчанию = НЕ ЗначениеЗаполнено(Настройки.Пакеты);
	УстановитьПакеты(ИспользоватьПакетыПоУмолчанию);
	ВывестиСтатистикуПоПакетам();
	
	Лог.Информация("Проект создан");
	
КонецПроцедуры
///////////////////////////////////////////////////////////////////

Процедура УстановитьПакеты(ИспользоватьПакетыПоУмолчанию)
	
	Если ИспользоватьПакетыПоУмолчанию Тогда
		ПакетыУстановки = ПакетыПоУмолчанию();
		СоздатьФормуНастроек();
		Возврат;
	КонецЕсли;
	
	ПакетыУстановки = Настройки.Пакеты;
	Для Каждого СтрокаПакета Из ПакетыУстановки Цикл
		
		Пакет = ДанныеПакета(СтрокаПакета);
		Если НЕ Пакет.Использовать Тогда
			Продолжить;
		КонецЕсли;
		
		ПакетыИспользуемые.Добавить(Пакет.Имя);
		ВыполнитьКомандыУстановкиПакета(Пакет);
		
	КонецЦикла;
	
КонецПроцедуры

Функция КлонироватьШаблон()
	
	Шаблон = ШаблонПроекта();
	Лог.Информация("Использую шаблон проекта %1", Шаблон);
	
	ПараметрыКоманды = Новый Массив();
	ПараметрыКоманды.Добавить("clone");
	ПараметрыКоманды.Добавить(Шаблон);
	ПараметрыКоманды.Добавить(".");
	
	Возврат ВыполнитьКомандуПоСтрокеЗапуска("git", ПараметрыКоманды);
	
КонецФункции

Функция ПрочитатьПакетыИзНастроекКлонированногоШаблона()
	
	ПутьКФайлуНастроек = ОбъединитьПути(ТекущийКаталог(), ОбщиеМетоды.ИмяФайлаНастроек());
	
	НастройкиИзФайла = ОбщиеМетоды.ПрочитатьФайлJSON(ПутьКФайлуНастроек);
	
	НастройкиПроекта = НастройкиИзФайла.Получить(ИмяГруппыНастроек());
	
	Результат = Новый Массив;
	Если ЗначениеЗаполнено(НастройкиПроекта) Тогда
		Результат = НастройкиПроекта.Получить("Пакеты");
		Если ТипЗнч(Результат) <> Тип("Массив") Тогда
			Результат = Новый Массив;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ШаблонПроекта()
	
	Шаблон = "";
	Если ЗначениеЗаполнено(Настройки.СсылкаНаШаблон) Тогда
		Шаблон = Настройки.СсылкаНаШаблон;
	ИначеЕсли ЗначениеЗаполнено(Настройки.ШаблонПроекта) Тогда
		Шаблон = Настройки.ШаблонПроекта.Получить("Репозиторий");
	Иначе
		Шаблон = ШаблонПоУмолчанию();
	КонецЕсли;
	
	Возврат Шаблон;
	
КонецФункции

Процедура СоздатьФормуНастроек()
	
	УправляемыйИнтерфейс = Новый УправляемыйИнтерфейс();
	
	СтильЗакрепления = УправляемыйИнтерфейс.СтильЗакрепления;
	
	Форма = УправляемыйИнтерфейс.СоздатьФорму();
	Форма.СтартоваяПозиция = ПозицияОкнаПриОткрытии.ЦентрЭкрана;
	Форма.УстановитьДействие(ЭтотОбъект, "ПриОткрытии", "ПриОткрытииФормы");
	Форма.Показать();
	
КонецПроцедуры

Процедура ПриОткрытииФормы() Экспорт
	
	НастройкиФормы();
	
	СоздатьЭлементыБиблиотек();
	СоздатьЭлементыПодвала();
	
КонецПроцедуры

Процедура НастройкиФормы()
	
	Форма.Заголовок = "Настройки создания проекта";
	Форма.Ширина = 350;
	Форма.Высота = 200;
	
КонецПроцедуры

Процедура СоздатьЭлементыБиблиотек()
	
	ГруппаБиблиотек = Форма.Элементы.Добавить("ГруппаБиблиотек", "ГруппаФормы", Неопределено);
	ГруппаБиблиотек.Вид = Форма.ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаБиблиотек.Заголовок = "Выберите необходимые библиотеки для вашего проекта:";
	
	Для Каждого СтрокаПакета Из ПакетыУстановки Цикл
		
		Пакет = ДанныеПакета(СтрокаПакета);
		
		ПолеФлажок = Форма.Элементы.Добавить(Пакет.Имя, "ПолеФормы", ГруппаБиблиотек);
		ПолеФлажок.Вид = Форма.ВидПоляФормы.ПолеФлажка;
		ПолеФлажок.Заголовок = Пакет.Имя;
		ПолеФлажок.ПоложениеЗаголовка = Форма.ПоложениеЗаголовка.Право;
		ПолеФлажок.Значение = Пакет.Использовать;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьЭлементыПодвала()
	
	ГруппаПодвал = Форма.Элементы.Добавить("ГруппаПодвал", "ГруппаФормы", Неопределено);
	ГруппаПодвал.Вид = Форма.ВидГруппыФормы.ОбычнаяГруппа;
	
	Индикатор = Форма.Элементы.Добавить("ПрогрессБар", "ПолеФормы", ГруппаПодвал);
	Индикатор.Вид = Форма.ВидПоляФормы.ПолеИндикатора;
	Индикатор.Ширина = 220;
	Индикатор.Закрепление = СтильЗакрепления.Лево;
	
	КнопкаОК = Форма.Элементы.Добавить("КнопкаОК", "КнопкаФормы", ГруппаПодвал);
	КнопкаОК.Заголовок = "ОК";
	КнопкаОК.УстановитьДействие(ЭтотОбъект, "Нажатие", "УстановитьВыбранныеПакеты");
	
КонецПроцедуры

Процедура УстановитьВыбранныеПакеты() Экспорт
	
	Индикатор.Значение = 5;
	
	ГруппаБиблиотек = Форма.Элементы.Найти("ГруппаБиблиотек");
	ЭлементыБиблиотек = ГруппаБиблиотек.Элементы;
	
	Индикатор.Значение = 25;
	
	КоличествоЭлементов = ЭлементыБиблиотек.Количество();
	Итого = 100;
	ВесПакета = (Итого - Индикатор.Значение) / КоличествоЭлементов;
	
	Для Каждого СтрокаПакета Из ПакетыУстановки Цикл
		
		Пакет = ДанныеПакета(СтрокаПакета);
		Индикатор.Значение = Индикатор.Значение + ВесПакета;
		
		ИспользоватьПакет = ЭлементыБиблиотек.Найти(Пакет.Имя).Значение;
		Если НЕ ИспользоватьПакет Тогда
			Продолжить;
		КонецЕсли;
		
		ПакетыИспользуемые.Добавить(Пакет.Имя);
		ВыполнитьКомандыУстановкиПакета(Пакет);
		
	КонецЦикла;
	
	Форма.Закрыть();
	
КонецПроцедуры

Функция ИмяГруппыНастроек()
	Возврат ПараметрыСистемы.ВозможныеКоманды().СоздатьПроект;
КонецФункции

Функция ШаблонПоУмолчанию()
	Возврат "https://github.com/vanessa-opensource/vanessa-bootstrap.git";
КонецФункции

Функция ПакетыПоУмолчанию()
	
	Пакеты = Новый Массив();
	
	МассивКоманд = Новый Массив();
	МассивКоманд.Добавить("opm install gitsync");
	ПакетГитсинк = ПакетДляДобавления("gitsync", МассивКоманд, Истина);
	
	МассивКоманд = Новый Массив();
	МассивКоманд.Добавить("opm install gitrules");
	МассивКоманд.Добавить("gitrules install");
	ПакетГитрулес = ПакетДляДобавления("gitrules", МассивКоманд);
	
	МассивКоманд = Новый Массив();
	МассивКоманд.Добавить("opm install precommit1c");
	МассивКоманд.Добавить("precommit1c --install");
	ПакетПрекоммит = ПакетДляДобавления("precommit1c", МассивКоманд);
	
	Пакеты.Добавить(ПакетГитсинк);
	Пакеты.Добавить(ПакетГитрулес);
	Пакеты.Добавить(ПакетПрекоммит);
	
	Возврат Пакеты;
	
КонецФункции

Функция ПакетДляДобавления(Имя, Команды, Использовать = Ложь)
	
	Пакет = Новый Соответствие();
	Пакет.Вставить("Имя", Имя);
	Пакет.Вставить("Использовать", Использовать);
	Пакет.Вставить("Установка", Команды);
	
	Возврат Пакет;
	
КонецФункции

Функция ДанныеПакета(Пакет)
	
	СтруктураПакета = Новый Структура();
	СтруктураПакета.Вставить("Имя", Пакет.Получить("Имя"));
	СтруктураПакета.Вставить("Использовать", Пакет.Получить("Использовать"));
	СтруктураПакета.Вставить("Установка", Пакет.Получить("Установка"));
	
	Возврат СтруктураПакета;
	
КонецФункции

Процедура ВывестиСтатистикуПоПакетам()
	
	Ошибок = ПакетыОшибки.Количество();
	Установлено = ПакетыИспользуемые.Количество() - Ошибок;
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить("Статистика по пакатем:");
	МассивСтрок.Добавить(СтрШаблон("Установлено пакетов: %1", Установлено));
	МассивСтрок.Добавить(СтрШаблон("Не установлено пакетов: %1", Ошибок));
	
	Для Каждого СтрокаПакет Из ПакетыОшибки Цикл
		МассивСтрок.Добавить(СтрШаблон("- %1", СтрокаПакет));
	КонецЦикла;
	
	СтрокаСтатистики = СтрСоединить(МассивСтрок, Символы.ПС);
	Лог.Информация(СтрокаСтатистики);
	
КонецПроцедуры

Процедура ВыполнитьКомандыУстановкиПакета(Пакет)
	
	Для Каждого СтрокаКоманды Из Пакет.Установка Цикл
		
		Если НЕ ВыполнитьКомандуПоСтрокеЗапуска(СтрокаКоманды) Тогда
			Лог.Ошибка("Пакет %1. Команда %2 не выполнена", Пакет.Имя, СтрокаКоманды);
			ДобавитьПакетВОшибки(Пакет.Имя);
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВыполнитьКомандуПоСтрокеЗапуска(СтрокаЗапуска, Параметры = Неопределено)
	
	Команда = Новый Команда;
	Команда.ПоказыватьВыводНемедленно(Истина);
	
	Команда.УстановитьСтрокуЗапуска(СтрокаЗапуска);
	Если ЗначениеЗаполнено(Параметры) Тогда
		Команда.ДобавитьПараметры(Параметры);
	КонецЕсли;
	
	КодВозврата = Команда.Исполнить();

	Возврат КодВозврата = 0;
	
КонецФункции

Процедура ДобавитьПакетВОшибки(ИмяПакета)
	
	Если ПакетыОшибки.Найти(ИмяПакета) = Неопределено Тогда
		ПакетыОшибки.Добавить(ИмяПакета);
	КонецЕсли;
	
КонецПроцедуры
