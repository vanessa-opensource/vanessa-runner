#Использовать logos
#Использовать v8runner
#Использовать fs
#Использовать json
#Использовать v8unpack

Перем Лог;
Перем РезультатыОбработкиВнешнихОбработок;

///////////////////////////////////////////////////////////////////////////////////////////////////
// Прикладной интерфейс

// TODO удалить метод УстановитьЛог и получать лог штатным способом
Процедура УстановитьЛог(Знач ПарамЛог) Экспорт
	Лог = ПарамЛог;
КонецПроцедуры

Процедура Разобрать(Знач Путь, Знач КаталогВыгрузки,
		Знач СтрокаПодключения = "", Знач Пользователь = "", Знач Пароль = "", Знач ВерсияПлатформы = "", Знач КлючКэша = Неопределено) Экспорт

	Инициализировать();

	Файл = Новый Файл(Путь);
	КорневойПутьВыходной = Файл.ПолноеИмя;

	КлючКэша = ?(КлючКэша = Неопределено ИЛИ Не ЗначениеЗаполнено(КлючКэша), "compileepfrunner", КлючКэша);
	НастройкиИзФайла = ОбщиеМетоды.ПрочитатьНастройкиФайлJSON(ПараметрыСистемы.КорневойПутьПроекта, ИмяКешФайла(), ИмяКешФайла());

	Если НастройкиИзФайла.Количество() = 0 Тогда
		НастройкиИзФайла = Новый Соответствие();
		НастройкиИзФайла.Вставить(КлючКэша, Новый Соответствие);
		Лог.Отладка("Нет настроек в файле ./build/cache.json");
	ИначеЕсли НастройкиИзФайла.Получить(КлючКэша) = Неопределено Тогда
		НастройкиИзФайла.Вставить(КлючКэша, Новый Соответствие);
		Лог.Отладка("Нет настройки copmpileepfrunner в файле ./build/cache.json");
	КонецЕсли;
	ЗначенияПараметровСборки = Новый Соответствие;
	ЗначенияПараметровСборки.Вставить("inDir", КорневойПутьВыходной);
	ЗначенияПараметровСборки.Вставить("outDir", КаталогВыгрузки);
	ЗначенияПараметровСборки.Вставить("connectionstring", СтрокаПодключения);
	ЗначенияПараметровСборки.Вставить("user", Пользователь);
	ЗначенияПараметровСборки.Вставить("password", Пароль);
	ЗначенияПараметровСборки.Вставить("version", ВерсияПлатформы);
	ЗначенияПараметровСборки.Вставить("name", КлючКэша);
	ЗначенияПараметровСборки.Вставить("autoupdate", Истина);
	ЕстьИзмененияДляЗаписи = Ложь;
	СледитьЗаИзменениямиФайловВРабочемКаталоге(ЗначенияПараметровСборки, НастройкиИзФайла, , ЕстьИзмененияДляЗаписи);
	Если ЕстьИзмененияДляЗаписи Тогда
		ЗаписатьВКешФайл(НастройкиИзФайла);
	КонецЕсли;

КонецПроцедуры

Процедура Собрать(Знач Путь, Знач КаталогВыгрузки, Знач ДанныеПодключения,
	Знач ТолькоКопировать, Знач КлючКэша, Знач НастройкаИзмененияВерсии) Экспорт

	Перем КаталогВременнойИБ;

	СтрокаПодключения = ДанныеПодключения.СтрокаПодключения;

	ПутьКИсходникам = ОбъединитьПути(ПараметрыСистемы.КорневойПутьПроекта, Путь);

	ПапкаИсходников = Новый Файл(ПутьКИсходникам);

	Если ПустаяСтрока(СтрокаПодключения) Тогда
		Конфигуратор = Новый УправлениеКонфигуратором();
		КаталогВременнойИБ = ВременныеФайлы.НовоеИмяФайла("tmp");
		СоздатьКаталог(КаталогВременнойИБ); // TODO переделать на ВременныеФайлы

		Конфигуратор.СоздатьФайловуюБазу(КаталогВременнойИБ);
		СтрокаПодключения = "/F""" + КаталогВременнойИБ + """";
	КонецЕсли;

	Ожидаем.Что(ПапкаИсходников.Существует(), "Папка " + ПутьКИсходникам + " должна существовать").ЭтоИстина();

	КлючКэша = ?(КлючКэша = Неопределено ИЛИ Не ЗначениеЗаполнено(КлючКэша), "compileepfrunner", КлючКэша);
	Если ТолькоКопировать Тогда
		НастройкиИзФайла = Новый Соответствие;
		НастройкиИзФайла.Вставить(КлючКэша, Новый Соответствие);
	Иначе
		Лог.Отладка("Начали читать");
		НастройкиИзФайла = ОбщиеМетоды.ПрочитатьНастройкиФайлJSON(ПараметрыСистемы.КорневойПутьПроекта, ИмяКешФайла(), ИмяКешФайла());
		Лог.Отладка("Закончили читать");
		Если НастройкиИзФайла.Количество() = 0 Тогда
			НастройкиИзФайла = Новый Соответствие();
			НастройкиИзФайла.Вставить(КлючКэша, Новый Соответствие);
		ИначеЕсли НастройкиИзФайла.Получить(КлючКэша) = Неопределено Тогда
			НастройкиИзФайла.Вставить(КлючКэша, Новый Соответствие);
		КонецЕсли;
	КонецЕсли;
	ЗначенияПараметровСборки = Новый Соответствие;
	ЗначенияПараметровСборки.Вставить("inDir", ПутьКИсходникам);
	ЗначенияПараметровСборки.Вставить("outDir", КаталогВыгрузки);
	ЗначенияПараметровСборки.Вставить("connectionstring", СтрокаПодключения);
	ЗначенияПараметровСборки.Вставить("user", ДанныеПодключения.Пользователь);
	ЗначенияПараметровСборки.Вставить("password", ДанныеПодключения.Пароль);
	ЗначенияПараметровСборки.Вставить("version", ДанныеПодключения.ВерсияПлатформы);
	ЗначенияПараметровСборки.Вставить("name", КлючКэша);
	ЗначенияПараметровСборки.Вставить("autoupdate", Истина);
	ЗначенияПараметровСборки.Вставить("onlycopy", ТолькоКопировать);
	ЗначенияПараметровСборки.Вставить("set-version", НастройкаИзмененияВерсии);

	ЕстьИзмененияДляЗаписи = Ложь;
	Лог.Отладка("Начали собирать");
	СледитьЗаИзменениямиФайловВРепозиторииИсходников(ЗначенияПараметровСборки, НастройкиИзФайла, , ЕстьИзмененияДляЗаписи);
	Лог.Отладка("Закончили собирать. найдены изменения " + ЕстьИзмененияДляЗаписи + ", только копирование " + ТолькоКопировать);
	Если ЕстьИзмененияДляЗаписи И НЕ ТолькоКопировать Тогда
		ЗаписатьВКешФайл(НастройкиИзФайла);
	КонецЕсли;

КонецПроцедуры

Процедура СледитьЗаИзменениямиФайловВРабочемКаталоге(Значение, КэшПутей, Фильтр = "", ЕстьИзменения = Ложь)
	Перем РежимОдногоКаталога;
	Ключ = Строка(Значение.Получить("inDir")) + "" + Строка(Значение.Получить("outDir"));
	КаталогВходящий = ОбщиеМетоды.ПолныйПуть(Значение.Получить("inDir"));
	КаталогИсходящий = ОбщиеМетоды.ПолныйПуть(Значение.Получить("outDir"));
	СтрокаПодключения = ОбщиеМетоды.ПереопределитьПолныйПутьВСтрокеПодключения(Значение.Получить("connectionstring"));
	Пользователь = Значение.Получить("user");
	Пароль = Значение.Получить("password");
	ВерсияПлатформы = Значение.Получить("version");
	ИмяПравила = Значение.Получить("name");
	АвтоОбновление = Значение.Получить("autoupdate");
	Если ИмяПравила <> Неопределено И Не ПустаяСтрока(ИмяПравила) Тогда
		Ключ = ИмяПравила;
	КонецЕсли;

	Если Не ПустаяСтрока(Фильтр) И Фильтр <> Ключ Тогда
		Возврат;
	КонецЕсли;

	ФайлВходящий = Новый Файл(КаталогВходящий);
	Если НЕ ФайлВходящий.Существует() Тогда
		Возврат;
	КонецЕсли;

	РежимОдногоКаталога = (ОбщиеМетоды.ПолныйПуть(КаталогВходящий) = ОбщиеМетоды.ПолныйПуть(КаталогИсходящий));

	Если ФайлВходящий.ЭтоКаталог() Тогда
		СписокФайлов = НайтиФайлы(КаталогВходящий, ПолучитьМаскуВсеФайлы(), Истина);
	Иначе
		СписокФайлов = Новый Массив;
		СписокФайлов.Добавить(ФайлВходящий);
	КонецЕсли;

	Кэш = КэшПутей.Получить(Ключ);
	Если Кэш = Неопределено Тогда
		Лог.Информация("Начало epf to src " + Ключ);
		Кэш = Новый Соответствие;

		Для каждого Файл Из СписокФайлов Цикл
			Кэш.Вставить(Файл.ПолноеИмя, Файл.ПолучитьВремяИзменения());
		КонецЦикла;
		КэшПутей.Вставить(Ключ, Кэш);
	КонецЕсли;

	Лог.Отладка("Проверяем изменения epf " + Строка(КаталогВходящий) + "->" + Строка(КаталогИсходящий));

	КэшОбновляемый = Новый Соответствие();

	КоличествоФайлов = СписокФайлов.Количество();
	СписокОбработанных = Новый Соответствие();
	ПоследнийВыведенныйПроцент = 0;
	СписокПропущенных = Новый Соответствие();
	Для каждого Файл Из СписокФайлов Цикл
		Лог.Отладка("Проверяю на изменение файл <%1>", Файл.ПолноеИмя);
		Если Файл.ЭтоКаталог() Тогда
			Продолжить;
		КонецЕсли;

		Если КоличествоФайлов > 20 Тогда
			Процент = Цел((СписокОбработанных.Количество() + СписокПропущенных.Количество()) / КоличествоФайлов * 100);
			Если Процент % 10 = 0 И ПоследнийВыведенныйПроцент <> Процент Тогда
				Лог.Информация("Обработано " + Формат(Процент, "ЧЦ=3; ЧДЦ=0; ЧН=") + "% ");
				ПоследнийВыведенныйПроцент = Процент;
			КонецЕсли;
		КонецЕсли;

		Изменен = Ложь;
		ДанныеФайла = Кэш.Получить(Файл.ПолноеИмя); ДанныеФайлаТекущее = ХэшФайла(Файл);
		Если ТипЗнч(ДанныеФайла) <> Тип("Соответствие") Тогда
			ДанныеФайла = Новый Структура("Хеш, Время", "", "");
		КонецЕсли;
		Если ДанныеФайла["Хеш"] <> ДанныеФайлаТекущее["Хеш"] Тогда
		// Если СокрЛП(Строка(ДанныеФайла)) <> СокрЛП(Строка(ВремяТекущее)) Тогда
			Изменен = Истина;
			Лог.Отладка("Изменен:" + Файл.ПолноеИмя + " время старое:" + Строка(ДанныеФайла["Время"]) + " новое:" + ДанныеФайлаТекущее["Время"]);
			Лог.Отладка("Изменен:" + Файл.ПолноеИмя + " хеш старый старое:" + Строка(ДанныеФайла["Хеш"]) + " новое:" + ДанныеФайлаТекущее["Хеш"]);
		Иначе
			Лог.Отладка("Пропустили:" + Файл.ПолноеИмя + " время старое:" + Строка(ДанныеФайла["Время"]) + " новое:" + ДанныеФайлаТекущее["Время"]);
			СписокПропущенных.Вставить(Файл.ПолноеИмя, Истина);
		КонецЕсли;

		Если НЕ Изменен Тогда
			Продолжить;
		КонецЕсли;

		КаталогВходящийДляРазбора = ?(ФайлВходящий.ЭтоКаталог(), КаталогВходящий, ФайлВходящий.Путь);
		КаталогВходящийДляРазбора = ОбщиеМетоды.ПолныйПуть(КаталогВходящийДляРазбора);

		ЭтоБинарныйОбъект1С = ТипФайлаПоддерживается(Файл);
		ИмяФайлаНазначения = ?(ЭтоБинарныйОбъект1С, Файл.ИмяБезРасширения, Файл.Имя);
		ИмяФайлаНазначения = ОбъединитьПути(Файл.Путь, ИмяФайлаНазначения);

		ОтносительныйПутьФайла = ПолучитьОтносительныйПутьФайла(КаталогВходящийДляРазбора, ИмяФайлаНазначения);
		ПутьФайлаНазначения = ОбъединитьПути(КаталогИсходящий, ОтносительныйПутьФайла);

		ЕстьИзменения = Истина;

		Если НЕ ЭтоБинарныйОбъект1С Тогда
			Если РежимОдногоКаталога Тогда
				Продолжить;
			КонецЕсли;

			ФайлНовый = Новый Файл(ПутьФайлаНазначения);
			КаталогНовый = Новый Файл(ФайлНовый.Путь);
			Если НЕ КаталогНовый.Существует() Тогда
				СоздатьКаталог(КаталогНовый.ПолноеИмя);
			КонецЕсли;

			Если ФайлНовый.Существует() Тогда
				Лог.Отладка(СтрШаблон("Удаляем файл %1", ПутьФайлаНазначения));
				Попытка
					УдалитьФайлы(ФайлНовый.Путь, ФайлНовый.Имя);
				Исключение
					Лог.Ошибка("Ошибка удаления файла " + ПутьФайлаНазначения + ":" + ОписаниеОшибки());
				КонецПопытки;
			КонецЕсли;

			КопироватьФайл(Файл.ПолноеИмя, ФайлНовый.ПолноеИмя);
			Кэш.Вставить(ФайлНовый.ПолноеИмя, ХэшФайла(ФайлНовый));
			КэшОбновляемый.Вставить(ФайлНовый.ПолноеИмя, Кэш.Получить(ФайлНовый.ПолноеИмя));
			Лог.Отладка(СтрШаблон("Завершено копирование файла %1 в каталог %2", Файл.Имя, ФайлНовый.ПолноеИмя));

			Продолжить;
		КонецЕсли;

		Лог.Отладка("Анализируем внешнюю обработку/отчет %1", Файл.ПолноеИмя);

		Лог.Отладка("   относительный путь :%1", ОтносительныйПутьФайла);
		Лог.Отладка("   источник           :%1", КаталогВходящийДляРазбора);
		Лог.Отладка("   назначение         :%1", КаталогИсходящий);
		Лог.Отладка("   новый путь         :%1", ПутьФайлаНазначения);

		Лог.Отладка("Разбираем внешнюю обработку/отчет %1", Файл.ПолноеИмя);
		СоздатьКаталог(ПутьФайлаНазначения);
		КаталогРазобранный = РазобратьФайлВнешняяОбработка(Файл, КаталогИсходящий, КаталогВходящийДляРазбора,  СтрокаПодключения, Пользователь, Пароль, ВерсияПлатформы);
		СписокФайловНовый = НайтиФайлы(Новый Файл(КаталогРазобранный).ПолноеИмя, ПолучитьМаскуВсеФайлы(), Истина);
		Для каждого ФайлНовыйКэша Из СписокФайловНовый Цикл
			Если ФайлНовыйКэша.ЭтоКаталог() = Ложь Тогда
				ДанныеФайлаНовый = ХэшФайла(ФайлНовыйКэша);
				Кэш.Вставить(ФайлНовыйКэша.ПолноеИмя, ДанныеФайлаНовый);
				КэшОбновляемый.Вставить(ФайлНовыйКэша.ПолноеИмя, ДанныеФайлаНовый);
			КонецЕсли;
		КонецЦикла;

		Кэш.Вставить(Файл.ПолноеИмя, ХэшФайла(ФайлНовыйКэша));
		СписокОбработанных.Вставить(Файл.ПолноеИмя, Истина);
	КонецЦикла;

	Для каждого Элемент Из СписокОбработанных Цикл
		Файл = Новый Файл(Элемент.Ключ);
		Кэш.Вставить(Файл.ПолноеИмя, ХэшФайла(Файл));
	КонецЦикла;

	КэшПутей.Вставить(Ключ, Кэш);
	Кэш = Неопределено;
	Если (СписокОбработанных.Количество() + СписокПропущенных.Количество())  > 0 Тогда
		Лог.Информация("Изменено " + Строка(СписокОбработанных.Количество()));
		Лог.Информация("Пропустили: " + Строка(СписокПропущенных.Количество()));
		КолМаксИзмененийВывода = 5;
		Для каждого Элемент Из СписокОбработанных Цикл
			Если КолМаксИзмененийВывода < 0 Тогда
				Лог.Информация("Обработано ...");
				Прервать;
			КонецЕсли;
			Лог.Отладка("Обработан " + Элемент.Ключ);
			КолМаксИзмененийВывода = КолМаксИзмененийВывода - 1;
		КонецЦикла;
	КонецЕсли;

	ОбновитьЗависимыйКэш(АвтоОбновление, КэшПутей, КэшОбновляемый);

КонецПроцедуры

Процедура СледитьЗаИзменениямиФайловВРепозиторииИсходников(Значение, КэшПутей, Фильтр = "", ЕстьИзменения = Ложь)

	Ключ = Строка(Значение.Получить("inDir")) + "" + Строка(Значение.Получить("outDir"));
	ИмяПравила = Значение.Получить("name");
	Если ИмяПравила <> Неопределено И Не ПустаяСтрока(ИмяПравила) Тогда
		Ключ = ИмяПравила;
	КонецЕсли;
	Если Не ПустаяСтрока(Фильтр) И Фильтр <> Ключ Тогда
		Возврат;
	КонецЕсли;

	КаталогВходящий = ОбщиеМетоды.ПолныйПуть(Значение.Получить("inDir"));
	КаталогИсходящий = ОбщиеМетоды.ПолныйПуть(Значение.Получить("outDir"));
	СтрокаПодключения = ОбщиеМетоды.ПереопределитьПолныйПутьВСтрокеПодключения(Значение.Получить("connectionstring"));
	Пользователь = Значение.Получить("user");
	Пароль = Значение.Получить("password");
	ВерсияПлатформы = Значение.Получить("version");
	АвтоОбновление = Значение.Получить("autoupdate");
	ТолькоКопировать = Значение.Получить("onlycopy");
	Если ТипЗнч(ТолькоКопировать) <> Тип("Булево") Тогда
		ТолькоКопировать = Ложь;
	КонецЕсли;
	НастройкаИзмененияВерсии = Значение.Получить("set-version");
	Если Не ЗначениеЗаполнено(НастройкаИзмененияВерсии) Тогда
		НастройкаИзмененияВерсии = Новый Структура;
	КонецЕсли;

	РежимОдногоКаталога = (ОбщиеМетоды.ПолныйПуть(КаталогВходящий) = ОбщиеМетоды.ПолныйПуть(КаталогИсходящий));

	Кэш = КэшПутей.Получить(Ключ);
	Если Кэш = Неопределено Тогда
		Лог.Информация("Начало src to epf:" + Ключ);
		Кэш = Новый Соответствие;
		СписокФайлов = НайтиФайлы(КаталогВходящий, ПолучитьМаскуВсеФайлы(), Истина);
		Для каждого Файл Из СписокФайлов Цикл
			Кэш.Вставить(Файл.ПолноеИмя, Файл.ПолучитьВремяИзменения());
		КонецЦикла;
		КэшПутей.Вставить(Ключ, Кэш);
	КонецЕсли;

	Лог.Отладка("Проверяем изменения src " + Строка(КаталогВходящий) + "->" + Строка(КаталогИсходящий));

	СписокФайлов = НайтиФайлы(КаталогВходящий, ПолучитьМаскуВсеФайлы(), Истина);
	СписокОбработанных = Новый Соответствие();
	СписокПропущенных = Новый Соответствие();
	КэшОбновляемый = Новый Соответствие();
	КоличествоФайлов = СписокФайлов.Количество();
	ПоследнийВыведенныйПроцент = 0;
	Для каждого Файл Из СписокФайлов Цикл
		Если Файл.ЭтоКаталог() Тогда
			Продолжить;
		КонецЕсли;

		Если КоличествоФайлов > 20 Тогда
			Процент = Цел((СписокОбработанных.Количество() + СписокПропущенных.Количество()) / КоличествоФайлов * 100);
			Если Процент % 10 = 0 И ПоследнийВыведенныйПроцент <> Процент Тогда
				Лог.Информация("Обработано " + Формат(Процент, "ЧЦ=3; ЧДЦ=0; ЧН=") + "% ");
				ПоследнийВыведенныйПроцент = Процент;
			КонецЕсли;
		КонецЕсли;

		ДанныеФайла = Кэш.Получить(Файл.ПолноеИмя);
		ДанныеФайлаТекущее = ХэшФайла(Файл);
		Если ТипЗнч(ДанныеФайла) <> Тип("Соответствие") Тогда
			ДанныеФайла = Новый Соответствие();
			ДанныеФайла.Вставить("Хеш", "");
			ДанныеФайла.Вставить("Время", "");
		КонецЕсли;
		Если ДанныеФайла.Получить("Хеш") <> ДанныеФайлаТекущее.Получить("Хеш") Тогда
			Изменен = Истина;
			ЕстьИзменения = Истина;
			Лог.Отладка("Изменен:" + СтрЗаменить(Файл.ПолноеИмя, Новый Файл(КаталогВходящий).ПолноеИмя, "") + " старое:" + Строка(ДанныеФайла["Время"]) + " новое:" + ДанныеФайлаТекущее["Время"]);
		Иначе
			Лог.Отладка("Пропускаем:" + СтрЗаменить(Файл.ПолноеИмя, Новый Файл(КаталогВходящий).ПолноеИмя, "") + " время старое:" + Строка(ДанныеФайла["Время"]));
			СписокПропущенных.Вставить(Файл.ПолноеИмя, Истина);
		КонецЕсли;

		Если Изменен = Истина Тогда
			ОбработкуНашли = Ложь;
			ПапкаИсходников = "";
			ПутьКИсходникамОбработки = Файл.ПолноеИмя;
			// Нам передали путь к измененному файлу, необходимо определить корневую папку.
			МаксСчетчикЦикла = 5;
			Если Файл.Расширение = ".png" Или Файл.Расширение = ".ico" Тогда
				МаксСчетчикЦикла = 7;  // \vanessa\Forms\УправляемаяФорма\Ext\Form\Items\ИмяКартинки\Picture.png
			КонецЕсли;

			Если НЕ ТолькоКопировать Тогда
				Для Счетчик = 0 По МаксСчетчикЦикла Цикл
					ФайлПутьКИсходникамОбработки = Новый Файл(ПутьКИсходникамОбработки);
					Если ФайлПутьКИсходникамОбработки.ЭтоКаталог() Тогда
						ФайлПутьКИсходникамОбработки = Новый Файл(ФайлПутьКИсходникамОбработки.ПолноеИмя + "../");
						ФайлПутьКИсходникамОбработки = Новый Файл(ФайлПутьКИсходникамОбработки.ПолноеИмя);
						Лог.Отладка("ЭтоКаталог %1 %2 %3", Счетчик, ФайлПутьКИсходникамОбработки.Путь, ФайлПутьКИсходникамОбработки.ПолноеИмя);
					Иначе
						ФайлПутьКИсходникамОбработки = Новый Файл(ФайлПутьКИсходникамОбработки.Путь);
					КонецЕсли;

					ПутьКИсходникамОбработки = ФайлПутьКИсходникамОбработки.ПолноеИмя;
					Лог.Отладка("1 %1 %2", Счетчик, ПутьКИсходникамОбработки);
					Если ЭтоПутьКИсходнымКодамОбработок(ПутьКИсходникамОбработки) Тогда
						Лог.Отладка("Это путь к исходникам " + ПутьКИсходникамОбработки);
						ПапкаИсходников = Новый Файл(ПутьКИсходникамОбработки).ПолноеИмя;
						ОбработкуНашли = Истина;
						Прервать;
					Иначе
						Лог.Отладка("4 %1 %2", Счетчик, ПутьКИсходникамОбработки);
					КонецЕсли;
					ФайлПутьКИсходникамОбработки = Новый Файл(ПутьКИсходникамОбработки);
					Лог.Отладка("2 %1 %2", Счетчик, ФайлПутьКИсходникамОбработки.ПолноеИмя);
				КонецЦикла;
			КонецЕсли;

			НеобходимоПрервать = Ложь;
			Для каждого Элемент Из СписокОбработанных Цикл
				Если СтрНайти(Файл.ПолноеИмя, Элемент.Ключ) > 0 Тогда
					НеобходимоПрервать = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;

			Если НеобходимоПрервать Тогда
				Кэш.Вставить(Файл.ПолноеИмя, ХэшФайла(Файл));
			КонецЕсли;

			Если ОбработкуНашли И СписокОбработанных.Получить(ПапкаИсходников) <> Неопределено Тогда
				Кэш.Вставить(Файл.ПолноеИмя, ХэшФайла(Файл));
				СписокОбработанных.Вставить(Файл.ПолноеИмя, Истина);
			ИначеЕсли ОбработкуНашли Тогда
				РежимВыгрузки = "Каталог";
				Если Не ПустаяСтрока(КаталогИсходящий) Тогда
					Расширение = Прав(СокрЛП(КаталогИсходящий), 4);
					Если НРег(Расширение) = ".epf" ИЛИ НРег(Расширение) = ".erf" Тогда
						ФайлКаталогВыгрузки = Новый Файл(КаталогИсходящий);
						Если НЕ (ФайлКаталогВыгрузки.Существует() И ФайлКаталогВыгрузки.ЭтоКаталог()) Тогда
							РежимВыгрузки = "Файл";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;

				Если РежимВыгрузки = "Каталог" Тогда
					Если ОбщиеМетоды.ДополнитьРазделителемПути(ОбщиеМетоды.ПолныйПуть(КаталогВходящий))
						= ОбщиеМетоды.ДополнитьРазделителемПути(ПапкаИсходников) Тогда

						ПутьОтносительно = "./";
					Иначе
						ПутьОтносительно = "../";
					КонецЕсли;

					КаталогВыгрузкиОбработки = Новый Файл(ОбъединитьПути(КаталогИсходящий, ПолучитьОтносительныйПутьФайла(ОбщиеМетоды.ПолныйПуть(КаталогВходящий), ПапкаИсходников), ПутьОтносительно)).ПолноеИмя;
					ФС.ОбеспечитьКаталог(КаталогВыгрузкиОбработки);
				Иначе
					КаталогВыгрузкиОбработки = КаталогИсходящий;
				КонецЕсли;

				ИмяФайлаОбъекта = СобратьФайлВнешнейОбработки(ПапкаИсходников, КаталогВыгрузкиОбработки,
					СтрокаПодключения, Пользователь, Пароль, ВерсияПлатформы,
					НастройкаИзмененияВерсии);

				КаталогФайл = Новый Файл(ПапкаИсходников);
				КаталогВходящийПолныйПуть = Новый Файл(КаталогВходящий).ПолноеИмя;
				Лог.Информация("Собирали: %1 изменен %2", КаталогФайл.Имя, СтрЗаменить(КаталогВыгрузкиОбработки, КаталогВходящийПолныйПуть, ""));
				СписокСобранныхОбработок = НайтиФайлы(КаталогВыгрузкиОбработки, "" + КаталогФайл.Имя + "*");

				Для каждого ЭлементОбработки Из СписокСобранныхОбработок Цикл
					ДанныеФайлаОбработки = ХэшФайла(ЭлементОбработки);
					Кэш.Вставить(ЭлементОбработки.ПолноеИмя, ДанныеФайлаОбработки);
					КэшОбновляемый.Вставить(ЭлементОбработки.ПолноеИмя, ДанныеФайлаОбработки);
				КонецЦикла;
				СписокОбработанных.Вставить(ПапкаИсходников, Истина);
			ИначеЕсли СписокОбработанных.Получить(Файл.ПолноеИмя) <> Неопределено Тогда
				Продолжить;
			ИначеЕсли НЕ НеобходимоПрервать Тогда
				НовыйПутьВыгрузки = ОбъединитьПути(КаталогИсходящий, ПолучитьОтносительныйПутьФайла(ОбщиеМетоды.ПолныйПуть(КаталогВходящий), Файл.ПолноеИмя));
				Если Не РежимОдногоКаталога Тогда
					Лог.Отладка("Копируем " + Файл.ПолноеИмя + "->" + НовыйПутьВыгрузки);
					НовыйКаталог = Новый Файл(Новый Файл(НовыйПутьВыгрузки).Путь);
					Если НЕ НовыйКаталог.Существует() Тогда
						СоздатьКаталог(НовыйКаталог.ПолноеИмя);
					КонецЕсли;
					КопироватьФайл(Файл.ПолноеИмя, НовыйПутьВыгрузки);
				КонецЕсли;

				ФайлСобранный = Новый Файл(НовыйПутьВыгрузки);
				ДанныеФайлаСобранный = ХэшФайла(ФайлСобранный);
				Кэш.Вставить(ФайлСобранный.ПолноеИмя, ДанныеФайлаСобранный);
				КэшОбновляемый.Вставить(ФайлСобранный.ПолноеИмя, ДанныеФайлаСобранный);
			КонецЕсли;
			Кэш.Вставить(Файл.ПолноеИмя, ХэшФайла(Файл));
			СписокОбработанных.Вставить(Файл.ПолноеИмя, Истина);
		КонецЕсли;
	КонецЦикла;

	Для каждого Элемент Из СписокОбработанных Цикл
		Файл = Новый Файл(Элемент.Ключ);
		Кэш.Вставить(Файл.ПолноеИмя, ХэшФайла(Файл));
	КонецЦикла;

	КэшПутей.Вставить(Ключ, Кэш);
	Кэш = Неопределено;
	Лог.Информация("Изменено: " + Строка(СписокОбработанных.Количество()));
	Лог.Информация("Пропустили: " + Строка(СписокПропущенных.Количество()));
	Если СписокОбработанных.Количество() > 0 Тогда
		КолМаксИзмененийВывода = 5;
		Для каждого Элемент Из СписокОбработанных Цикл
			Если КолМаксИзмененийВывода < 0 Тогда
				Лог.Информация("Обработано ...");
				Прервать;
			КонецЕсли;
			Лог.Отладка("Обработан " + Элемент.Ключ);
			КолМаксИзмененийВывода = КолМаксИзмененийВывода - 1;
		КонецЦикла;
	КонецЕсли;

	ОбновитьЗависимыйКэш(АвтоОбновление, КэшПутей, КэшОбновляемый);

КонецПроцедуры

Процедура РазобратьКаталог(Знач ОбъектКаталога, Знач КаталогВыгрузки, Знач КаталогКорень,
	Знач СтрокаПодключения = "", Знач Пользователь = "", Знач Пароль = "", Знач ВерсияПлатформы = "") Экспорт

	ПутьКаталога = ОбъектКаталога.ПолноеИмя;

	ОтносительныйПутьКаталога = ФС.ОтносительныйПуть(КаталогКорень, ПутьКаталога);
	ОтносительныйПутьКаталога = ?(ПустаяСтрока(ОтносительныйПутьКаталога), ПутьКаталога, ОтносительныйПутьКаталога);

	ОтносительныйПутьКаталогаПоТекущемуКаталогу = ФС.ОтносительныйПуть(ТекущийКаталог(), ПутьКаталога);
	ОтносительныйПутьКаталогаВыгрузкиПоТекущемуКаталогу = ФС.ОтносительныйПуть(ТекущийКаталог(), КаталогВыгрузки);

	Лог.Информация("Разбираю внешние обработки из каталога %1 на исходники в каталог %2, корень %3",
		ОтносительныйПутьКаталогаПоТекущемуКаталогу, ОтносительныйПутьКаталогаВыгрузкиПоТекущемуКаталогу, ТекущийКаталог());

	ИмяКаталогаВыгрузки = Новый Файл(КаталогВыгрузки).Имя;

	Файлы = НайтиФайлы(ПутьКаталога, ПолучитьМаскуВсеФайлы());

	Если Файлы.Количество() = 0 Тогда
		Лог.Предупреждение("Не найдено файлов в каталоге");
	КонецЕсли;

	Для Каждого Файл Из Файлы Цикл
		ИмяФайла = Файл.Имя;
		ИмяФайлаВРег = Врег(ИмяФайла);
		Если Лев(ИмяФайла, 4) = ".git" Или ИмяФайлаВРег = "BUILD" Или ИмяФайлаВРег = "CACHE.TXT" Тогда
			Продолжить;
		КонецЕсли;

		Если Файл.ЭтоКаталог() Тогда

			ПолноеИмяКаталога = Файл.ПолноеИмя;
			ФайлНовый = Новый Файл(ПолноеИмяКаталога);
			Если ОбъединитьПути(ФайлНовый.ПолноеИмя, "./") = ОбъединитьПути(Новый Файл(КаталогВыгрузки).ПолноеИмя, "./") Тогда

				Продолжить;
			КонецЕсли;

			ФайлКаталогВВыгрузке = Новый Файл(ОбъединитьПути(КаталогВыгрузки, ОтносительныйПутьКаталога));
			Если НЕ ФайлКаталогВВыгрузке.Существует() Тогда
				Лог.Отладка(СтрШаблон("Создаем новый каталог %1", ФайлКаталогВВыгрузке.ПолноеИмя));
				СоздатьКаталог(ФайлКаталогВВыгрузке.ПолноеИмя);
			КонецЕсли;

			РазобратьКаталог(ФайлНовый, КаталогВыгрузки, КаталогКорень, СтрокаПодключения, Пользователь, Пароль, ВерсияПлатформы);

		ИначеЕсли ОбщиеМетоды.ТипФайлаПоддерживается(Файл) Тогда
			Лог.Отладка(СтрШаблон("Подготовка выгрузки файла %1 в каталог %2", ИмяФайла, ИмяКаталогаВыгрузки));
			РазобратьФайлВнешняяОбработка(Файл, КаталогВыгрузки, КаталогКорень,
				СтрокаПодключения, Пользователь, Пароль, ВерсияПлатформы);
			Лог.Отладка(СтрШаблон("Завершена выгрузка файла %1 в каталог %2", ИмяФайла, ИмяКаталогаВыгрузки));
		Иначе

			ОтносительныйПутьКаталогаФайла = ФС.ОтносительныйПуть(КаталогКорень, ПолноеИмяКаталога);
			Лог.Отладка("ОтносительныйПутьКаталогаФайла <" + ОтносительныйПутьКаталогаФайла + ">");
			ПутьФайлаИсходников = ОбъединитьПути(КаталогВыгрузки, ОтносительныйПутьКаталогаФайла);
			Лог.Отладка("ПутьФайлаИсходников <" + ПутьФайлаИсходников + ">");

			ФайлНовый = Новый Файл(ПутьФайлаИсходников);
			КаталогНовый = Новый Файл(ФайлНовый.Путь);
			Если НЕ КаталогНовый.Существует() Тогда
				СоздатьКаталог(КаталогНовый.ПолноеИмя);
			КонецЕсли;

			Если ФайлНовый.Существует() = Истина Тогда

				Лог.Отладка(СтрШаблон("Удаляем файл %1", ПутьФайлаИсходников));
				Попытка
					УдалитьФайлы(ФайлНовый.Путь, ФайлНовый.Имя);
				Исключение
					Лог.Ошибка("Ошибка удаления файла " + ПутьФайлаИсходников + ":" + ОписаниеОшибки());
				КонецПопытки;

			КонецЕсли;

			КопироватьФайл(ПолноеИмяКаталога, ФайлНовый.ПолноеИмя);

			Лог.Отладка(СтрШаблон("Завершено копирование файла %1 в каталог %2", ИмяФайла, ФайлНовый.ПолноеИмя));
		КонецЕсли;
	КонецЦикла;

	Лог.Информация("Завершена выгрузка каталога %1 в каталог %2, корень %3",
		ОтносительныйПутьКаталогаПоТекущемуКаталогу, ОтносительныйПутьКаталогаВыгрузкиПоТекущемуКаталогу, ТекущийКаталог());
КонецПроцедуры

Функция РазобратьФайлВнешняяОбработка(Знач Файл, Знач КаталогВыгрузки, Знач КаталогКорень = "", Знач СтрокаПодключения = "", Знач Пользователь = "", Знач Пароль = "", Знач ВерсияПлатформы = "") Экспорт
	ПутьФайла = Файл.ПолноеИмя;
	Лог.Отладка(СтрШаблон("Проверка необходимости выгрузки файла %1 в каталог %2, корень %3", ПутьФайла, КаталогВыгрузки, КаталогКорень));

	Попытка
		КаталогИсходников = РазобратьФайлВнутрВнешняяОбработка(Файл, КаталогВыгрузки, КаталогКорень, СтрокаПодключения, Пользователь, Пароль, ВерсияПлатформы);
	Исключение
		Лог.Ошибка(ОписаниеОшибки());
		РезультатыОбработкиВнешнихОбработок.Вставить(ПутьФайла, ОписаниеОшибки());
	КонецПопытки;

	Лог.Отладка(СтрШаблон("Завершена проверка необходимости выгрузки файла %1 в каталог %2, корень %3", ПутьФайла, КаталогВыгрузки, КаталогКорень));

	Возврат КаталогИсходников;

КонецФункции

Функция РазобратьФайлВнутрВнешняяОбработка(Знач Файл, Знач КаталогВыгрузки, Знач КаталогКорень, Знач СтрокаПодключения = "", Знач Пользователь = "", Знач Пароль = "", Знач ВерсияПлатформы = "")

	ПутьФайла = Файл.ПолноеИмя;
	Если Не ТипФайлаПоддерживается(Файл) Тогда
		ВызватьИсключение "Тип файла """ + Файл.Расширение + """ не поддерживается";
	КонецЕсли;

	Ожидаем.Что(Файл.Существует(), "Файл " + ПутьФайла + " должен существовать").ЭтоИстина();

	ОтносительныйПутьКаталогаФайла = ПолучитьОтносительныйПутьФайла(КаталогКорень, ОбъединитьПути(Файл.Путь, Файл.ИмяБезРасширения));
	Лог.Отладка("ОтносительныйПутьКаталогаФайла <" + ОтносительныйПутьКаталогаФайла + ">");

	ПутьКаталогаИсходников = ОбъединитьПути(КаталогВыгрузки, ОтносительныйПутьКаталогаФайла);
	Лог.Отладка("ПутьКаталогаИсходников <" + ПутьКаталогаИсходников + ">");
	ПапкаИсходников = Новый Файл(ПутьКаталогаИсходников);

	ОбщиеМетоды.ОбеспечитьПустойКаталог(ПапкаИсходников);
	ЗапуститьРаспаковкуВнешнихОбработок(Файл, ПапкаИсходников, СтрокаПодключения, Пользователь, Пароль, ВерсияПлатформы);

	Возврат ПапкаИсходников.ПолноеИмя;

КонецФункции

Процедура ЗапуститьРаспаковкуВнешнихОбработок(Знач Файл, Знач ПапкаИсходников, СтрокаПодключения, Пользователь, Пароль, ВерсияПлатформы)

	Лог.Отладка("Запускаем распаковку файла");

	ВременныйКаталог = ВременныеФайлы.СоздатьКаталог();

	Конфигуратор = Новый УправлениеКонфигуратором();
	КаталогВременнойИБ = ВременныеФайлы.СоздатьКаталог();
	Конфигуратор.КаталогСборки(КаталогВременнойИБ);

	Если НЕ ПустаяСтрока(СтрокаПодключения) Тогда
		Конфигуратор.УстановитьКонтекст(СтрокаПодключения, Пользователь, Пароль);
	КонецЕсли;

	Если НЕ ПустаяСтрока(ВерсияПлатформы) Тогда
		Лог.Отладка(ВерсияПлатформы);
		Конфигуратор.ИспользоватьВерсиюПлатформы(ВерсияПлатформы); // TODO указать разрядность платформы
	КонецЕсли;

	ЛогКонфигуратора = Логирование.ПолучитьЛог("oscript.lib.v8runner");
	ЛогКонфигуратора.УстановитьУровень(Лог.Уровень());

	Параметры = Конфигуратор.ПолучитьПараметрыЗапуска();

	Параметры.Добавить("/DumpExternalDataProcessorOrReportToFiles");
	Параметры.Добавить(ОбщиеМетоды.ОбернутьПутьВКавычки(ВременныйКаталог));
	Параметры.Добавить(ОбщиеМетоды.ОбернутьПутьВКавычки(Файл.ПолноеИмя));

	Конфигуратор.ВыполнитьКоманду(Параметры);
	Лог.Отладка("Вывод 1С:Предприятия - " + Конфигуратор.ВыводКоманды());

	Лог.Отладка("Очищаем каталог временной ИБ");
	УдалитьФайлы(Конфигуратор.ФайлИнформации());

	ИскатьВПодкаталогах = Истина;
	СписокФайлов = НайтиФайлы(ВременныйКаталог, "*.bin", ИскатьВПодкаталогах);
	Лог.Отладка("Найдено файлов выгрузки: " + СписокФайлов.Количество() + " шт.");
	Для Каждого НайденныйФайл Из СписокФайлов Цикл
		Если Нрег(Прав(НайденныйФайл.ПолноеИмя, 5)) = ".form" Или Нрег(НайденныйФайл.Имя) = "form.bin" Тогда
			КаталогФормы = ОбъединитьПути(НайденныйФайл.Путь, НайденныйФайл.ИмяБезРасширения);
			ОбщиеМетоды.ОбеспечитьПустойКаталог(Новый Файл(КаталогФормы));
			РаспаковатьКонтейнерМетаданных(НайденныйФайл.ПолноеИмя, КаталогФормы);
		КонецЕсли;
	КонецЦикла;

	НайденныеФайлы = НайтиФайлы(ВременныйКаталог, "*");
	Лог.Отладка("Нашли файлов для переименования: " + НайденныеФайлы.Количество());
	Для Каждого НайденныйФайл Из НайденныеФайлы Цикл

		Если НормализованноеИмяФайла(НайденныйФайл.Имя) = НормализованноеИмяФайла(Файл.ИмяБезРасширения) Тогда
			Прервать;
		КонецЕсли;

		Если НайденныйФайл.ЭтоФайл() Тогда
			Лог.Отладка("Перед перемещением файла %1 в %2", НайденныйФайл.ПолноеИмя, ОбъединитьПути(НайденныйФайл.Путь, Файл.ИмяБезРасширения) + ".xml");
			ПереместитьФайл(НайденныйФайл.ПолноеИмя, ОбъединитьПути(НайденныйФайл.Путь, Файл.ИмяБезРасширения) + ".xml");
		Иначе
			Лог.Отладка("Перед копированием каталога %1 в каталог %2", НайденныйФайл.ПолноеИмя, ОбъединитьПути(НайденныйФайл.Путь, Файл.ИмяБезРасширения));
			ФС.КопироватьСодержимоеКаталога(НайденныйФайл.ПолноеИмя, ОбъединитьПути(НайденныйФайл.Путь, Файл.ИмяБезРасширения));
			УдалитьФайлы(НайденныйФайл.ПолноеИмя);
		КонецЕсли;
	КонецЦикла;

	ФС.КопироватьСодержимоеКаталога(ВременныйКаталог, ПапкаИсходников.ПолноеИмя);

КонецПроцедуры

Процедура ЗаписатьФайлJSON(ИмяФайла, Значение)
	Лог.Отладка(ИмяФайла);

	ПарсерJSON  = Новый ПарсерJSON();
	JsonСтрока = ПарсерJSON.ЗаписатьJSON(Значение);
	Запись = Новый ЗаписьТекста(ИмяФайла);
	Запись.Записать(JsonСтрока);
	Запись.Закрыть();
КонецПроцедуры

Процедура ОбновитьЗависимыйКэш(АвтоОбновление, КэшПутей, КэшОбновляемый)

	Если КэшОбновляемый.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	МассивКешейДляАвтообновления = Новый Массив;
	Если АвтоОбновление <> Неопределено Тогда
		Если ТипЗнч(АвтоОбновление) = Тип("Строка") И ЗначениеЗаполнено(АвтоОбновление) Тогда
			СоответствиеПутей = Новый Соответствие;
			СоответствиеПутей.Вставить("autoupdate", АвтоОбновление);
			МассивКешейДляАвтообновления.Добавить(СоответствиеПутей);
		ИначеЕсли ТипЗнч(АвтоОбновление) = Тип("Массив") Тогда
			МассивКешейДляАвтообновления = АвтоОбновление;
		КонецЕсли;

	КонецЕсли;

	Для каждого ЭлементМассива Из МассивКешейДляАвтообновления Цикл

		Попытка
			Кэш = КэшПутей.Получить(ЭлементМассива.Получить("autoupdate"));
			Для каждого Элемент Из КэшОбновляемый Цикл
				Кэш.Вставить(Элемент.Ключ, Элемент.Значение);
			КонецЦикла;
		Исключение
			Лог.Ошибка("Ошибка обновления других кэшей " + Элемент + ":" + ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры

Функция СобратьФайлВнешнейОбработки(Знач ПутьКИсходникам, Знач КаталогВыгрузки,
		Знач СтрокаПодключения, Знач Пользователь, Знач Пароль, Знач ВерсияПлатформы, Знач НастройкаИзмененияВерсии)

	Лог.Отладка("Собираю исходники <" + ПутьКИсходникам + ">");

	НайденныйФайл = НайтиФайлы(ПутьКИсходникам, "*.xml");
	Ожидаем.Что(НайденныйФайл.Количество(), "Базовый файл xml <" + ПутьКИсходникам +  ">*.xml должен существовать").Больше(0);

	ИмяФайлаОбъекта = КаталогВыгрузки; // ОбъединитьПути(ТекущийКаталог(), КаталогВыгрузки);
	Лог.Отладка("Собираю исходники ИмяФайлаОбъекта <" + ИмяФайлаОбъекта + ">");

	БазовыйХмлФайл = НайденныйФайл[0];
	ИзменитьНомерСборкиВнешнейОбработки(БазовыйХмлФайл.ПолноеИмя, НастройкаИзмененияВерсии);

	СобратьФайлВнешнейОбработкиИзИсходников(БазовыйХмлФайл, ИмяФайлаОбъекта, СтрокаПодключения, Пользователь, Пароль, ВерсияПлатформы);
	Лог.Отладка("Успешно собран файл " + ИмяФайлаОбъекта);

	Возврат ИмяФайлаОбъекта;
КонецФункции

Процедура ИзменитьНомерСборкиВнешнейОбработки(Знач ПутьИсходников, Знач НастройкиУстановки)
	НомерСборки = НастройкиУстановки.НомерСборки;
	Если Не ЗначениеЗаполнено(НомерСборки) Тогда
		Возврат;
	КонецЕсли;

	Лог.Информация("Изменяю номер сборки в исходниках внешнего файла 1С на %1", НомерСборки);

	МенеджерВерсийФайлов1С = Новый МенеджерВерсийФайлов1С;
	СтарыеВерсии = МенеджерВерсийФайлов1С.УстановитьНомерСборкиДляВнешнегоФайла(ПутьИсходников, НомерСборки, НастройкиУстановки);

	Для каждого КлючЗначение Из СтарыеВерсии Цикл
		Лог.Информация("    Старая версия %1, файл - %2", КлючЗначение.Значение, КлючЗначение.Ключ);
	КонецЦикла;

КонецПроцедуры

Процедура СобратьФайлВнешнейОбработкиИзИсходников(ПапкаИсходников, ИмяФайлаОбъекта,
		Знач СтрокаПодключения, Пользователь, Пароль, ВерсияПлатформы)

	Лог.Отладка("Собираю файл из исходников <" + ПапкаИсходников.ПолноеИмя + "> в файл " + ИмяФайлаОбъекта);

	Конфигуратор = Новый УправлениеКонфигуратором();
	КаталогВременнойИБ = ВременныеФайлы.СоздатьКаталог();
	Конфигуратор.КаталогСборки(КаталогВременнойИБ);

	Если НЕ ПустаяСтрока(СтрокаПодключения) Тогда
		Конфигуратор.УстановитьКонтекст(СтрокаПодключения, Пользователь, Пароль);
	КонецЕсли;

	Если НЕ ПустаяСтрока(ВерсияПлатформы) Тогда
		Лог.Отладка(ВерсияПлатформы);
		Конфигуратор.ИспользоватьВерсиюПлатформы(ВерсияПлатформы); // TODO указать разрядность платформы
	КонецЕсли;

	ЛогКонфигуратора = Логирование.ПолучитьЛог("oscript.lib.v8runner");
	ЛогКонфигуратора.УстановитьУровень(Лог.Уровень());

	Параметры = Конфигуратор.ПолучитьПараметрыЗапуска();

	Параметры.Добавить("/LoadExternalDataProcessorOrReportFromFiles");
	Параметры.Добавить(ОбщиеМетоды.ОбернутьПутьВКавычки(ПапкаИсходников.ПолноеИмя));
	Параметры.Добавить(ОбщиеМетоды.ОбернутьПутьВКавычки(ИмяФайлаОбъекта));

	Конфигуратор.ВыполнитьКоманду(Параметры);
	Лог.Отладка("Вывод 1С:Предприятия - " + Конфигуратор.ВыводКоманды());
	Лог.Отладка("Очищаем каталог временной ИБ");

КонецПроцедуры

Процедура РаспаковатьКонтейнерМетаданных(Знач ФайлРаспаковки, Знач КаталогРаспаковки)
	ФайлДляРаспаковки = Новый файл(ФайлРаспаковки);
	Если КаталогРаспаковки = "" Тогда
		КаталогРаспаковки = ВременныеФайлы.СоздатьКаталог();
	КонецЕсли;

	ЧтениеФайла8 = Новый ЧтениеФайла8(ФайлДляРаспаковки.ПолноеИмя);
	Для Каждого Элемент Из ЧтениеФайла8.Элементы Цикл
		ЧтениеФайла8.Извлечь(Элемент, КаталогРаспаковки, Истина);
	КонецЦикла;
	ЧтениеФайла8 = Неопределено;
	ВыполнитьСборкуМусора();

	ФайлМодуля = Новый Файл(ОбъединитьПути(КаталогРаспаковки, "module"));
	Если ФайлМодуля.Существует() Тогда
		ФайлКуда = Новый Файл(ОбъединитьПути(ФайлМодуля.Путь, "Module.bsl"));
		Лог.Отладка("Перемещаю файл <%1> в <%2>", ФайлМодуля.ПолноеИмя, ФайлКуда.ПолноеИмя);
		Если ФайлКуда.Существует() Тогда
			УдалитьФайлы(ФайлКуда.ПолноеИмя);
		КонецЕсли;
		ПереместитьФайл(ФайлМодуля.ПолноеИмя, ФайлКуда.ПолноеИмя);
		Ожидаем.Что(ФайлКуда.Существует(),
			СтрШаблон("Файл должен существовать, а его нет. %1", ФайлКуда.ПолноеИмя)).ЭтоИстина();
	КонецЕсли;

КонецПроцедуры

Функция ЭтоПутьКИсходнымКодамОбработок(ПутьКПапке)

	МассивИмен = НайтиФайлы(ПутьКПапке, "*.xml", Ложь);
	Для Каждого Элемент Из МассивИмен Цикл
		ЧтениеТекста = Новый ЧтениеТекста(Элемент.ПолноеИмя);
		Содержание = ЧтениеТекста.Прочитать();
		ЧтениеТекста.Закрыть();
		СодержаниеВРег = Врег(Содержание);
		Если Найти(СодержаниеВРег, "<EXTERNALDATAPROCESSOR UUID=") > 0 ИЛИ Найти(СодержаниеВРег, "<EXTERNALREPORT UUID=") > 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;

	Возврат Ложь;

КонецФункции

Функция ХэшФайла(Знач Файл)
	Перем Провайдер;
	Провайдер = Новый ХешированиеДанных(ХешФункция.MD5);
	Если Файл.ЭтоКаталог() Тогда
		Провайдер.Добавить(Файл.ПолноеИмя);
	Иначе
		Провайдер.ДобавитьФайл(Файл.ПолноеИмя);
	КонецЕсли;
	Результат = Новый Соответствие();
	Результат.Вставить("Хеш", Строка(Провайдер.ХешСуммаСтрокой));
	Результат.Вставить("Время", Строка(Файл.ПолучитьВремяИзменения()));
	Провайдер.Очистить();
	Возврат Результат;

КонецФункции

Функция ТипФайлаПоддерживается(Файл)
	Если ПустаяСтрока(Файл.Расширение) Тогда
		Возврат Ложь;
	КонецЕсли;

	Поз = Найти(".epf,.erf,", Файл.Расширение + ",");
	Возврат Поз > 0;

КонецФункции

Функция ПолучитьОтносительныйПутьФайла(КаталогКорень, ВнутреннийКаталог)
	Если ПустаяСтрока(КаталогКорень) Тогда
		Возврат "";
	КонецЕсли;

	ФайлКорень = Новый Файл(КаталогКорень);
	ФайлВнутреннийКаталог = Новый Файл(ВнутреннийКаталог);
	Рез = СтрЗаменить(ФайлВнутреннийКаталог.ПолноеИмя, ФайлКорень.ПолноеИмя, "");
	Если Найти("\/", Лев(Рез, 1)) > 0 Тогда
		Рез = Сред(Рез, 2);
	КонецЕсли;
	Если Найти("\/", Прав(Рез, 1)) > 0 Тогда
		Рез = Лев(Рез, СтрДлина(Рез) - 1);
	КонецЕсли;

	Возврат Рез;
КонецФункции

Функция НормализованноеИмяФайла(Знач ПутьФайла)
	Возврат НРег(ПутьФайла);
КонецФункции

Процедура ЗаписатьВКешФайл(Знач НастройкиИзФайла)
	ПутьФайлаКеша = ОбъединитьПути(ПараметрыСистемы.КорневойПутьПроекта, ИмяКешФайла());
	ПутьККэшу =  Новый Файл(ПутьФайлаКеша).Путь;
	Если Новый Файл(ПутьККэшу).Существует() Тогда
		Лог.Отладка("Начали записывать в кеш-файл");
		ЗаписатьФайлJSON(ПутьФайлаКеша, НастройкиИзФайла);
		Лог.Отладка("закончили записывать в кеш-файл");
	КонецЕсли;
КонецПроцедуры

Функция ИмяКешФайла()
	Возврат "./build/cache.json";
КонецФункции

Процедура Инициализировать()
	РезультатыОбработкиВнешнихОбработок = Новый Соответствие;
КонецПроцедуры

Инициализировать();
